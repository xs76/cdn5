(function () {
    'use strict';

    var ModuleType;
    (function (ModuleType) {
        ModuleType["Loading"] = "Loading";
        ModuleType["Main"] = "Main";
        ModuleType["PARK_MAIN"] = "parkMain";
        ModuleType["Battle"] = "Battle";
        ModuleType["Skin"] = "Skin";
        ModuleType["Sign"] = "Sign";
        ModuleType["Shujia"] = "Shujia";
        ModuleType["Eggs"] = "Eggs";
        ModuleType["DeskTop"] = "DeskTop";
        ModuleType["ClipDoll"] = "ClipDoll";
        ModuleType["ClipDollEntry"] = "ClipDollEntry";
        ModuleType["End"] = "End";
        ModuleType["Share"] = "Share";
        ModuleType["Invate"] = "Invate";
        ModuleType["Reward"] = "Reward";
        ModuleType["UITurntable"] = "UITurntable";
        ModuleType["UIAdExchangeMoney"] = "UIAdExchangeMoney";
        ModuleType["UIGlodAnimFly"] = "UIGlodAnimFly";
        ModuleType["UISetting"] = "UISetting";
        ModuleType["FinalTrySkin"] = "FinalTrySkin";
        ModuleType["TrySkin"] = "TrySkin";
        ModuleType["UIFreeMap"] = "UIFreeMap";
        ModuleType["EggsTips"] = "EggsTips";
        ModuleType["ExChangeCode"] = "ExChangeCode";
        ModuleType["Baoxiang"] = "baoxiang";
        ModuleType["Wubeijingli"] = "wubeijingli";
        ModuleType["HaidiShiYong"] = "HaidiShiYong";
        ModuleType["Haidijiesuan"] = "Haidijiesuan";
        ModuleType["HaidiHuodelongnv"] = "HaidiHuodelongnv";
        ModuleType["FreeMapZhengXiang"] = "FreeMapZhengXiang";
        ModuleType["Suijishiyong"] = "Suijishiyong";
        ModuleType["GuanZhu"] = "GuanZhu";
        ModuleType["AdShare"] = "AdShare";
        ModuleType["Sousou"] = "Sousou";
        ModuleType["UIRank"] = "UIRank";
        ModuleType["UIXiangqing"] = "UIXiangqing";
        ModuleType["UITryTaozhuan"] = "UITryTaozhuan";
        ModuleType["UIChuoKa"] = "UIChuoKa";
        ModuleType["UIFanpaizi"] = "UIFanpaizi";
        ModuleType["Zhongji"] = "Zhongji";
        ModuleType["Mijing"] = "Mijing";
        ModuleType["Boshi"] = "Boshi";
        ModuleType["Aoteman"] = "Aoteman";
        ModuleType["ChengShi"] = "ChengShi";
        ModuleType["UpgradePlayer"] = "UpgradePlayer";
        ModuleType["UpgradeCoustomer"] = "UpgradeCoustomer";
        ModuleType["Wuguiyuanzhu"] = "Wuguiyuanzhu";
        ModuleType["Tujian"] = "Tujian";
        ModuleType["OpenFish"] = "OpenFish";
        ModuleType["Maichu"] = "Maichu";
        ModuleType["Huodeyouting"] = "Huodeyouting";
        ModuleType["Shibai"] = "Shibai";
        ModuleType["Shenmihaiyu"] = "Shenmihaiyu";
        ModuleType["Tanchaung"] = "Tanchaung";
        ModuleType["JiesuoHuiCheng"] = "JiesuoHuiCheng";
        ModuleType["JM"] = "JM";
        ModuleType["Renwu"] = "Renwu";
        ModuleType["Duihuakuang"] = "Duihuakuang";
        ModuleType["Dongxue"] = "Dongxue";
        ModuleType["Fuhua"] = "Fuhua";
        ModuleType["Fuben"] = "Fuben";
        ModuleType["Shengji"] = "Shengji";
        ModuleType["ZhaoMu"] = "ZhaoMu";
        ModuleType["Choujiang"] = "Choujiang";
        ModuleType["comp_jinbidonghua1"] = "comp_jinbidonghua1";
        ModuleType["comp_jinbidonghua2"] = "comp_jinbidonghua2";
        ModuleType["comp_jinbidonghua3"] = "comp_jinbidonghua3";
        ModuleType["comp_jinbidonghua4"] = "comp_jinbidonghua4";
        ModuleType["Buji"] = "Buji";
        ModuleType["HuodeBox"] = "HuodeBox";
        ModuleType["Dianti"] = "Dianti";
    })(ModuleType || (ModuleType = {}));
    class RescoureData {
        static get SKYURL() {
            return this.SEVERURL + "unity/LayaScene_xingzuo/Conventional/sky2/sky1.lmat";
        }
        static getSkyUrl(name) {
            return this.SEVERURL + "unity/LayaScene_Main/Conventional/sky/" + name + "/sky1.lmat";
        }
        static get PREFABS_SCENE() {
            return RescoureData.SEVERURL + "unity/LayaScene_Prefabs/Conventional/";
        }
        static get PREFABS_SCENE1() {
            return RescoureData.SEVERURL + "unity/LayaScene_Prefabs1/Conventional/";
        }
        static get PREFABS_SCENE2() {
            return RescoureData.SEVERURL + "unity/LayaScene_Prefabs2/Conventional/";
        }
        static get ROOM_SCENE1() {
            return RescoureData.SEVERURL + "unity/LayaScene_Room1/Conventional/";
        }
        static get CUSTOMER_SCENE() {
            return RescoureData.SEVERURL + "unity/LayaScene_Customer/Conventional/";
        }
        static get FRIST_SCENE() {
            return RescoureData.SEVERURL + "unity/LayaScene_Frist/Conventional/";
        }
        static get ROOM_SCENE() {
            return RescoureData.SEVERURL + "unity/LayaScene_Room/Conventional/";
        }
        static get ENEMY_SCENE() {
            return RescoureData.SEVERURL + "unity/LayaScene_Enemy/Conventional/";
        }
        static getNums(c) {
            return RescoureData.PREFABS_SCENE + "Assets/_res/map/" + c + ".png";
        }
        static getIcon(c) {
            return RescoureData.PREFABS_SCENE + "Assets/_res/map/icon/" + c + ".png";
        }
        static getPrefabsUrlByName(name) {
            if (name == "")
                return "";
            return this.isLoadPrefab ? this.PREFABS_SCENE + name + ".lh" : "";
        }
        static getPlayerUrlByName(name) {
            switch (name) {
                case "PlayerCharacter":
                    return RescoureData.URL + RescoureData.FRIST_SCENE + name + ".lh";
                default:
                    return RescoureData.URL + RescoureData.PLAYER_SCENE + name + ".lh";
            }
        }
        static getCustomerUrlByName(name) {
            return RescoureData.URL + RescoureData.CUSTOMER_SCENE + name + ".lh";
        }
        static getFrist(name) {
            return this.FRIST_SCENE + name + ".lh";
        }
        static getRoom(name) {
            return this.ROOM_SCENE + name + ".lh";
        }
        static getPrefabId() {
            return 3;
        }
        static getGuiResId() {
            return 14;
        }
        static getPlayerId() {
            return 6;
        }
        static getRoomId() {
            return 7;
        }
        static getCustomerId() {
            return 8;
        }
        static get isLoadPrefab() {
            return this.LoadedIDS.indexOf(this.getPrefabId()) >= 0;
        }
        static get isLoadGUI() {
            return this.LoadedIDS.indexOf(this.getGuiResId()) >= 0;
        }
        static get isLoadPlayer() {
            return this.LoadedIDS.indexOf(this.getPlayerId()) >= 0;
        }
        static get isLoadRoom() {
            return this.LoadedIDS.indexOf(this.getRoomId()) >= 0;
        }
        static get isLoadFrist() {
            return this.LoadedIDS.indexOf(1) >= 0;
        }
        static get isLoadCustomer() {
            return this.LoadedIDS.indexOf(this.getCustomerId()) >= 0;
        }
    }
    RescoureData.URL = "";
    RescoureData.SEVERURL = "";
    RescoureData.MAIN_SCENE = "unity/LayaScene_Main/Conventional/Main.ls";
    RescoureData.WORLD_SCENE = "unity/LayaScene_OverWorld/Conventional/OverWorld.ls";
    RescoureData.WORLD_SHENMIHAIYU = "unity/LayaScene_ShenMiHaiYu/Conventional/ShenMiHaiYu.ls";
    RescoureData.EFFECT_SCENE = "unity/LayaScene_Effect/Conventional/";
    RescoureData.PERFABS_DATA = "unity/ComData.compent.json";
    RescoureData.MODEL_DATA = "unity/Player.model.json";
    RescoureData.PLAYER_SCENE = "unity/LayaScene_Player/Conventional/";
    RescoureData.LoadedIDS = [];

    const PI$1 = Math.PI;
    const _d2r$1 = PI$1 / 180.0;
    const _r2d$1 = 180.0 / PI$1;
    class Maths$1 {
        static formula2(value, start, length) {
            return (value + (start % length)) % length;
        }
        static formula(value, mul) {
            let res = mul * value;
            while (value--)
                res += value;
            return res;
        }
        static isEven(value) {
            return value % 2 == 0;
        }
        static toRadian(a) {
            return a * _d2r$1;
        }
        static converGold(value) {
            return "";
        }
        static equallyNum(value, count, randMin, randMax, isPositive = false) {
            let equally = Math.floor(value / count);
            if (isPositive)
                randMax = equally - 1;
            let res = [];
            let lastRand = 0;
            let is = true;
            for (let i = 0; i < count; i++) {
                if (is) {
                    is = false;
                    lastRand = this.minToMax(randMin, randMax);
                    res.push(equally + lastRand);
                }
                else {
                    is = true;
                    res.push(equally - lastRand);
                }
            }
            return res;
        }
        static decimal(value) {
            value = value - (Math.floor(value));
            return value;
        }
        static toDegree(a, is_ormalize = true) {
            if (a == undefined)
                return 0;
            if (is_ormalize)
                a = this.normalizeAngle(a);
            return a * _r2d$1;
        }
        static normalizeAngle(angle) {
            angle = angle % (2 * PI$1);
            if (angle < 0) {
                angle += (2 * PI$1);
            }
            return angle;
        }
        static checkRange(value, value2, range) {
            return Math.abs(value - value2) <= range;
        }
        static isTargetRange(value, target, range) {
            if (value >= target - range)
                return true;
            if (value <= target + range)
                return true;
            return false;
        }
        static zeroEqually(space, index, length) {
            return (index - (length - 1) / 2) * space;
        }
        static equally(count = 1, min, max) {
            count++;
            let equally = [];
            let space = ((max - min) / count);
            for (let i = 1; i < count; i++) {
                equally.push(~~(min + space * i));
            }
            return equally;
        }
        static abs_sub_length(value1, value2) {
            return Math.abs(value1 - value2);
        }
        static add_arrs(values) {
            let count = 0;
            for (let value of values)
                count += value;
            return count;
        }
        static lerp(a, b, r) {
            return a + (b - a) * r;
        }
        static clamp01(value) {
            return value < 0 ? 0 : value < 1 ? value : 1;
        }
        static clampf(value, min, max) {
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
            }
            return value < min ? min : value < max ? value : max;
        }
        static isClampf(value, min, max) {
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
            }
            if (value <= max && value >= min)
                return true;
            else
                return false;
        }
        static create_arr_num(max) {
            let values = [];
            for (let i = 0; i < max; i++)
                values.push(i);
            return values;
        }
        static isRandom(value) {
            if (!value)
                return false;
            if (value >= 1)
                return true;
            if (value <= 0)
                return false;
            return value > Math.random();
        }
        static zeroToMax(max) {
            if (max <= 1)
                return 0;
            let random = Math.random();
            return ~~((random == 1 ? 0.5 : random) * max);
        }
        static minToMax(min, max, is_int = true) {
            if (min == max)
                return min;
            if (min < 0) {
                if (is_int)
                    return Math.round(Math.random() * (Math.abs(min) + max)) + min;
                else
                    return Math.random() * (Math.abs(min) + max) + min;
            }
            if (is_int)
                return Math.round(Math.random() * (max - min)) + min;
            else
                return Math.random() * (max - min) + min;
        }
        static converNumber(value) {
            if (typeof value == "string")
                return Number(value);
        }
        static find_num_section(arr, num, out, is_contain_num = false) {
            if (!out)
                out = { i: 0, count: 0 };
            out.i = arr.length;
            out.count = 0;
            for (let i = 0; i < arr.length; i++) {
                out.count += arr[i];
                if (is_contain_num) {
                    if (num <= out.count) {
                        out.i = i;
                        return out;
                    }
                }
                else if (num < out.count) {
                    out.i = i;
                    return out;
                }
            }
            return out;
        }
        static find_num_section_random(arr) {
            let all = this.add_arrs(arr);
            let last = 0;
            let rand = this.zeroToMax(all - 1);
            for (let i = 0; i < arr.length; i++) {
                let value = arr[i];
                if (rand >= last && rand < last + value)
                    return i;
                last += value;
            }
            return arr.length;
        }
    }

    new Laya.Vector3();
    const v3_zeor = new Laya.Vector3();
    new Laya.Vector3(1, 1, 1);
    const v3_up = new Laya.Vector3(0, 1, 0);
    new Laya.Vector3(0, 180, 0);
    new Laya.Point();
    new Laya.Quaternion();

    const isValid$1 = function (key) {
        if (key == null || key == undefined || key === false)
            return false;
        else
            return true;
    };
    const minxi$1 = function (value) {
        if (value === null || value === undefined || value === 0 || value === "")
            return value;
        let _getPropertyDescriptor = function (obj, name) {
            while (obj) {
                let pd = Object.getOwnPropertyDescriptor(obj, name);
                if (pd) {
                    return pd;
                }
                obj = Object.getPrototypeOf(obj);
            }
            return null;
        };
        let _copyprop = function (name, source, target) {
            let pd = _getPropertyDescriptor(source, name);
            Object.defineProperty(target, name, pd);
        };
        let _mixin = function (obj, ...sourceObj) {
            obj = obj || {};
            for (let i = 1, length = arguments.length; i < length; i++) {
                let source = arguments[i];
                if (source) {
                    if (typeof source !== "object") {
                        continue;
                    }
                    for (let name in source) {
                        _copyprop(name, source, obj);
                    }
                }
            }
            return obj;
        };
        let target = null;
        if (typeof value === "object") {
            target = _mixin(Array.isArray(value) ? [] : {}, value);
        }
        else {
            target = value;
        }
        return target;
    };
    const str_indexOf$1 = function (value, str, start = 0) {
        return value.indexOf(str, start);
    };
    const str_lastIndexOf$1 = function (value, str) {
        let index = str_indexOf$1(value, str);
        if (index == -1) {
            return -1;
        }
        return index + str.length;
    };
    function findNodeByPathNoRoot(node, path, tag) {
        var list = path.split("/");
        for (var i = 1; i < list.length; i++) {
            node = node.getChildByName(list[i]);
            if (node == null) {
                console.error("findNodeByPathNoRoot: Not found", path, list[i], tag);
                return null;
            }
        }
        return node;
    }
    function numToZero(value) {
        let a = value * 100000000;
        return a > 1 ? value : 0;
    }
    function WorldToScreen2(camera, point) {
        let p = new Laya.Vector4();
        camera.worldToViewportPoint(point, p);
        var value = new Laya.Vector3(p.x, p.y, p.z);
        return value;
    }
    function numberOnCubicBezier2(by, cy, ey, t) {
        return Math.pow((1 - t), 2) * by + 2 * t * (1 - t) * cy + Math.pow(t, 2) * ey;
    }
    function getRotate(spos, epos) {
        var atan2 = Math.atan2((epos.y - spos.y), (epos.x - spos.x));
        var rotate = (atan2) * 180 / Math.PI + 90;
        return rotate;
    }

    class Sets$1 {
        constructor(isRepeat = true, ...values) {
            this.sets = [];
            this.isRepeat = true;
            this.isRepeat = isRepeat;
            this.add(...values);
        }
        static delete(arr, value) {
            if (arr.length == 0)
                return false;
            let index = arr.indexOf(value);
            if (index == -1)
                return false;
            arr.splice(index, 1);
            return true;
        }
        static map(arr, cb) {
            let set = [];
            for (let i = 0; i < arr.length; i++) {
                let data = cb(arr[i], i, arr);
                set.push(data);
            }
            return set;
        }
        static has(arr, value, stringCompare = false) {
            if (arr.length == 0)
                return false;
            let index;
            if (stringCompare)
                index = this.map(arr, v => v.toString()).indexOf(value.toString());
            else
                index = arr.indexOf(value);
            return index != -1;
        }
        static add(arr, ...values) {
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (this.has(arr, value))
                    continue;
                arr.push(value);
            }
        }
        static random(value, exclude) {
            if (value.length == 0)
                return null;
            if (exclude) {
                let values = [];
                for (let i = 0, l = value.length; i < l; i++)
                    if (!exclude(value[i], i))
                        values.push(values[i]);
                return this.random(values);
            }
            return value[Maths$1.zeroToMax(value.length)];
        }
        static getAt(value, index) {
            index = Maths$1.clampf(index, 0, value.length - 1);
            return value[index];
        }
        static filterValue(values, cb) {
            let idx = this.filterOf(values, cb);
            if (idx == -1) {
                return null;
            }
            return values[idx];
        }
        static filterOf(values, cb) {
            let idx = -1;
            for (let i = 0; i < values.length; i++) {
                if (values[i] && cb(values[i], i)) {
                    return i;
                }
            }
            return idx;
        }
        static filter(values, cb, out) {
            if (!out)
                out = [];
            for (let i = 0; i < values.length; i++) {
                if (values[i] && cb(values[i], i)) {
                    out.push(values[i]);
                }
            }
            return out;
        }
        static push(values, push) {
            for (let value of push)
                values.push(value);
            return values;
        }
        static sort(values, cb) {
            return values.sort(cb);
        }
        static shuffle(arr, isChangeOriginal = true) {
            if (!isChangeOriginal) {
                let tmp = arr.concat();
                tmp.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return tmp;
            }
            else {
                arr.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return arr;
            }
        }
        static random_arr(vlaues, count = 1) {
            let res = this.shuffle(vlaues, false), arr = [];
            for (let i = 0; i < count; i++)
                if (isValid$1(res[i]))
                    arr.push(res[i]);
            return arr;
        }
        add(...values) {
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (this.has(value) && this.isRepeat)
                    continue;
                this.sets.push(value);
            }
            return this;
        }
        delete(value) {
            return Sets$1.delete(this.sets, value);
        }
        get size() {
            return this.sets.length;
        }
        indexOf(value) {
            return this.sets.indexOf(value);
        }
        has(value, stringCompare = false) {
            return Sets$1.has(this.sets, value, stringCompare);
        }
        hasOf(index) {
            return isValid$1(this.sets[index]);
        }
        clear() {
            this.sets.length = 0;
        }
        shift(isOrign = true) {
            if (isOrign) {
                return this.sets.shift();
            }
            else {
                return this.sets.concat()[0];
            }
        }
        toString() {
            return this.sets.toString();
        }
        forEach(cb) {
            this.sets.forEach(cb);
            return this;
        }
        map(cb) {
            return Sets$1.map(this.sets, cb);
        }
        findContinueIndexs(cb) {
            let values = this.map(cb);
            let indexs = [];
            for (let i = 0; i < values.length; i++) {
                let continueIndexs = [];
                for (let j = 0; j < values.length - i; j++) {
                    let cur = values[i + j];
                    let last = values[i] + j;
                    if (cur == last)
                        continueIndexs.push(values.indexOf(cur));
                    else
                        break;
                }
                if (continueIndexs.length > 1)
                    indexs.push(continueIndexs);
            }
            let res = [];
            for (let i = 0; i < indexs.length; i++) {
                let self = indexs[i];
                let id = this._findContinueIndexs(res, self);
                if (id == -1)
                    res.push(self);
                else if (res[id].length < self.length)
                    res[id] = self;
            }
            return res;
        }
        _findContinueIndexs(maxs, min) {
            for (let i = 0; i < maxs.length; i++) {
                for (let j = 0; j < maxs[i].length; j++) {
                    if (min.indexOf(maxs[i][j]) != -1) {
                        return i;
                    }
                }
            }
            return -1;
        }
        findEquallyIndexs() {
            let indexs = new Sets$1();
            for (let i = 0; i < this.sets.length; i++) {
                let self = this.sets[i];
                let equally = [];
                for (let j = 0; j < this.sets.length; j++) {
                    let all = this.sets[j];
                    if (self == all) {
                        equally.push(j);
                    }
                }
                if (equally.length > 1) {
                    if (!indexs.has(equally, true)) {
                        indexs.add(equally);
                    }
                }
            }
            return indexs;
        }
        sort(cb) {
            Sets$1.sort(this.sets, cb);
            return this;
        }
        deleteFilterOf(cb) {
            let idx = this.filterOf(cb);
            if (idx == -1) {
                return false;
            }
            this.splice(idx);
            return true;
        }
        filterOf(cb) {
            return Sets$1.filterOf(this.sets, cb);
        }
        filterValue(cb) {
            return Sets$1.filterValue(this.sets, cb);
        }
        filter(cb) {
            let tmp = new Sets$1(this.isRepeat);
            for (let i = 0; i < this.sets.length; i++) {
                let data = this.sets[i];
                if (cb(data, i, this.sets)) {
                    tmp.add(data);
                }
            }
            return tmp;
        }
        deletePops(count = 1, cb) {
            for (let i = 0; i < count; i++) {
                let pop = this.pop();
                pop && cb && cb(pop);
            }
        }
        splice(start, deleteCount = 1) {
            return this.sets.splice(start, deleteCount);
        }
        unShift() {
        }
        pop(remove = true) {
            return Sets$1.pop(this.sets, remove);
        }
        static pop(values, remove = true) {
            if (remove) {
                return values.pop();
            }
            else {
                return values[values.length - 1] || null;
            }
        }
        lastValueOf(index) {
            return this.sets[this.sets.length - index - 1] || null;
        }
        valuesOf(index) {
            return this.sets[index] || null;
        }
        randomOf() {
            if (this.size == 0)
                return null;
            return this.sets[Maths$1.zeroToMax(this.sets.length)];
        }
        addRandomSelf() {
            if (this.size == 0)
                return false;
            let data = this.sets[Maths$1.zeroToMax(this.sets.length)];
            this.add(data);
            return true;
        }
        shuffle(isChangeOriginal = true) {
            return Sets$1.shuffle(this.sets, isChangeOriginal);
        }
        deep() {
            let deep = JSON.parse(JSON.stringify(this.sets));
            return new Sets$1(this.isRepeat, ...deep);
        }
        concat(...value) {
            return new Sets$1(this.isRepeat, ...this.sets.concat(value));
        }
    }

    class Maps$1 {
        constructor(obj) {
            this._maps = {};
            this.isKeyNumber = false;
            if (obj)
                this._maps = obj;
        }
        static filterValue(values, cb) {
            let key = this.filterKey(values, cb);
            if (!key) {
                return null;
            }
            return values[key];
        }
        static size(value) {
            let count = 0;
            for (let k in value)
                count++;
            return count;
        }
        static filterKey(values, cb) {
            for (let key in values) {
                if (cb(values[key], key))
                    return key;
            }
            return null;
        }
        static shiftKey(value) {
            for (let k in value)
                return k;
            return "";
        }
        static shiftValue(value) {
            for (let k in value)
                return value[k];
            return null;
        }
        static converValueArray(value) {
            let values = [];
            for (let key in value)
                values.push(value[key]);
            return values;
        }
        static forEach(value, cb) {
            for (let k in value) {
                let v = value[k];
                if (!v)
                    continue;
                cb && cb(v, k);
            }
        }
        get maps() { return this._maps; }
        set maps(value) {
            this._maps = value;
        }
        set(key, value) {
            this.isKeyNumber = (typeof key == "number");
            this._maps[key] = value;
            return this;
        }
        has(key) {
            return isValid$1(this._maps[key]);
        }
        get(key) {
            if (!this.has(key))
                return null;
            return this._maps[key];
        }
        gets(keys) {
            let values = [];
            for (let i = 0; i < keys.length; i++) {
                let value = this.get(keys[i]);
                if (value)
                    values.push(value);
            }
            return values;
        }
        delete(key) {
            delete this._maps[key];
        }
        forEach(cb) {
            Maps$1.forEach(this._maps, cb);
            return this;
        }
        clear() {
            this._maps = {};
        }
        get size() {
            return Maps$1.size(this._maps);
        }
        keys() {
            let keys = new Array();
            for (let k in this._maps) {
                keys.push(this.conver_key(k));
            }
            return keys;
        }
        values() {
            let values = [];
            for (let k in this._maps) {
                values.push(this._maps[k]);
            }
            return values;
        }
        valuesMap(cb) {
            let values = [];
            for (let k in this._maps) {
                values.push(cb(this.conver_key(k), this._maps[k]));
            }
            return values;
        }
        get valusSize() {
            let count = 0;
            let values = this.values;
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (value instanceof Sets$1) {
                    count += value.size;
                }
                else {
                    if (!Array.isArray(value))
                        return 0;
                    count += value.length;
                }
            }
            return count;
        }
        shiftValue() {
            return Maps$1.shiftValue(this._maps);
        }
        map_values(cb) {
            for (let key in this._maps) {
                if (!cb(this.conver_key(key), this._maps[key])) {
                    return false;
                }
            }
            return true;
        }
        map() {
        }
        indexOf() {
        }
        keyOf() {
            return;
        }
        conver_key(key) {
            return this.isKeyNumber ? Number(key) : key;
        }
        filterValue(cb, test) {
            for (let key in this._maps) {
                if (cb(this._maps[key])) {
                    return { "key": this.converKey(key), "value": this._maps[key] };
                }
            }
            return null;
        }
        filter_key(cb, out = []) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    out.push(this.conver_key(key));
            }
            return out;
        }
        filter_value(cb, out = []) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    out.push(this._maps[key]);
            }
            return out;
        }
        hasValue(cb) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    return this.conver_key(key);
            }
            return null;
        }
        randomValueOf() {
            if (this.size == 0)
                return null;
            let values = this.values();
            return values[Maths$1.zeroToMax(values.length)];
        }
        toString() {
        }
        converValueArr() {
            return Maps$1.converValueArray(this._maps);
        }
    }

    let value$1 = null;
    let valueType$1 = null;
    let index$1 = 0;
    class LocalCache$1 {
        static get setCatchKeyPrefix() {
            return this._setCatchKeyPrefix;
        }
        static converKey(key) {
            if (key.indexOf(this.setCatchKeyPrefix) == -1)
                return this.setCatchKeyPrefix + key;
            return key;
        }
        static set(key, value, isDelay = true) {
            key = this.converKey(key);
            if (!this.checkCacheValue(value))
                return;
            this.cache[key] = value;
            Sets$1.add(this.updateCache, key);
            if (isDelay)
                Laya.timer.once(this.delayCache, this, this.onSet, null, true);
            else
                this.onSet();
        }
        static get(key, defaultValue = null) {
            key = this.converKey(key);
            value$1 = this.cache[key];
            if (!this.checkCacheValue(value$1)) {
                value$1 = Laya.LocalStorage.getItem(key);
                if (!this.checkCacheValue(value$1)) {
                    value$1 = minxi$1(defaultValue);
                    this.cache[key] = value$1;
                    this.set(key, this.cache[key], false);
                }
                else {
                    index$1 = value$1.indexOf("-");
                    valueType$1 = value$1.substring(0, index$1);
                    value$1 = value$1.substring(index$1 + 1);
                    switch (valueType$1) {
                        case "boolean":
                            this.cache[key] = value$1 == "true";
                            break;
                        case "number":
                            this.cache[key] = Number(value$1);
                            break;
                        case "object":
                            this.cache[key] = JSON.parse(value$1);
                            break;
                        case "string":
                            this.cache[key] = value$1;
                            break;
                        default:
                            value$1 = minxi$1(defaultValue);
                            this.cache[key] = value$1;
                            break;
                    }
                }
            }
            return this.cache[key];
        }
        static checkCacheValue(value) {
            if (value == null || value == "null" || value == undefined)
                return false;
            return true;
        }
        static onSet() {
            for (let key of this.updateCache) {
                value$1 = this.cache[key];
                valueType$1 = typeof value$1;
                switch (valueType$1) {
                    case "boolean":
                        value$1 = value$1 + "";
                        break;
                    case "number":
                        value$1 = value$1 + "";
                        break;
                    case "object":
                        value$1 = JSON.stringify(value$1);
                        break;
                    case "string":
                        break;
                    default:
                        value$1 = null;
                        break;
                }
                if (value$1 != null)
                    Laya.LocalStorage.setItem(key, valueType$1 + "-" + value$1);
            }
            this.updateCache.length = 0;
            this.isNewData = true;
        }
        static has(key) {
            key = this.converKey(key);
            return !!this.get(key);
        }
        static delete(key) {
            key = this.converKey(key);
            delete this.cache[key];
            Laya.LocalStorage.removeItem(key);
        }
        ;
        static clear() {
            this.cache = {};
            Laya.LocalStorage.clear();
        }
    }
    LocalCache$1.cache = {};
    LocalCache$1.updateCache = [];
    LocalCache$1._setCatchKeyPrefix = "20323_";
    LocalCache$1.delayCache = 1000;
    LocalCache$1.isNewData = false;

    class QueueCount$1 {
        constructor(count, cb) {
            this.count = 0;
            this.cb = null;
            this.ctor(count, cb);
        }
        set_count(value) {
            this.count = value;
        }
        ctor(count, cb) {
            this.count = count;
            this.cb = cb;
        }
        use() {
            this.count--;
            if (this.count == 0) {
                if (this.cb) {
                    this.cb();
                }
                this.reset();
            }
        }
        reset() {
            this.count = 0;
            this.cb = null;
        }
    }

    class ResourcesMgr$1 {
        constructor() {
            this.is_log = true;
            this.load_cache = new Maps$1();
            this.load_cb = new Maps$1();
            this.load_current = new Sets$1();
            this.fguiUrls = [];
        }
        load(url, cb, onProgress, isCache = true) {
            if (!url) {
                cb && cb(null);
                return;
            }
            let loader_res = Laya.Loader.getRes(url);
            let type = this.getUrlType(url);
            if (type == "UIPackage")
                loader_res = Laya.Loader.getRes(url + "." + fgui.UIConfig.packageFileExtension);
            if (!loader_res) {
                this.load_cache.delete(url);
            }
            let cacheRes = this.load_cache.get(url);
            if (cacheRes && loader_res) {
                cb && cb(cacheRes);
                return;
            }
            let cbs = this.load_cb.get(url);
            if (!cbs) {
                cbs = new Sets$1(false);
                this.load_cb.set(url, cbs);
            }
            cb && cbs.add(cb);
            if (this.load_current.has(url))
                return;
            this.load_current.add(url);
            if (this.is_log)
                console.log("进入加载 url:", url);
            switch (type) {
                case "scene3D":
                    Laya.loader.create(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache]), Laya.Handler.create(this, onProgress), Laya.Scene3D.HIERARCHY);
                    break;
                case "bin":
                    Laya.loader.load(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache]), Laya.Handler.create(this, onProgress));
                    break;
                case "UIPackage":
                    fgui.UIPackage.loadPackage(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache, { UIPackage: url }]));
                    break;
            }
        }
        getUrlType(url) {
            let scene_ls = str_lastIndexOf$1(url, ".ls");
            let scene_lh = str_lastIndexOf$1(url, ".lh");
            if (scene_ls != -1 || scene_lh != -1)
                return "scene3D";
            let fgui = Sets$1.filterValue(this.fguiUrls, v => str_indexOf$1(url, v) != -1);
            if (fgui)
                return "UIPackage";
            return "bin";
        }
        _loaded_finish(url, isCache, res) {
            if (this.is_log)
                console.log("加载资源完成 url:", url);
            let allCbs = this.load_cb.get(url);
            if (!res) {
                console.log("加载资源失败 loadRes resources:", url, "err:", res);
                if (allCbs)
                    allCbs.forEach((v) => v && v(null));
                return;
            }
            if (isCache) {
                this.load_cache.set(url, res);
            }
            if (allCbs)
                allCbs.forEach((v) => v && v(res));
            this.load_current.delete(url);
            this.load_cb.delete(url);
        }
        get(url) {
            return this.load_cache.get(url) || null;
        }
        loadDir(urls, cb, onProgress, isCache = true) {
            let l = urls.length;
            if (l == 0) {
                if (cb)
                    cb();
                return;
            }
            let count = new QueueCount$1(l, cb);
            if (onProgress) {
                let ratio_all = {};
                let _ratio = 0;
                let progressLength = 0;
                for (let url of urls) {
                    if (this.getUrlType(url) != "UIPackage")
                        progressLength++;
                    this.load(url, count.use.bind(count), (ratio) => {
                        ratio_all[url] = ratio;
                        _ratio = 0;
                        for (let key in ratio_all)
                            _ratio += ratio_all[key];
                        onProgress(_ratio / progressLength);
                    }, isCache);
                }
            }
            else {
                for (let url of urls) {
                    this.load(url, count.use.bind(count), null, isCache);
                }
            }
        }
        release(url) {
            this.load_cache.delete(url);
            let res = Laya.Loader.getRes(url);
            if (res) {
                if (res["destroy"])
                    res["destroy"]();
                Laya.Loader.clearRes(url);
            }
        }
    }
    ResourcesMgr$1.instance = new ResourcesMgr$1();

    class CfgParser {
        static loadJson4Laya(path, func) {
            Laya.loader.load(path, Laya.Handler.create(this, this.onCfgJson4Laya, [path, func]), null, Laya.Loader.JSON);
        }
        static onCfgJson4Laya(path, func) {
            if (func) {
                func(Laya.loader.getRes(path));
            }
        }
        static parseTypeValue(typeOrigin, data, itemData, field) {
            let typeOriginSplit = typeOrigin.split(":");
            let type = typeOriginSplit[0];
            let typeSub = "";
            if (typeOriginSplit.length > 1) {
                typeSub = typeOriginSplit[1];
            }
            let value = null;
            if (typeSub == "A") {
                value = [];
                let dataArr = data.toString().split(";");
                switch (type) {
                    case 'B':
                        for (let subData of dataArr) {
                            if (typeof (subData) == "number") {
                                value = subData == 1;
                            }
                            else {
                                value = (subData.toLowerCase() == "true");
                            }
                        }
                        break;
                    case 'I':
                        for (let subData of dataArr) {
                            value.push(Number(subData));
                        }
                        break;
                    case 'S':
                        for (let subData of dataArr) {
                            value.push(subData);
                        }
                        break;
                    case 'J':
                        for (let subData of dataArr) {
                            value.push(JSON.parse(subData));
                        }
                        break;
                    default:
                        if (data === "")
                            return null;
                        for (let subData of dataArr) {
                            let queueItem = {
                                __item__: value,
                                __field__: field,
                                __type__: type,
                                __data__: subData,
                                __type_sub__: typeSub,
                            };
                            this.relationQueue.push(queueItem);
                        }
                        break;
                }
            }
            else {
                switch (type) {
                    case 'B':
                        if (typeof (data) == "number") {
                            value = data == 1;
                        }
                        else {
                            value = (data.toLowerCase() == "true");
                        }
                        break;
                    case 'I':
                        value = Number(data);
                        break;
                    case 'S':
                        value = data;
                        break;
                    case 'T':
                        value = JSON.parse(data);
                        break;
                    default:
                        if (data === "")
                            return null;
                        value = {
                            __item__: itemData,
                            __field__: field,
                            __type__: type,
                            __data__: data,
                        };
                        this.relationQueue.push(value);
                        break;
                }
            }
            if (itemData && field)
                itemData[field] = value;
            return value;
        }
        static parseRelation(dataMap) {
            for (let item of this.relationQueue) {
                if (item.__item__ && item.__data__ != "") {
                    if (item.__type_sub__ == "A") {
                        item.__item__.push(dataMap[item.__type__][item.__data__]);
                    }
                    else {
                        item.__item__[item.__field__] = dataMap[item.__type__][item.__data__];
                    }
                }
            }
            this.relationQueue.length = 0;
        }
        static putItemInData(item, data, rules, fields) {
            switch (rules) {
                case 'm':
                    var key = item[fields[0]];
                    if (data[key]) {
                        console.log("putItemInData[m] Error: duplicate key", key);
                    }
                    data[key] = item;
                    return;
                case 'mm':
                    var key1 = item[fields[0]];
                    var key2 = item[fields[1]];
                    var data1 = data[key1];
                    if (data1 == null) {
                        data1 = {};
                        data[key1] = data1;
                    }
                    if (data1[key2]) {
                        console.log("putItemInData[mm] Error: duplicate key", key1, key2);
                    }
                    data1[key2] = item;
                    return;
                case 'kv':
                    var key = item[fields[0]];
                    var type = item[fields[1]];
                    var value = item[fields[2]];
                    data[key] = this.parseTypeValue(type, value);
                    return;
                default:
                    console.error("putItemInData: not found rule", rules);
                    return;
            }
        }
        static parseJsonData(jsonData, rules) {
            var types = jsonData.types;
            var fields = jsonData.fields;
            var values = jsonData.values;
            var data = {};
            for (var j = 0; j < values.length; j++) {
                var value = values[j];
                var itemData = {};
                for (var i = 0; i < types.length; i++) {
                    var type = types[i];
                    var field = fields[i];
                    var item = value[i];
                    this.parseTypeValue(type, item, itemData, field);
                }
                this.putItemInData(itemData, data, rules, fields);
            }
            return data;
        }
        static parseJsonString(jsonStr, rules) {
            return this.parseJsonData(JSON.parse(jsonStr), rules);
        }
    }
    CfgParser.relationQueue = [];

    class GameData {
        static init(onComplete, pathPre) {
            this.onComplete = onComplete;
            if (!pathPre)
                pathPre = "";
            CfgParser.loadJson4Laya(pathPre + "unity/game_data.json", this.onJsonLoad.bind(this));
        }
        static onJsonLoad(json) {
            this.dataRaw = json;
            for (let dbName in this.dataRaw) {
                let jsonData = this.dataRaw[dbName];
                this.dataMap[dbName] = CfgParser.parseJsonData(jsonData, jsonData.rule);
            }
            CfgParser.parseRelation(this.dataMap);
            if (this.onComplete)
                this.onComplete();
        }
        static getSpecialcodeItem(key1) { return this.dataMap['Specialcode'][key1]; }
        static getSpecialcode() { return this.dataMap['Specialcode']; }
        static getLevelItem(key1) { return this.dataMap['Level'][key1]; }
        static getLevel() { return this.dataMap['Level']; }
        static getUpgradeItem(key1) { return this.dataMap['Upgrade'][key1]; }
        static getUpgrade() { return this.dataMap['Upgrade']; }
        static getConfigDataItem(key1) { return this.dataMap['ConfigData'][key1]; }
        static getConfigData() { return this.dataMap['ConfigData']; }
        static getDollMachineItem(key1) { return this.dataMap['DollMachine'][key1]; }
        static getDollMachine() { return this.dataMap['DollMachine']; }
        static getBaoXiangItem(key1) { return this.dataMap['BaoXiang'][key1]; }
        static getBaoXiang() { return this.dataMap['BaoXiang']; }
        static getEggsItem(key1) { return this.dataMap['Eggs'][key1]; }
        static getEggs() { return this.dataMap['Eggs']; }
        static getRandCardItem(key1) { return this.dataMap['RandCard'][key1]; }
        static getRandCard() { return this.dataMap['RandCard']; }
        static getEffectItem(key1) { return this.dataMap['Effect'][key1]; }
        static getEffect() { return this.dataMap['Effect']; }
        static getSkinItem(key1) { return this.dataMap['Skin'][key1]; }
        static getSkin() { return this.dataMap['Skin']; }
        static getSignItem(key1) { return this.dataMap['Sign'][key1]; }
        static getSign() { return this.dataMap['Sign']; }
        static getEndRewardBoxItem(key1) { return this.dataMap['EndRewardBox'][key1]; }
        static getEndRewardBox() { return this.dataMap['EndRewardBox']; }
        static getFreeMapItem(key1) { return this.dataMap['FreeMap'][key1]; }
        static getFreeMap() { return this.dataMap['FreeMap']; }
        static getTurntableConfigItem(key1) { return this.dataMap['TurntableConfig'][key1]; }
        static getTurntableConfig() { return this.dataMap['TurntableConfig']; }
        static getPropItem(key1) { return this.dataMap['Prop'][key1]; }
        static getProp() { return this.dataMap['Prop']; }
        static getSoundItem(key1) { return this.dataMap['Sound'][key1]; }
        static getSound() { return this.dataMap['Sound']; }
    }
    GameData.dataRaw = {};
    GameData.dataMap = {};
    GameData.onComplete = null;

    var E_AudioState$1;
    (function (E_AudioState) {
        E_AudioState[E_AudioState["none"] = 0] = "none";
        E_AudioState[E_AudioState["pause"] = 1] = "pause";
        E_AudioState[E_AudioState["pauseLoop"] = 2] = "pauseLoop";
        E_AudioState[E_AudioState["play"] = 3] = "play";
        E_AudioState[E_AudioState["playLoop"] = 4] = "playLoop";
        E_AudioState[E_AudioState["load"] = 5] = "load";
        E_AudioState[E_AudioState["hide"] = 6] = "hide";
    })(E_AudioState$1 || (E_AudioState$1 = {}));
    class AudioMgr$1 {
        constructor() {
            this.isLoading = false;
            this.loadUrl = "sound/";
            this.m_map_cache = new Maps$1();
            this.m_map_is_load = new Maps$1();
            this.music = null;
            this.last_music_name = null;
            this._getNameByConfig = {};
        }
        set is_music(value) {
            LocalCache$1.set("AudioMgr.is_music", value + "");
        }
        get is_music() {
            return LocalCache$1.get("AudioMgr.is_music", "true") === "true";
        }
        set is_sound(value) {
            LocalCache$1.set("AudioMgr.is_sound", value + "");
        }
        get is_sound() {
            return LocalCache$1.get("AudioMgr.is_sound", "true") === "true";
        }
        get_path(audio_name, isbag = false) {
            let url;
            if (window['conch']) {
                url = audio_name + ".wav";
            }
            else {
                url = audio_name + ".mp3";
            }
            if (this.loadUrl)
                return this.loadUrl + url;
            return url;
        }
        play_sound(audio_name, loop = false) {
            if (!this.isLoading)
                return;
            audio_name = this.converAudioName(audio_name);
            if (!this.is_sound)
                return;
            let path = this.get_path(audio_name);
            if (this.m_map_is_load.has(audio_name)) {
                let config = this.getNameByConfig(audio_name);
                if (config) {
                    if (config.LoopInterval != 0) {
                        let sound = Laya.SoundManager.playSound(path, 1);
                        sound["timerCallBack"] = function () {
                            if (sound && config.Volume)
                                sound.volume = config.Volume;
                        };
                        Laya.timer.clear(sound, sound["timerCallBack"]);
                        Laya.timer.loop(config.LoopInterval * 1000, sound, sound["timerCallBack"]);
                    }
                    else {
                        let sound = Laya.SoundManager.playSound(path, config.Count);
                        if (sound && config.Volume)
                            sound.volume = config.Volume;
                    }
                }
                else
                    Laya.SoundManager.playSound(path, loop ? 0 : 1);
            }
            else
                this.load(audio_name, () => {
                    this.play_sound(audio_name, loop);
                });
        }
        getNameByConfig(audio_name) {
            if (!this._getNameByConfig[audio_name])
                this._getNameByConfig[audio_name] = Maps$1.filterValue(GameData.getSound(), v => v && v.AudioName == audio_name);
            return this._getNameByConfig[audio_name];
        }
        converAudioName(audio_name) {
            if (typeof audio_name == "number") {
                let config = GameData.getSoundItem(audio_name);
                if (config)
                    audio_name = config.AudioName;
                else
                    audio_name = "";
            }
            return audio_name;
        }
        play_music(audio_name, loop = true) {
            if (!this.isLoading)
                return;
            audio_name = this.converAudioName(audio_name);
            this.last_music_name = audio_name;
            if (!this.is_music)
                return;
            let path = this.get_path(audio_name);
            if (this.m_map_is_load.has(audio_name)) {
                Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
            }
            else
                this.load(audio_name, () => {
                    this.music = Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
                });
        }
        play_musicURL(audio_path, loop = true) {
            console.log("play_musicURL: " + audio_path);
            if (!this.is_music)
                return;
            if (this.m_map_is_load.has(audio_path)) {
                console.log("-----play_musicURL-----11111");
                Laya.SoundManager.playMusic(audio_path, loop ? 0 : 1, null);
            }
            else {
                var path = audio_path;
                this.loadURL(audio_path, () => {
                    console.log("-----play_musicURL-----33333");
                    this.music = Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
                });
            }
        }
        loadURL(audio_path, cb) {
            if (!audio_path)
                return;
            ResourcesMgr$1.instance.load(audio_path, (res) => {
                console.log("-----play_musicURL-----22222");
                this.m_map_is_load.set(audio_path, true);
                if (cb)
                    cb(res);
            });
        }
        stop_music() {
            if (this.music)
                this.music.stop();
            Laya.SoundManager.stopMusic();
        }
        pause_music() {
            if (this.music)
                this.music.pause();
        }
        resume_music() {
            if (this.music)
                this.music.resume();
        }
        stop_sound() {
            Laya.SoundManager.stopAllSound();
        }
        stopAll() {
            Laya.SoundManager.stopAll();
        }
        open_sound() {
            this.is_sound = true;
        }
        close_sound() {
            this.is_sound = false;
            this.stop_sound();
        }
        open_music() {
            this.is_music = true;
            this.play_music(this.last_music_name);
        }
        close_music() {
            this.is_music = false;
            this.stop_music();
        }
        load(audio_name, cb) {
            if (!audio_name)
                return;
            let path = this.get_path(audio_name);
            ResourcesMgr$1.instance.load(path, (res) => {
                this.m_map_is_load.set(audio_name, true);
                if (cb)
                    cb(res);
            });
        }
    }
    AudioMgr$1.instance = new AudioMgr$1();

    const auto_btn_click_prefix$3 = "click_";
    const auto_btn_click_node_prefix$3 = "btn_";
    const auto_transition_prefix$3 = "trans_";
    const auto_add_member_node_prefix$3 = "c_";
    const auto_add_member_ok_node_prefix$3 = [
        "text_",
        "btn_",
        "progress_",
        "comp_",
        "list_",
        "loader_",
        "img_",
        "graph_",
        "input_",
        "group_",
    ];
    class FguiBase$3 extends fairygui.GComponent {
        constructor() {
            super(...arguments);
            this._controllerOnce = null;
        }
        static setExtension(packageName, compName, userClass) {
            fgui.UIObjectFactory.setExtension("ui://" + packageName + "/" + compName, userClass);
        }
        static button_disable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.gray();
            }
            button.enabled = false;
        }
        static button_enable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.reset();
            }
            button.enabled = true;
        }
        static get_transition(node, transName) {
            if (transName)
                return node.getTransition(transName);
            else
                return node.getTransitionAt(0);
        }
        static get_transition_all(node, transName) {
            let values = [];
            for (let value of node._transitions)
                if (value.name.indexOf(transName) == 0)
                    values.push(value);
            return values;
        }
        static find_children_transition_once(node, transName) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let res = null;
            res = node.getTransition(transName);
            if (res)
                return res;
            let _children = node._children;
            for (let value of _children) {
                if (value instanceof fairygui.GComponent) {
                    res = value.getTransition(transName);
                    if (res)
                        break;
                    res = this.find_children_transition_once(value, transName);
                    if (res)
                        break;
                }
            }
            return res;
        }
        static find_children_transition_names(node, trans_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!trans_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (node instanceof fairygui.GComponent) {
                    let trans = this.get_transition_all(node, trans_name);
                    if (trans.length > 0)
                        values.push(...trans);
                    Sets$1.push(values, this.find_children_transition_names(value, trans_name));
                }
            }
            return values;
        }
        ;
        static find_children_names_once_node(node, name) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let _children = node._children;
            let res = null;
            for (let value of _children) {
                if (value.name == name) {
                    res = value;
                    break;
                }
                if (node instanceof fairygui.GComponent)
                    res = this.find_children_names_once_node(value, name);
                if (res)
                    break;
            }
            return res;
        }
        static find_children_names(node, names, cb) {
            let values = [];
            for (let i = 0, l = names.length; i < l; i++) {
                let value = names[i];
                let data = this.find_children_names_once_node(node, value);
                if (data) {
                    values.push(data);
                    if (cb)
                        cb(data, value, i);
                }
            }
            return values;
        }
        static find_children_names_node(node, node_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!node_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (value.name == node_name) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets$1.push(values, this.find_children_names_node(value, node_name));
            }
            return values;
        }
        ;
        static find_children_names_node_prefix(node, prefix) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (str_indexOf$1(value.name, prefix) == 0) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets$1.push(values, this.find_children_names_node_prefix(value, prefix));
            }
            return values;
        }
        ;
        static match_children_to_member(parent, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf$1(key, auto_add_member_node_prefix$3);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf$1(key, auto_add_member_node_prefix$3);
                    let children_name = key.slice(last_index);
                    for (let value of auto_add_member_ok_node_prefix$3) {
                        let index = str_indexOf$1(children_name, value);
                        if (index != -1) {
                            let node = FguiBase$3.find_children_names_once_node(parent, children_name);
                            if (!node) {
                                console.warn("自动添加节点失败:", key);
                            }
                            else {
                                caller[key] = node;
                                console.log("自动添加成员变量 节点名", node.name, "成员函数名:", key);
                            }
                            break;
                        }
                    }
                }
            }
        }
        ;
        static match_transition_prefix(node, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf$1(key, auto_transition_prefix$3);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf$1(key, auto_transition_prefix$3);
                    let transition_name = key.slice(last_index);
                    let transition = this.find_children_transition_once(node, transition_name);
                    if (transition) {
                        caller[key] = transition;
                        console.log("自动添加成员动画 动画名", transition_name, "成员函数名:", key);
                    }
                }
            }
        }
        static onClick(node, cb, caller) {
            node.onClick(caller, (e) => {
                if (!FguiBase$3.enableClick) {
                    console.log("按钮事件已屏蔽");
                    return;
                }
                e.stopPropagation();
                if (FguiBase$3.clickSoundName)
                    AudioMgr$1.instance.play_sound(FguiBase$3.clickSoundName);
                cb.call(caller, e);
            });
        }
        static match_children_btn_event(parent, caller) {
            let btns = FguiBase$3.find_children_names_node_prefix(parent, auto_btn_click_node_prefix$3);
            for (let node of btns) {
                if (str_indexOf$1(node.name, auto_btn_click_node_prefix$3) == 0) {
                    let node_name = node.name.slice(str_lastIndexOf$1(node.name, auto_btn_click_node_prefix$3));
                    let member_name = auto_btn_click_prefix$3 + node_name;
                    if (caller[member_name] && typeof caller[member_name] == "function") {
                        this.onClick(node, caller[member_name], caller);
                        console.log("自动注册btn事件 节点名", node.name, "成员函数名:", member_name);
                    }
                }
            }
        }
        static get_controller(node, name) {
            if (name)
                return node.getController(name);
            else {
                return node.controllers[0] || null;
            }
        }
        static createPackageItem(packageName, resName, userClass) {
            return fairygui.UIPackage.createObject(packageName, resName, userClass);
        }
        static insert_child(parent, level) {
            let node_name = level.toString();
            for (let i = 0, children = parent._children, length = children.length; i < length; i++) {
                let value = children[i];
                if (value.name == node_name)
                    return value;
                if (Number(value.name) > level) {
                    let childrenParent = new fairygui.GComponent();
                    childrenParent.name = node_name;
                    childrenParent.setPivot(0, 0);
                    parent.addChildAt(childrenParent, i);
                    return childrenParent;
                }
            }
            let childrenParent = new fairygui.GComponent();
            childrenParent.name = node_name;
            childrenParent.setPivot(0, 0);
            parent.addChild(childrenParent);
            return childrenParent;
        }
        ;
        constructFromXML() {
            super.constructFromXML(undefined);
            FguiBase$3.match_children_to_member(this, this);
            FguiBase$3.match_children_btn_event(this, this);
            FguiBase$3.match_transition_prefix(this, this);
            if (this.onConstructFromXML)
                this.onConstructFromXML();
        }
        dispose() {
            Laya.timer.clearAll(this);
            if (this.onDispose)
                this.onDispose();
            this._controllerOnce = null;
            super.dispose();
        }
        get_controller(name) {
            return FguiBase$3.get_controller(this, name);
        }
        get controllerOnce() {
            if (this._controllerOnce == null)
                this._controllerOnce = this.get_controller();
            return this._controllerOnce;
        }
        get_transition(transName) {
            return FguiBase$3.get_transition(this, transName);
        }
        find_children_names_node_prefix(prefix) {
            return FguiBase$3.find_children_names_node_prefix(this, prefix);
        }
        find_children_names_node(node_name) {
            return FguiBase$3.find_children_names_node(this, node_name);
        }
        find_children_names_once_node(node_name) {
            return FguiBase$3.find_children_names_once_node(this, node_name);
        }
        find_children_names(node_names, cb) {
            return FguiBase$3.find_children_names(this, node_names, cb);
        }
    }
    FguiBase$3.enableClick = true;
    FguiBase$3.clickSoundName = "";

    const PI = Math.PI;
    const _d2r = PI / 180.0;
    const _r2d = 180.0 / PI;
    class Maths {
        static formula2(value, start, length) {
            return (value + (start % length)) % length;
        }
        static formula(value, mul) {
            let res = mul * value;
            while (value--)
                res += value;
            return res;
        }
        static isEven(value) {
            return value % 2 == 0;
        }
        static toRadian(a) {
            return a * _d2r;
        }
        static converGold(value) {
            return "";
        }
        static equallyNum(value, count, randMin, randMax, isPositive = false) {
            let equally = Math.floor(value / count);
            if (isPositive)
                randMax = equally - 1;
            let res = [];
            let lastRand = 0;
            let is = true;
            for (let i = 0; i < count; i++) {
                if (is) {
                    is = false;
                    lastRand = this.minToMax(randMin, randMax);
                    res.push(equally + lastRand);
                }
                else {
                    is = true;
                    res.push(equally - lastRand);
                }
            }
            return res;
        }
        static decimal(value) {
            value = value - (Math.floor(value));
            return value;
        }
        static toDegree(a, is_ormalize = true) {
            if (a == undefined)
                return 0;
            if (is_ormalize)
                a = this.normalizeAngle(a);
            return a * _r2d;
        }
        static normalizeAngle(angle) {
            angle = angle % (2 * PI);
            if (angle < 0) {
                angle += (2 * PI);
            }
            return angle;
        }
        static checkRange(value, value2, range) {
            return Math.abs(value - value2) <= range;
        }
        static isTargetRange(value, target, range) {
            if (value >= target - range)
                return true;
            if (value <= target + range)
                return true;
            return false;
        }
        static zeroEqually(space, index, length) {
            return (index - (length - 1) / 2) * space;
        }
        static equally(count = 1, min, max) {
            count++;
            let equally = [];
            let space = ((max - min) / count);
            for (let i = 1; i < count; i++) {
                equally.push(~~(min + space * i));
            }
            return equally;
        }
        static abs_sub_length(value1, value2) {
            return Math.abs(value1 - value2);
        }
        static add_arrs(values) {
            let count = 0;
            for (let value of values)
                count += value;
            return count;
        }
        static lerp(a, b, r) {
            return a + (b - a) * r;
        }
        static clamp01(value) {
            return value < 0 ? 0 : value < 1 ? value : 1;
        }
        static clampf(value, min, max) {
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
            }
            return value < min ? min : value < max ? value : max;
        }
        static isClampf(value, min, max) {
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
            }
            if (value <= max && value >= min)
                return true;
            else
                return false;
        }
        static create_arr_num(max) {
            let values = [];
            for (let i = 0; i < max; i++)
                values.push(i);
            return values;
        }
        static isRandom(value) {
            if (!value)
                return false;
            if (value >= 1)
                return true;
            if (value <= 0)
                return false;
            return value > Math.random();
        }
        static zeroToMax(max) {
            if (max <= 1)
                return 0;
            let random = Math.random();
            return ~~((random == 1 ? 0.5 : random) * max);
        }
        static minToMax(min, max, is_int = true) {
            if (min == max)
                return min;
            if (min < 0) {
                if (is_int)
                    return Math.round(Math.random() * (Math.abs(min) + max)) + min;
                else
                    return Math.random() * (Math.abs(min) + max) + min;
            }
            if (is_int)
                return Math.round(Math.random() * (max - min)) + min;
            else
                return Math.random() * (max - min) + min;
        }
        static converNumber(value) {
            if (typeof value == "string")
                return Number(value);
        }
        static find_num_section(arr, num, out, is_contain_num = false) {
            if (!out)
                out = { i: 0, count: 0 };
            out.i = arr.length;
            out.count = 0;
            for (let i = 0; i < arr.length; i++) {
                out.count += arr[i];
                if (is_contain_num) {
                    if (num <= out.count) {
                        out.i = i;
                        return out;
                    }
                }
                else if (num < out.count) {
                    out.i = i;
                    return out;
                }
            }
            return out;
        }
        static find_num_section_random(arr) {
            let all = this.add_arrs(arr);
            let last = 0;
            let rand = this.zeroToMax(all - 1);
            for (let i = 0; i < arr.length; i++) {
                let value = arr[i];
                if (rand >= last && rand < last + value)
                    return i;
                last += value;
            }
            return arr.length;
        }
    }

    new Laya.Vector3();
    new Laya.Vector3();
    new Laya.Vector3(1, 1, 1);
    new Laya.Vector3(0, 1, 0);
    new Laya.Vector3(0, 180, 0);
    new Laya.Point();
    new Laya.Quaternion();

    const isValid = function (key) {
        if (key == null || key == undefined || key === false)
            return false;
        else
            return true;
    };
    const minxi = function (value) {
        if (value === null || value === undefined || value === 0 || value === "")
            return value;
        let _getPropertyDescriptor = function (obj, name) {
            while (obj) {
                let pd = Object.getOwnPropertyDescriptor(obj, name);
                if (pd) {
                    return pd;
                }
                obj = Object.getPrototypeOf(obj);
            }
            return null;
        };
        let _copyprop = function (name, source, target) {
            let pd = _getPropertyDescriptor(source, name);
            Object.defineProperty(target, name, pd);
        };
        let _mixin = function (obj, ...sourceObj) {
            obj = obj || {};
            for (let i = 1, length = arguments.length; i < length; i++) {
                let source = arguments[i];
                if (source) {
                    if (typeof source !== "object") {
                        continue;
                    }
                    for (let name in source) {
                        _copyprop(name, source, obj);
                    }
                }
            }
            return obj;
        };
        let target = null;
        if (typeof value === "object") {
            target = _mixin(Array.isArray(value) ? [] : {}, value);
        }
        else {
            target = value;
        }
        return target;
    };
    const str_indexOf = function (value, str, start = 0) {
        return value.indexOf(str, start);
    };
    const str_lastIndexOf = function (value, str) {
        let index = str_indexOf(value, str);
        if (index == -1) {
            return -1;
        }
        return index + str.length;
    };

    class Sets {
        constructor(isRepeat = true, ...values) {
            this.sets = [];
            this.isRepeat = true;
            this.isRepeat = isRepeat;
            this.add(...values);
        }
        static delete(arr, value) {
            if (arr.length == 0)
                return false;
            let index = arr.indexOf(value);
            if (index == -1)
                return false;
            arr.splice(index, 1);
            return true;
        }
        static map(arr, cb) {
            let set = [];
            for (let i = 0; i < arr.length; i++) {
                let data = cb(arr[i], i, arr);
                set.push(data);
            }
            return set;
        }
        static has(arr, value, stringCompare = false) {
            if (arr.length == 0)
                return false;
            let index;
            if (stringCompare)
                index = this.map(arr, v => v.toString()).indexOf(value.toString());
            else
                index = arr.indexOf(value);
            return index != -1;
        }
        static add(arr, ...values) {
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (this.has(arr, value))
                    continue;
                arr.push(value);
            }
        }
        static random(value, exclude) {
            if (value.length == 0)
                return null;
            if (exclude) {
                let values = [];
                for (let i = 0, l = value.length; i < l; i++)
                    if (!exclude(value[i], i))
                        values.push(values[i]);
                return this.random(values);
            }
            return value[Maths.zeroToMax(value.length)];
        }
        static getAt(value, index) {
            index = Maths.clampf(index, 0, value.length - 1);
            return value[index];
        }
        static filterValue(values, cb) {
            let idx = this.filterOf(values, cb);
            if (idx == -1) {
                return null;
            }
            return values[idx];
        }
        static filterOf(values, cb) {
            let idx = -1;
            for (let i = 0; i < values.length; i++) {
                if (values[i] && cb(values[i], i)) {
                    return i;
                }
            }
            return idx;
        }
        static filter(values, cb, out) {
            if (!out)
                out = [];
            for (let i = 0; i < values.length; i++) {
                if (values[i] && cb(values[i], i)) {
                    out.push(values[i]);
                }
            }
            return out;
        }
        static push(values, push) {
            for (let value of push)
                values.push(value);
            return values;
        }
        static sort(values, cb) {
            return values.sort(cb);
        }
        static shuffle(arr, isChangeOriginal = true) {
            if (!isChangeOriginal) {
                let tmp = arr.concat();
                tmp.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return tmp;
            }
            else {
                arr.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return arr;
            }
        }
        static random_arr(vlaues, count = 1) {
            let res = this.shuffle(vlaues, false), arr = [];
            for (let i = 0; i < count; i++)
                if (isValid(res[i]))
                    arr.push(res[i]);
            return arr;
        }
        add(...values) {
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (this.has(value) && this.isRepeat)
                    continue;
                this.sets.push(value);
            }
            return this;
        }
        delete(value) {
            return Sets.delete(this.sets, value);
        }
        get size() {
            return this.sets.length;
        }
        indexOf(value) {
            return this.sets.indexOf(value);
        }
        has(value, stringCompare = false) {
            return Sets.has(this.sets, value, stringCompare);
        }
        hasOf(index) {
            return isValid(this.sets[index]);
        }
        clear() {
            this.sets.length = 0;
        }
        shift(isOrign = true) {
            if (isOrign) {
                return this.sets.shift();
            }
            else {
                return this.sets.concat()[0];
            }
        }
        toString() {
            return this.sets.toString();
        }
        forEach(cb) {
            this.sets.forEach(cb);
            return this;
        }
        map(cb) {
            return Sets.map(this.sets, cb);
        }
        findContinueIndexs(cb) {
            let values = this.map(cb);
            let indexs = [];
            for (let i = 0; i < values.length; i++) {
                let continueIndexs = [];
                for (let j = 0; j < values.length - i; j++) {
                    let cur = values[i + j];
                    let last = values[i] + j;
                    if (cur == last)
                        continueIndexs.push(values.indexOf(cur));
                    else
                        break;
                }
                if (continueIndexs.length > 1)
                    indexs.push(continueIndexs);
            }
            let res = [];
            for (let i = 0; i < indexs.length; i++) {
                let self = indexs[i];
                let id = this._findContinueIndexs(res, self);
                if (id == -1)
                    res.push(self);
                else if (res[id].length < self.length)
                    res[id] = self;
            }
            return res;
        }
        _findContinueIndexs(maxs, min) {
            for (let i = 0; i < maxs.length; i++) {
                for (let j = 0; j < maxs[i].length; j++) {
                    if (min.indexOf(maxs[i][j]) != -1) {
                        return i;
                    }
                }
            }
            return -1;
        }
        findEquallyIndexs() {
            let indexs = new Sets();
            for (let i = 0; i < this.sets.length; i++) {
                let self = this.sets[i];
                let equally = [];
                for (let j = 0; j < this.sets.length; j++) {
                    let all = this.sets[j];
                    if (self == all) {
                        equally.push(j);
                    }
                }
                if (equally.length > 1) {
                    if (!indexs.has(equally, true)) {
                        indexs.add(equally);
                    }
                }
            }
            return indexs;
        }
        sort(cb) {
            Sets.sort(this.sets, cb);
            return this;
        }
        deleteFilterOf(cb) {
            let idx = this.filterOf(cb);
            if (idx == -1) {
                return false;
            }
            this.splice(idx);
            return true;
        }
        filterOf(cb) {
            return Sets.filterOf(this.sets, cb);
        }
        filterValue(cb) {
            return Sets.filterValue(this.sets, cb);
        }
        filter(cb) {
            let tmp = new Sets(this.isRepeat);
            for (let i = 0; i < this.sets.length; i++) {
                let data = this.sets[i];
                if (cb(data, i, this.sets)) {
                    tmp.add(data);
                }
            }
            return tmp;
        }
        deletePops(count = 1, cb) {
            for (let i = 0; i < count; i++) {
                let pop = this.pop();
                pop && cb && cb(pop);
            }
        }
        splice(start, deleteCount = 1) {
            return this.sets.splice(start, deleteCount);
        }
        unShift() {
        }
        pop(remove = true) {
            return Sets.pop(this.sets, remove);
        }
        static pop(values, remove = true) {
            if (remove) {
                return values.pop();
            }
            else {
                return values[values.length - 1] || null;
            }
        }
        lastValueOf(index) {
            return this.sets[this.sets.length - index - 1] || null;
        }
        valuesOf(index) {
            return this.sets[index] || null;
        }
        randomOf() {
            if (this.size == 0)
                return null;
            return this.sets[Maths.zeroToMax(this.sets.length)];
        }
        addRandomSelf() {
            if (this.size == 0)
                return false;
            let data = this.sets[Maths.zeroToMax(this.sets.length)];
            this.add(data);
            return true;
        }
        shuffle(isChangeOriginal = true) {
            return Sets.shuffle(this.sets, isChangeOriginal);
        }
        deep() {
            let deep = JSON.parse(JSON.stringify(this.sets));
            return new Sets(this.isRepeat, ...deep);
        }
        concat(...value) {
            return new Sets(this.isRepeat, ...this.sets.concat(value));
        }
    }

    class Maps {
        constructor(obj) {
            this._maps = {};
            this.isKeyNumber = false;
            if (obj)
                this._maps = obj;
        }
        static filterValue(values, cb) {
            let key = this.filterKey(values, cb);
            if (!key) {
                return null;
            }
            return values[key];
        }
        static size(value) {
            let count = 0;
            for (let k in value)
                count++;
            return count;
        }
        static filterKey(values, cb) {
            for (let key in values) {
                if (cb(values[key], key))
                    return key;
            }
            return null;
        }
        static shiftKey(value) {
            for (let k in value)
                return k;
            return "";
        }
        static shiftValue(value) {
            for (let k in value)
                return value[k];
            return null;
        }
        static converValueArray(value) {
            let values = [];
            for (let key in value)
                values.push(value[key]);
            return values;
        }
        static forEach(value, cb) {
            for (let k in value) {
                let v = value[k];
                if (!v)
                    continue;
                cb && cb(v, k);
            }
        }
        get maps() { return this._maps; }
        set maps(value) {
            this._maps = value;
        }
        set(key, value) {
            this.isKeyNumber = (typeof key == "number");
            this._maps[key] = value;
            return this;
        }
        has(key) {
            return isValid(this._maps[key]);
        }
        get(key) {
            if (!this.has(key))
                return null;
            return this._maps[key];
        }
        gets(keys) {
            let values = [];
            for (let i = 0; i < keys.length; i++) {
                let value = this.get(keys[i]);
                if (value)
                    values.push(value);
            }
            return values;
        }
        delete(key) {
            delete this._maps[key];
        }
        forEach(cb) {
            Maps.forEach(this._maps, cb);
            return this;
        }
        clear() {
            this._maps = {};
        }
        get size() {
            return Maps.size(this._maps);
        }
        keys() {
            let keys = new Array();
            for (let k in this._maps) {
                keys.push(this.conver_key(k));
            }
            return keys;
        }
        values() {
            let values = [];
            for (let k in this._maps) {
                values.push(this._maps[k]);
            }
            return values;
        }
        valuesMap(cb) {
            let values = [];
            for (let k in this._maps) {
                values.push(cb(this.conver_key(k), this._maps[k]));
            }
            return values;
        }
        get valusSize() {
            let count = 0;
            let values = this.values;
            for (let i = 0; i < values.length; i++) {
                let value = values[i];
                if (value instanceof Sets) {
                    count += value.size;
                }
                else {
                    if (!Array.isArray(value))
                        return 0;
                    count += value.length;
                }
            }
            return count;
        }
        shiftValue() {
            return Maps.shiftValue(this._maps);
        }
        map_values(cb) {
            for (let key in this._maps) {
                if (!cb(this.conver_key(key), this._maps[key])) {
                    return false;
                }
            }
            return true;
        }
        map() {
        }
        indexOf() {
        }
        keyOf() {
            return;
        }
        conver_key(key) {
            return this.isKeyNumber ? Number(key) : key;
        }
        filterValue(cb, test) {
            for (let key in this._maps) {
                if (cb(this._maps[key])) {
                    return { "key": this.converKey(key), "value": this._maps[key] };
                }
            }
            return null;
        }
        filter_key(cb, out = []) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    out.push(this.conver_key(key));
            }
            return out;
        }
        filter_value(cb, out = []) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    out.push(this._maps[key]);
            }
            return out;
        }
        hasValue(cb) {
            for (let key in this._maps) {
                if (cb(this._maps[key], this.conver_key(key)))
                    return this.conver_key(key);
            }
            return null;
        }
        randomValueOf() {
            if (this.size == 0)
                return null;
            let values = this.values();
            return values[Maths.zeroToMax(values.length)];
        }
        toString() {
        }
        converValueArr() {
            return Maps.converValueArray(this._maps);
        }
    }

    let value = null;
    let valueType = null;
    let index = 0;
    class LocalCache {
        static get setCatchKeyPrefix() {
            return this._setCatchKeyPrefix;
        }
        static converKey(key) {
            if (key.indexOf(this.setCatchKeyPrefix) == -1)
                return this.setCatchKeyPrefix + key;
            return key;
        }
        static set(key, value, isDelay = true) {
            key = this.converKey(key);
            if (!this.checkCacheValue(value))
                return;
            this.cache[key] = value;
            Sets.add(this.updateCache, key);
            if (isDelay)
                Laya.timer.once(this.delayCache, this, this.onSet, null, true);
            else
                this.onSet();
        }
        static get(key, defaultValue = null) {
            key = this.converKey(key);
            value = this.cache[key];
            if (!this.checkCacheValue(value)) {
                value = Laya.LocalStorage.getItem(key);
                if (!this.checkCacheValue(value)) {
                    value = minxi(defaultValue);
                    this.cache[key] = value;
                    this.set(key, this.cache[key], false);
                }
                else {
                    index = value.indexOf("-");
                    valueType = value.substring(0, index);
                    value = value.substring(index + 1);
                    switch (valueType) {
                        case "boolean":
                            this.cache[key] = value == "true";
                            break;
                        case "number":
                            this.cache[key] = Number(value);
                            break;
                        case "object":
                            this.cache[key] = JSON.parse(value);
                            break;
                        case "string":
                            this.cache[key] = value;
                            break;
                        default:
                            value = minxi(defaultValue);
                            this.cache[key] = value;
                            break;
                    }
                }
            }
            return this.cache[key];
        }
        static checkCacheValue(value) {
            if (value == null || value == "null" || value == undefined)
                return false;
            return true;
        }
        static onSet() {
            for (let key of this.updateCache) {
                value = this.cache[key];
                valueType = typeof value;
                switch (valueType) {
                    case "boolean":
                        value = value + "";
                        break;
                    case "number":
                        value = value + "";
                        break;
                    case "object":
                        value = JSON.stringify(value);
                        break;
                    case "string":
                        break;
                    default:
                        value = null;
                        break;
                }
                if (value != null)
                    Laya.LocalStorage.setItem(key, valueType + "-" + value);
            }
            this.updateCache.length = 0;
            this.isNewData = true;
        }
        static has(key) {
            key = this.converKey(key);
            return !!this.get(key);
        }
        static delete(key) {
            key = this.converKey(key);
            delete this.cache[key];
            Laya.LocalStorage.removeItem(key);
        }
        ;
        static clear() {
            this.cache = {};
            Laya.LocalStorage.clear();
        }
    }
    LocalCache.cache = {};
    LocalCache.updateCache = [];
    LocalCache._setCatchKeyPrefix = "20323_";
    LocalCache.delayCache = 1000;
    LocalCache.isNewData = false;

    class QueueCount {
        constructor(count, cb) {
            this.count = 0;
            this.cb = null;
            this.ctor(count, cb);
        }
        set_count(value) {
            this.count = value;
        }
        ctor(count, cb) {
            this.count = count;
            this.cb = cb;
        }
        use() {
            this.count--;
            if (this.count == 0) {
                if (this.cb) {
                    this.cb();
                }
                this.reset();
            }
        }
        reset() {
            this.count = 0;
            this.cb = null;
        }
    }

    class ResourcesMgr {
        constructor() {
            this.is_log = true;
            this.load_cache = new Maps();
            this.load_cb = new Maps();
            this.load_current = new Sets();
            this.fguiUrls = [];
        }
        load(url, cb, onProgress, isCache = true) {
            if (!url) {
                cb && cb(null);
                return;
            }
            let loader_res = Laya.Loader.getRes(url);
            let type = this.getUrlType(url);
            if (type == "UIPackage")
                loader_res = Laya.Loader.getRes(url + "." + fgui.UIConfig.packageFileExtension);
            if (!loader_res) {
                this.load_cache.delete(url);
            }
            let cacheRes = this.load_cache.get(url);
            if (cacheRes && loader_res) {
                cb && cb(cacheRes);
                return;
            }
            let cbs = this.load_cb.get(url);
            if (!cbs) {
                cbs = new Sets(false);
                this.load_cb.set(url, cbs);
            }
            cb && cbs.add(cb);
            if (this.load_current.has(url))
                return;
            this.load_current.add(url);
            if (this.is_log)
                console.log("进入加载 url:", url);
            switch (type) {
                case "scene3D":
                    Laya.loader.create(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache]), Laya.Handler.create(this, onProgress), Laya.Scene3D.HIERARCHY);
                    break;
                case "bin":
                    Laya.loader.load(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache]), Laya.Handler.create(this, onProgress));
                    break;
                case "UIPackage":
                    fgui.UIPackage.loadPackage(url, Laya.Handler.create(this, this._loaded_finish, [url, isCache, { UIPackage: url }]));
                    break;
            }
        }
        getUrlType(url) {
            let scene_ls = str_lastIndexOf(url, ".ls");
            let scene_lh = str_lastIndexOf(url, ".lh");
            if (scene_ls != -1 || scene_lh != -1)
                return "scene3D";
            let fgui = Sets.filterValue(this.fguiUrls, v => str_indexOf(url, v) != -1);
            if (fgui)
                return "UIPackage";
            return "bin";
        }
        _loaded_finish(url, isCache, res) {
            if (this.is_log)
                console.log("加载资源完成 url:", url);
            let allCbs = this.load_cb.get(url);
            if (!res) {
                console.log("加载资源失败 loadRes resources:", url, "err:", res);
                if (allCbs)
                    allCbs.forEach((v) => v && v(null));
                return;
            }
            if (isCache) {
                this.load_cache.set(url, res);
            }
            if (allCbs)
                allCbs.forEach((v) => v && v(res));
            this.load_current.delete(url);
            this.load_cb.delete(url);
        }
        get(url) {
            return this.load_cache.get(url) || null;
        }
        loadDir(urls, cb, onProgress, isCache = true) {
            let l = urls.length;
            if (l == 0) {
                if (cb)
                    cb();
                return;
            }
            let count = new QueueCount(l, cb);
            if (onProgress) {
                let ratio_all = {};
                let _ratio = 0;
                let progressLength = 0;
                for (let url of urls) {
                    if (this.getUrlType(url) != "UIPackage")
                        progressLength++;
                    this.load(url, count.use.bind(count), (ratio) => {
                        ratio_all[url] = ratio;
                        _ratio = 0;
                        for (let key in ratio_all)
                            _ratio += ratio_all[key];
                        onProgress(_ratio / progressLength);
                    }, isCache);
                }
            }
            else {
                for (let url of urls) {
                    this.load(url, count.use.bind(count), null, isCache);
                }
            }
        }
        release(url) {
            this.load_cache.delete(url);
            let res = Laya.Loader.getRes(url);
            if (res) {
                if (res["destroy"])
                    res["destroy"]();
                Laya.Loader.clearRes(url);
            }
        }
    }
    ResourcesMgr.instance = new ResourcesMgr();

    var E_AudioState;
    (function (E_AudioState) {
        E_AudioState[E_AudioState["none"] = 0] = "none";
        E_AudioState[E_AudioState["pause"] = 1] = "pause";
        E_AudioState[E_AudioState["pauseLoop"] = 2] = "pauseLoop";
        E_AudioState[E_AudioState["play"] = 3] = "play";
        E_AudioState[E_AudioState["playLoop"] = 4] = "playLoop";
        E_AudioState[E_AudioState["load"] = 5] = "load";
        E_AudioState[E_AudioState["hide"] = 6] = "hide";
    })(E_AudioState || (E_AudioState = {}));
    class AudioMgr {
        constructor() {
            this.isLoading = false;
            this.loadUrl = "sound/";
            this.m_map_cache = new Maps();
            this.m_map_is_load = new Maps();
            this.music = null;
            this.last_music_name = null;
            this._getNameByConfig = {};
        }
        set is_music(value) {
            LocalCache.set("AudioMgr.is_music", value + "");
        }
        get is_music() {
            return LocalCache.get("AudioMgr.is_music", "true") === "true";
        }
        set is_sound(value) {
            LocalCache.set("AudioMgr.is_sound", value + "");
        }
        get is_sound() {
            return LocalCache.get("AudioMgr.is_sound", "true") === "true";
        }
        get_path(audio_name, isbag = false) {
            let url;
            if (window['conch']) {
                url = audio_name + ".wav";
            }
            else {
                url = audio_name + ".mp3";
            }
            if (this.loadUrl)
                return this.loadUrl + url;
            return url;
        }
        play_sound(audio_name, loop = false) {
            if (!this.isLoading)
                return;
            audio_name = this.converAudioName(audio_name);
            if (!this.is_sound)
                return;
            let path = this.get_path(audio_name);
            if (this.m_map_is_load.has(audio_name)) {
                let config = this.getNameByConfig(audio_name);
                if (config) {
                    if (config.LoopInterval != 0) {
                        let sound = Laya.SoundManager.playSound(path, 1);
                        sound["timerCallBack"] = function () {
                            if (sound && config.Volume)
                                sound.volume = config.Volume;
                        };
                        Laya.timer.clear(sound, sound["timerCallBack"]);
                        Laya.timer.loop(config.LoopInterval * 1000, sound, sound["timerCallBack"]);
                    }
                    else {
                        let sound = Laya.SoundManager.playSound(path, config.Count);
                        if (sound && config.Volume)
                            sound.volume = config.Volume;
                    }
                }
                else
                    Laya.SoundManager.playSound(path, loop ? 0 : 1);
            }
            else
                this.load(audio_name, () => {
                    this.play_sound(audio_name, loop);
                });
        }
        getNameByConfig(audio_name) {
            if (!this._getNameByConfig[audio_name])
                this._getNameByConfig[audio_name] = Maps.filterValue(GameData.getSound(), v => v && v.AudioName == audio_name);
            return this._getNameByConfig[audio_name];
        }
        converAudioName(audio_name) {
            if (typeof audio_name == "number") {
                let config = GameData.getSoundItem(audio_name);
                if (config)
                    audio_name = config.AudioName;
                else
                    audio_name = "";
            }
            return audio_name;
        }
        play_music(audio_name, loop = true) {
            if (!this.isLoading)
                return;
            audio_name = this.converAudioName(audio_name);
            this.last_music_name = audio_name;
            if (!this.is_music)
                return;
            let path = this.get_path(audio_name);
            if (this.m_map_is_load.has(audio_name)) {
                Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
            }
            else
                this.load(audio_name, () => {
                    this.music = Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
                });
        }
        play_musicURL(audio_path, loop = true) {
            console.log("play_musicURL: " + audio_path);
            if (!this.is_music)
                return;
            if (this.m_map_is_load.has(audio_path)) {
                console.log("-----play_musicURL-----11111");
                Laya.SoundManager.playMusic(audio_path, loop ? 0 : 1, null);
            }
            else {
                var path = audio_path;
                this.loadURL(audio_path, () => {
                    console.log("-----play_musicURL-----33333");
                    this.music = Laya.SoundManager.playMusic(path, loop ? 0 : 1, null);
                });
            }
        }
        loadURL(audio_path, cb) {
            if (!audio_path)
                return;
            ResourcesMgr.instance.load(audio_path, (res) => {
                console.log("-----play_musicURL-----22222");
                this.m_map_is_load.set(audio_path, true);
                if (cb)
                    cb(res);
            });
        }
        stop_music() {
            if (this.music)
                this.music.stop();
            Laya.SoundManager.stopMusic();
        }
        pause_music() {
            if (this.music)
                this.music.pause();
        }
        resume_music() {
            if (this.music)
                this.music.resume();
        }
        stop_sound() {
            Laya.SoundManager.stopAllSound();
        }
        stopAll() {
            Laya.SoundManager.stopAll();
        }
        open_sound() {
            this.is_sound = true;
        }
        close_sound() {
            this.is_sound = false;
            this.stop_sound();
        }
        open_music() {
            this.is_music = true;
            this.play_music(this.last_music_name);
        }
        close_music() {
            this.is_music = false;
            this.stop_music();
        }
        load(audio_name, cb) {
            if (!audio_name)
                return;
            let path = this.get_path(audio_name);
            ResourcesMgr.instance.load(path, (res) => {
                this.m_map_is_load.set(audio_name, true);
                if (cb)
                    cb(res);
            });
        }
    }
    AudioMgr.instance = new AudioMgr();

    const auto_btn_click_prefix$2 = "click_";
    const auto_btn_click_node_prefix$2 = "btn_";
    const auto_transition_prefix$2 = "trans_";
    const auto_add_member_node_prefix$2 = "c_";
    const auto_add_member_ok_node_prefix$2 = [
        "text_",
        "btn_",
        "progress_",
        "comp_",
        "list_",
        "loader_",
        "img_",
        "graph_",
        "input_",
        "group_",
    ];
    class FguiBase$2 extends fairygui.GComponent {
        constructor() {
            super(...arguments);
            this._controllerOnce = null;
        }
        static setExtension(packageName, compName, userClass) {
            fgui.UIObjectFactory.setExtension("ui://" + packageName + "/" + compName, userClass);
        }
        static button_disable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.gray();
            }
            button.enabled = false;
        }
        static button_enable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.reset();
            }
            button.enabled = true;
        }
        static get_transition(node, transName) {
            if (transName)
                return node.getTransition(transName);
            else
                return node.getTransitionAt(0);
        }
        static get_transition_all(node, transName) {
            let values = [];
            for (let value of node._transitions)
                if (value.name.indexOf(transName) == 0)
                    values.push(value);
            return values;
        }
        static find_children_transition_once(node, transName) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let res = null;
            res = node.getTransition(transName);
            if (res)
                return res;
            let _children = node._children;
            for (let value of _children) {
                if (value instanceof fairygui.GComponent) {
                    res = value.getTransition(transName);
                    if (res)
                        break;
                    res = this.find_children_transition_once(value, transName);
                    if (res)
                        break;
                }
            }
            return res;
        }
        static find_children_transition_names(node, trans_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!trans_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (node instanceof fairygui.GComponent) {
                    let trans = this.get_transition_all(node, trans_name);
                    if (trans.length > 0)
                        values.push(...trans);
                    Sets.push(values, this.find_children_transition_names(value, trans_name));
                }
            }
            return values;
        }
        ;
        static find_children_names_once_node(node, name) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let _children = node._children;
            let res = null;
            for (let value of _children) {
                if (value.name == name) {
                    res = value;
                    break;
                }
                if (node instanceof fairygui.GComponent)
                    res = this.find_children_names_once_node(value, name);
                if (res)
                    break;
            }
            return res;
        }
        static find_children_names(node, names, cb) {
            let values = [];
            for (let i = 0, l = names.length; i < l; i++) {
                let value = names[i];
                let data = this.find_children_names_once_node(node, value);
                if (data) {
                    values.push(data);
                    if (cb)
                        cb(data, value, i);
                }
            }
            return values;
        }
        static find_children_names_node(node, node_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!node_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (value.name == node_name) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets.push(values, this.find_children_names_node(value, node_name));
            }
            return values;
        }
        ;
        static find_children_names_node_prefix(node, prefix) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (str_indexOf(value.name, prefix) == 0) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets.push(values, this.find_children_names_node_prefix(value, prefix));
            }
            return values;
        }
        ;
        static match_children_to_member(parent, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf(key, auto_add_member_node_prefix$2);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf(key, auto_add_member_node_prefix$2);
                    let children_name = key.slice(last_index);
                    for (let value of auto_add_member_ok_node_prefix$2) {
                        let index = str_indexOf(children_name, value);
                        if (index != -1) {
                            let node = FguiBase$2.find_children_names_once_node(parent, children_name);
                            if (!node) {
                                console.warn("自动添加节点失败:", key);
                            }
                            else {
                                caller[key] = node;
                                console.log("自动添加成员变量 节点名", node.name, "成员函数名:", key);
                            }
                            break;
                        }
                    }
                }
            }
        }
        ;
        static match_transition_prefix(node, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf(key, auto_transition_prefix$2);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf(key, auto_transition_prefix$2);
                    let transition_name = key.slice(last_index);
                    let transition = this.find_children_transition_once(node, transition_name);
                    if (transition) {
                        caller[key] = transition;
                        console.log("自动添加成员动画 动画名", transition_name, "成员函数名:", key);
                    }
                }
            }
        }
        static onClick(node, cb, caller) {
            node.onClick(caller, (e) => {
                if (!FguiBase$2.enableClick) {
                    console.log("按钮事件已屏蔽");
                    return;
                }
                e.stopPropagation();
                if (FguiBase$2.clickSoundName)
                    AudioMgr.instance.play_sound(FguiBase$2.clickSoundName);
                cb.call(caller, e);
            });
        }
        static match_children_btn_event(parent, caller) {
            let btns = FguiBase$2.find_children_names_node_prefix(parent, auto_btn_click_node_prefix$2);
            for (let node of btns) {
                if (str_indexOf(node.name, auto_btn_click_node_prefix$2) == 0) {
                    let node_name = node.name.slice(str_lastIndexOf(node.name, auto_btn_click_node_prefix$2));
                    let member_name = auto_btn_click_prefix$2 + node_name;
                    if (caller[member_name] && typeof caller[member_name] == "function") {
                        this.onClick(node, caller[member_name], caller);
                        console.log("自动注册btn事件 节点名", node.name, "成员函数名:", member_name);
                    }
                }
            }
        }
        static get_controller(node, name) {
            if (name)
                return node.getController(name);
            else {
                return node.controllers[0] || null;
            }
        }
        static createPackageItem(packageName, resName, userClass) {
            return fairygui.UIPackage.createObject(packageName, resName, userClass);
        }
        static insert_child(parent, level) {
            let node_name = level.toString();
            for (let i = 0, children = parent._children, length = children.length; i < length; i++) {
                let value = children[i];
                if (value.name == node_name)
                    return value;
                if (Number(value.name) > level) {
                    let childrenParent = new fairygui.GComponent();
                    childrenParent.name = node_name;
                    childrenParent.setPivot(0, 0);
                    parent.addChildAt(childrenParent, i);
                    return childrenParent;
                }
            }
            let childrenParent = new fairygui.GComponent();
            childrenParent.name = node_name;
            childrenParent.setPivot(0, 0);
            parent.addChild(childrenParent);
            return childrenParent;
        }
        ;
        constructFromXML() {
            super.constructFromXML(undefined);
            FguiBase$2.match_children_to_member(this, this);
            FguiBase$2.match_children_btn_event(this, this);
            FguiBase$2.match_transition_prefix(this, this);
            if (this.onConstructFromXML)
                this.onConstructFromXML();
        }
        dispose() {
            Laya.timer.clearAll(this);
            if (this.onDispose)
                this.onDispose();
            this._controllerOnce = null;
            super.dispose();
        }
        get_controller(name) {
            return FguiBase$2.get_controller(this, name);
        }
        get controllerOnce() {
            if (this._controllerOnce == null)
                this._controllerOnce = this.get_controller();
            return this._controllerOnce;
        }
        get_transition(transName) {
            return FguiBase$2.get_transition(this, transName);
        }
        find_children_names_node_prefix(prefix) {
            return FguiBase$2.find_children_names_node_prefix(this, prefix);
        }
        find_children_names_node(node_name) {
            return FguiBase$2.find_children_names_node(this, node_name);
        }
        find_children_names_once_node(node_name) {
            return FguiBase$2.find_children_names_once_node(this, node_name);
        }
        find_children_names(node_names, cb) {
            return FguiBase$2.find_children_names(this, node_names, cb);
        }
    }
    FguiBase$2.enableClick = true;
    FguiBase$2.clickSoundName = "";

    const auto_btn_click_prefix$1 = "click_";
    const auto_btn_click_node_prefix$1 = "btn_";
    const auto_transition_prefix$1 = "trans_";
    const auto_add_member_node_prefix$1 = "c_";
    const auto_add_member_ok_node_prefix$1 = [
        "text_",
        "btn_",
        "progress_",
        "comp_",
        "list_",
        "loader_",
        "img_",
        "graph_",
        "input_",
        "group_",
    ];
    class FguiBase$1 extends fairygui.GComponent {
        constructor() {
            super(...arguments);
            this._controllerOnce = null;
        }
        static setExtension(packageName, compName, userClass) {
            fgui.UIObjectFactory.setExtension("ui://" + packageName + "/" + compName, userClass);
        }
        static button_disable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.gray();
            }
            button.enabled = false;
        }
        static button_enable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.reset();
            }
            button.enabled = true;
        }
        static get_transition(node, transName) {
            if (transName)
                return node.getTransition(transName);
            else
                return node.getTransitionAt(0);
        }
        static get_transition_all(node, transName) {
            let values = [];
            for (let value of node._transitions)
                if (value.name.indexOf(transName) == 0)
                    values.push(value);
            return values;
        }
        static find_children_transition_once(node, transName) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let res = null;
            res = node.getTransition(transName);
            if (res)
                return res;
            let _children = node._children;
            for (let value of _children) {
                if (value instanceof fairygui.GComponent) {
                    res = value.getTransition(transName);
                    if (res)
                        break;
                    res = this.find_children_transition_once(value, transName);
                    if (res)
                        break;
                }
            }
            return res;
        }
        static find_children_transition_names(node, trans_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!trans_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (node instanceof fairygui.GComponent) {
                    let trans = this.get_transition_all(node, trans_name);
                    if (trans.length > 0)
                        values.push(...trans);
                    Sets.push(values, this.find_children_transition_names(value, trans_name));
                }
            }
            return values;
        }
        ;
        static find_children_names_once_node(node, name) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let _children = node._children;
            let res = null;
            for (let value of _children) {
                if (value.name == name) {
                    res = value;
                    break;
                }
                if (node instanceof fairygui.GComponent)
                    res = this.find_children_names_once_node(value, name);
                if (res)
                    break;
            }
            return res;
        }
        static find_children_names(node, names, cb) {
            let values = [];
            for (let i = 0, l = names.length; i < l; i++) {
                let value = names[i];
                let data = this.find_children_names_once_node(node, value);
                if (data) {
                    values.push(data);
                    if (cb)
                        cb(data, value, i);
                }
            }
            return values;
        }
        static find_children_names_node(node, node_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!node_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (value.name == node_name) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets.push(values, this.find_children_names_node(value, node_name));
            }
            return values;
        }
        ;
        static find_children_names_node_prefix(node, prefix) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (str_indexOf(value.name, prefix) == 0) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets.push(values, this.find_children_names_node_prefix(value, prefix));
            }
            return values;
        }
        ;
        static match_children_to_member(parent, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf(key, auto_add_member_node_prefix$1);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf(key, auto_add_member_node_prefix$1);
                    let children_name = key.slice(last_index);
                    for (let value of auto_add_member_ok_node_prefix$1) {
                        let index = str_indexOf(children_name, value);
                        if (index != -1) {
                            let node = FguiBase$1.find_children_names_once_node(parent, children_name);
                            if (!node) {
                                console.warn("自动添加节点失败:", key);
                            }
                            else {
                                caller[key] = node;
                                console.log("自动添加成员变量 节点名", node.name, "成员函数名:", key);
                            }
                            break;
                        }
                    }
                }
            }
        }
        ;
        static match_transition_prefix(node, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf(key, auto_transition_prefix$1);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf(key, auto_transition_prefix$1);
                    let transition_name = key.slice(last_index);
                    let transition = this.find_children_transition_once(node, transition_name);
                    if (transition) {
                        caller[key] = transition;
                        console.log("自动添加成员动画 动画名", transition_name, "成员函数名:", key);
                    }
                }
            }
        }
        static onClick(node, cb, caller) {
            node.onClick(caller, (e) => {
                if (!FguiBase$1.enableClick) {
                    console.log("按钮事件已屏蔽");
                    return;
                }
                e.stopPropagation();
                if (FguiBase$1.clickSoundName)
                    AudioMgr.instance.play_sound(FguiBase$1.clickSoundName);
                cb.call(caller, e);
            });
        }
        static match_children_btn_event(parent, caller) {
            let btns = FguiBase$1.find_children_names_node_prefix(parent, auto_btn_click_node_prefix$1);
            for (let node of btns) {
                if (str_indexOf(node.name, auto_btn_click_node_prefix$1) == 0) {
                    let node_name = node.name.slice(str_lastIndexOf(node.name, auto_btn_click_node_prefix$1));
                    let member_name = auto_btn_click_prefix$1 + node_name;
                    if (caller[member_name] && typeof caller[member_name] == "function") {
                        this.onClick(node, caller[member_name], caller);
                        console.log("自动注册btn事件 节点名", node.name, "成员函数名:", member_name);
                    }
                }
            }
        }
        static get_controller(node, name) {
            if (name)
                return node.getController(name);
            else {
                return node.controllers[0] || null;
            }
        }
        static createPackageItem(packageName, resName, userClass) {
            return fairygui.UIPackage.createObject(packageName, resName, userClass);
        }
        static insert_child(parent, level) {
            let node_name = level.toString();
            for (let i = 0, children = parent._children, length = children.length; i < length; i++) {
                let value = children[i];
                if (value.name == node_name)
                    return value;
                if (Number(value.name) > level) {
                    let childrenParent = new fairygui.GComponent();
                    childrenParent.name = node_name;
                    childrenParent.setPivot(0, 0);
                    parent.addChildAt(childrenParent, i);
                    return childrenParent;
                }
            }
            let childrenParent = new fairygui.GComponent();
            childrenParent.name = node_name;
            childrenParent.setPivot(0, 0);
            parent.addChild(childrenParent);
            return childrenParent;
        }
        ;
        constructFromXML() {
            super.constructFromXML(undefined);
            FguiBase$1.match_children_to_member(this, this);
            FguiBase$1.match_children_btn_event(this, this);
            FguiBase$1.match_transition_prefix(this, this);
            if (this.onConstructFromXML)
                this.onConstructFromXML();
        }
        dispose() {
            Laya.timer.clearAll(this);
            if (this.onDispose)
                this.onDispose();
            this._controllerOnce = null;
            super.dispose();
        }
        get_controller(name) {
            return FguiBase$1.get_controller(this, name);
        }
        get controllerOnce() {
            if (this._controllerOnce == null)
                this._controllerOnce = this.get_controller();
            return this._controllerOnce;
        }
        get_transition(transName) {
            return FguiBase$1.get_transition(this, transName);
        }
        find_children_names_node_prefix(prefix) {
            return FguiBase$1.find_children_names_node_prefix(this, prefix);
        }
        find_children_names_node(node_name) {
            return FguiBase$1.find_children_names_node(this, node_name);
        }
        find_children_names_once_node(node_name) {
            return FguiBase$1.find_children_names_once_node(this, node_name);
        }
        find_children_names(node_names, cb) {
            return FguiBase$1.find_children_names(this, node_names, cb);
        }
    }
    FguiBase$1.enableClick = true;
    FguiBase$1.clickSoundName = "";

    var EventType$1;
    (function (EventType) {
        EventType["START_GAME"] = "START_GAME";
        EventType["NODE_MOVE_COMPONLETE"] = "NODE_MOVE_COMPONLETE";
        EventType["NODE_TRIGGER_START"] = "NODE_TRIGGER_START";
        EventType["MOUSE_MOVE"] = "MOUSE_MOVE";
        EventType["GET_JELLY_NODE"] = "GET_JELLY_NODE";
        EventType["GAME_OVER"] = "GAME_OVER";
        EventType["ENTER_WATER"] = "ENTER_WATER";
        EventType["MSG_SHOP_SELECT_TYPE"] = "MSG_SHOP_SELECT_TYPE";
        EventType["MSG_SKIN_CHANGE_SKIN"] = "MSG_SKIN_CHANGE_SKIN";
        EventType["PropChange"] = "PropChange";
        EventType["UnlockSkin"] = "UnlockSkin";
        EventType["ChangeSkin"] = "ChangeSkin";
        EventType["ChangeSkinHat"] = "ChangeSkinHat";
        EventType["ChangeSkinPendant"] = "ChangeSkinPendant";
        EventType["UnlockEggs"] = "UnlockEggs";
        EventType["START_ENERGY_CHANGE"] = "START_ENERGY_CHANGE";
        EventType["START_WALL_REWARD_CHANGE"] = "START_WALL_REWARD_CHANGE";
        EventType["ATTACK_SHOW"] = "ATTACK_SHOW";
        EventType["ATTACK_COMBO_CHANGE"] = "ATTACK_COMBO_CHANGE";
        EventType["ChangeHair"] = "ChangeHair";
        EventType["FreeMapSelect"] = "FreeMapSelect";
        EventType["ChangeFormation"] = "ChangeFormation";
        EventType["CHANGE_SANWU"] = "ChangeSanWu";
        EventType["ChangeRing"] = "ChangeRing";
        EventType["ChangeHuawen"] = "ChangeHuawen";
        EventType["SHOWFEIJITIP"] = "SHOWFEIJITIP";
        EventType["CHANGESHOWSIDE"] = "CHANGESHOWSIDE";
        EventType["JIESUO_SUBMONEY"] = "JIESUO_SUBMONEY";
        EventType["HideJieSuo"] = "HideJieSuo";
        EventType["OPEN_SIDE"] = "OPEN_SIDE";
        EventType["STOP_BUY_ROOM"] = "STOP_BUY_ROOM";
        EventType["OPEN_ROOM"] = "OPEN_ROOM";
        EventType["CHANGE_FISHCOUNT"] = "CHANGE_FISHCOUNT";
        EventType["GETSTEPPOS"] = "GETSTEPPOS";
        EventType["FLY_STAR"] = "FLY_STAR";
        EventType["LOADFISHICON"] = "LOADFISHICON";
        EventType["SHOWRENWU"] = "SHOWRENWU";
        EventType["HIDERENWU"] = "HIDERENWU";
        EventType["MUST_SHOW_MONEY"] = "MUST_SHOW_MONEY";
        EventType["ADDBLACKMAYISIDE"] = "ADDBLACKMAYISIDE";
        EventType["SHOW_UPGRADE_PLAYER"] = "SHOW_UPGRADE_PLAYER";
        EventType["HIDE_UPGRADE_PLAYER"] = "HIDE_UPGRADE_PLAYER";
        EventType["SHOW_UPGRADE_SOLIDER"] = "SHOW_UPGRADE_SOLIDER";
        EventType["HIDE_UPGRADE_SOLIDER"] = "HIDE_UPGRADE_SOLIDER";
        EventType["SHOWHIT"] = "SHOWHIT";
        EventType["STEP_MOVE_CAMERA"] = "STEP_MOVE_CAMERA";
        EventType["StarChange"] = "StarChange";
    })(EventType$1 || (EventType$1 = {}));
    class EventMgr$1 {
        constructor() {
            this._eventMap = [];
            this.m_events = new Map();
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new EventMgr$1;
            }
            return this._Int;
        }
        on(name, callBack, caller) {
            if (!callBack || !caller)
                return;
            let event = this.m_events.get(name);
            if (!event) {
                event = [];
                this.m_events.set(name, event);
            }
            event.push({ callBack, caller });
        }
        emit(name, ...param) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    value.callBack.call(value.caller, ...param);
            }
        }
        off(name, callBack, caller) {
            let events = this.m_events.get(name);
            if (!events)
                return;
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    if (value.callBack == callBack && value.caller == caller) {
                        events.splice(i, 1);
                        return;
                    }
            }
        }
        offAll(name) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            events.length = 0;
        }
    }

    class Pool$1 {
        constructor(value) {
            this.value = null;
            this.pools = new Map();
            this.value = value;
        }
        get(path) {
            let value = this.pool(path).pop();
            if (!value)
                value = this.value.getRes(path);
            this.value.clearAttribute(value);
            if (this.value.onGet)
                this.value.onGet(value);
            return value;
        }
        put(value, path) {
            this.value.clearAttribute(value);
            let pool = this.pool(path);
            if (pool.length > this.value.maxCount) {
                if (this.value.destroy)
                    this.value.destroy(value);
            }
            else {
                if (this.value.onPut)
                    this.value.onPut(value);
                pool.push(value);
            }
        }
        pool(path) {
            let pool = this.pools.get(path);
            if (!pool) {
                pool = [];
                this.pools.set(path || "pool", pool);
            }
            return pool;
        }
        clear() {
            this.pools.forEach(pool => {
                for (let value of pool) {
                    this.value.clearAttribute(value);
                    if (this.value.destroy)
                        this.value.destroy(value);
                }
                pool.length = 0;
            });
            this.pools.clear();
        }
    }

    class Times$2 {
        constructor(time) {
            this.time = 0;
            if (time) {
                this.time = time;
            }
            else {
                this.time = Times$2.now;
            }
        }
        static get now() {
            return new Date().getTime();
        }
        static getDate() {
            return new Date().getDate();
        }
        static console(key) {
            this._console[key] = Times$2.now;
        }
        static consoleEnd(key, ...args) {
            console.log("执行耗时 ", key, (Times$2.now - (this._console[key] || Times$2.now)) / 1000, ...args);
        }
        static get Date() {
            return new Date();
        }
        static day(time) {
            return Math.floor(this.hour(time) / 24);
        }
        static hour(time) {
            return Math.floor(this.minute(time) / 60);
        }
        static minute(time) {
            return Math.floor(this.second(time) / 60);
        }
        static second(time) {
            if (time == null || time == undefined)
                time = this.now;
            return Math.floor(time / 1000);
        }
        static numHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numSecond(time) {
            return this.converMinTen(this.second(time));
        }
        static chinaHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + "分" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + "时" + res;
            }
            return res;
        }
        static chinaMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + "分" + res;
            }
            return res;
        }
        static chinaSecond(time) {
            return this.converMinTen(this.second(time)) + "秒";
        }
        static converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        add(time) {
            this.time += time;
            return this;
        }
        sub(time) {
            this.time -= time;
            return this;
        }
        get now() { return this.time; }
        ;
        get day() {
            return Math.floor(this.hour / 24);
        }
        get hour() {
            return Math.floor(this.minute / 60);
        }
        get minute() {
            return Math.floor(this.second / 60);
        }
        ;
        get second() {
            return Math.floor(this.time / 1000);
        }
        get numHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numSecond() {
            return this.converMinTen(this.second);
        }
        get chinaHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + "分" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + "时" + res;
            }
            return res;
        }
        get chinaMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + "分" + res;
            }
            return res;
        }
        get chinaSecond() {
            return this.converMinTen(this.second) + "秒";
        }
        converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        static isSameDay(t) {
            return new Date(t).toLocaleDateString() === new Date().toLocaleDateString();
        }
        static isToday(_time) {
            this.get_endtime();
            var compare_res = this.compare_time(_time);
            if (compare_res == 1)
                return true;
            else
                return false;
        }
        static compare_time(time) {
            var today_end = this.get_endtime();
            var time_old = time;
            if (today_end == time_old) {
                return 1;
            }
            else {
                return 0;
            }
        }
        static get_endtime() {
            var time_end = new Date(new Date(new Date().toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1);
            var time_format = this.format_date(time_end);
            return time_format;
        }
        static format_date(now) {
            var year = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            var hh = now.getHours();
            var mm = now.getMinutes();
            var ss = now.getSeconds();
            var clock = year + "";
            if (month < 10) {
                clock += "0";
            }
            clock += month + "";
            if (day < 10) {
                clock += "0";
            }
            clock += day + "";
            if (hh < 10) {
                clock += "0";
            }
            clock += hh + "";
            if (mm < 10) {
                clock += '0';
            }
            clock += mm;
            if (ss < 10) {
                clock += '0';
            }
            clock += ss;
            return clock;
        }
    }
    Times$2._console = {};

    var E_UI_Parent$1;
    (function (E_UI_Parent) {
        E_UI_Parent[E_UI_Parent["none"] = 0] = "none";
        E_UI_Parent[E_UI_Parent["fight_ui"] = 1] = "fight_ui";
        E_UI_Parent[E_UI_Parent["fgui"] = 99] = "fgui";
        E_UI_Parent[E_UI_Parent["diamondsFly"] = 100] = "diamondsFly";
        E_UI_Parent[E_UI_Parent["tip"] = 101] = "tip";
    })(E_UI_Parent$1 || (E_UI_Parent$1 = {}));
    var E_UI_State$1;
    (function (E_UI_State) {
        E_UI_State[E_UI_State["None"] = 0] = "None";
        E_UI_State[E_UI_State["Load"] = 1] = "Load";
        E_UI_State[E_UI_State["Show"] = 2] = "Show";
        E_UI_State[E_UI_State["Hide"] = 3] = "Hide";
        E_UI_State[E_UI_State["Wait"] = 4] = "Wait";
        E_UI_State[E_UI_State["LoadError"] = 5] = "LoadError";
        E_UI_State[E_UI_State["LoadClose"] = 6] = "LoadClose";
    })(E_UI_State$1 || (E_UI_State$1 = {}));
    class UIMgr$1 {
        constructor() {
            this.loadUrl = "";
            this.m_map_ui = new Maps();
            this.openUICount = {};
            this.isLoadCommonPackage = false;
        }
        getFguiUrl() {
            let urls = [];
            for (let key in Config$1) {
                let value = Config$1[key];
                Sets.add(urls, value.loadUrl);
            }
            return urls;
        }
        openUIByCompName(compName) {
            let ui_name = Maps.filterKey(Config$1, v => v.component_name == compName);
            this.openUI(ui_name);
        }
        openUI(ui_name, openData, openCb, closeCb) {
            console.log("openUI:", ui_name);
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("openUI: 检查配置", ui_name);
                return;
            }
            this.getUIData(ui_name).closeCb = closeCb;
            let ui = this.getUIData(ui_name).ui;
            if (ui) {
                this.openUIed(ui, openData, openCb);
                return;
            }
            this.getUIData(ui_name).state = E_UI_State$1.Load;
            let isShowLoad = Config$1[ui_name].isShowLoad;
            if (isShowLoad)
                this.openUI("UILoad");
            this.load(ui_name, () => {
                if (isShowLoad)
                    this.closeUI("UILoad");
                if (this.getUIData(ui_name).state == E_UI_State$1.None) {
                    console.log("还没加载完 就调用销毁");
                    return;
                }
                ui = this.createUI(ui_name);
                this.openUIed(ui, openData, openCb);
            });
        }
        ;
        openUINoCom(ui_name, openData, openCb, closeCb) {
            console.log("openUI:", ui_name);
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("openUI: 检查配置", ui_name);
                return;
            }
            this.getUIData(ui_name).closeCb = closeCb;
            let ui = this.getUIData(ui_name).ui;
            if (ui) {
                this.openUIed(ui, openData, openCb);
                return;
            }
            this.getUIData(ui_name).state = E_UI_State$1.Load;
            let isShowLoad = Config$1[ui_name].isShowLoad;
            if (isShowLoad)
                this.openUI("UILoad");
            this.loadNoCom(ui_name, () => {
                if (isShowLoad)
                    this.closeUI("UILoad");
                if (this.getUIData(ui_name).state == E_UI_State$1.None) {
                    console.log("还没加载完 就调用销毁");
                    return;
                }
                ui = this.createUI(ui_name);
                this.openUIed(ui, openData, openCb);
            });
        }
        ;
        closeUI(ui_name, destroy = false, arm = null) {
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("closeUI: 检查配置", ui_name);
                return;
            }
            let state = this.getUIData(ui_name).state;
            switch (state) {
                case E_UI_State$1.None:
                    console.log("close_ui 没有找到ui name:", ui_name);
                    break;
                case E_UI_State$1.Show:
                    console.log("close_ui name: ", ui_name);
                    let ui = this.getUIData(ui_name).ui;
                    let closeCb = this.getUIData(ui_name).closeCb;
                    if (destroy) {
                        this.destroyUI(ui_name);
                        this.emimOpenByCloseCb(ui_name, closeCb, arm);
                    }
                    else {
                        this.getUIData(ui_name).state = E_UI_State$1.Hide;
                        this.setUIActive(ui, false, true);
                        this.emimOpenByCloseCb(ui_name, closeCb, arm);
                        this.checkWaitUI();
                    }
                    break;
                case E_UI_State$1.Load:
                    console.log("close_ui 还没加载完关闭ui name:", ui_name);
                    this.getUIData(ui_name).state = E_UI_State$1.LoadClose;
                    break;
                case E_UI_State$1.Wait:
                    console.log("close_ui 等待队列中移除ui name:", ui_name);
                    this.getUIData(ui_name).state = E_UI_State$1.Hide;
                    break;
                case E_UI_State$1.Hide:
                    console.log("close_ui ui已关闭 勿重复调用 name:", ui_name);
                    break;
            }
        }
        ;
        emimOpenByCloseCb(ui_name, cb, arm = null) {
            this.getUIData(ui_name).closeCb = null;
            if (cb) {
                cb(arm);
            }
        }
        releaseUIPackage(ui_name) {
            let config = Config$1[ui_name];
            fgui.UIPackage.removePackage(config.package_name);
            ResourcesMgr.instance.release(this.getPath(ui_name) + "." + fgui.UIConfig.packageFileExtension);
        }
        destroyUI(ui_name) {
            let ui = this.getUIData(ui_name).ui;
            if (!ui) {
                console.error("请配置ui:", ui_name);
                return;
            }
            this.m_map_ui.delete(ui_name);
            this.setUIActive(ui, false, true);
            ui._onDestroy();
            ui.dispose();
            this.checkWaitUI();
        }
        closeAll(destroy = false) {
            this.m_map_ui.forEach((value, key) => {
                let state = this.getUIData(key).state;
                switch (state) {
                    case E_UI_State$1.Show:
                        this.getUIData(key).state = E_UI_State$1.Hide;
                        break;
                    case E_UI_State$1.Load:
                        this.getUIData(key).state = E_UI_State$1.LoadClose;
                        break;
                    case E_UI_State$1.Wait:
                        this.getUIData(key).state = E_UI_State$1.Hide;
                        break;
                }
                let closeCb = this.getUIData(key).closeCb;
                if (destroy)
                    this.destroyUI(key);
                else
                    this.setUIActive(this.getUIData(key).ui, false, true);
                this.emimOpenByCloseCb(key, closeCb);
            });
            if (destroy)
                this.m_map_ui.clear();
            console.log(destroy ? "销毁所有节点缓存池" : "关闭所有显示节点");
        }
        getPath(ui_name) {
            if (!Config$1[ui_name])
                return "";
            return this.loadUrl + Config$1[ui_name].loadUrl + Config$1[ui_name].package_name;
        }
        getUIData(ui_name) {
            if (ui_name == null) {
                return;
            }
            let value = this.m_map_ui.get(ui_name);
            if (!value) {
                value = {
                    state: E_UI_State$1.None,
                    ui: null,
                    closeCb: null,
                };
                this.m_map_ui.set(ui_name, value);
            }
            return value;
        }
        ;
        setUIActive(ui, value, is_cb) {
            let state = ui.visible;
            if (value) {
                ui.visible = true;
                if (!state && is_cb)
                    ui._onOpen();
            }
            else {
                ui.visible = false;
                if (state && is_cb) {
                    ui._onClose();
                }
            }
        }
        ;
        createUI(ui_name) {
            let value = Config$1[ui_name];
            if (!value) {
                console.error("请配置ui:", ui_name);
                return null;
            }
            if (value.setExtension)
                for (let key in value.setExtension)
                    FguiBase$2.setExtension(value.package_name, key, value.setExtension[key]);
            let ui = fairygui.UIPackage.createObject(value.package_name, value.component_name, value.class);
            if (!ui) {
                console.error("创建ui失败:", ui_name, value);
                return null;
            }
            ui.UI_NAME = ui_name;
            ui.name = ui_name;
            this.getUIData(ui_name).ui = ui;
            ui.makeFullScreen();
            if (this.getUIData(ui_name).state != E_UI_State$1.LoadClose)
                this.getUIData(ui_name).state = E_UI_State$1.Hide;
            console.log("添加UI到管理中：当前：" + ui_name);
            let ui_parent = this.getParent(E_UI_Parent$1.fgui);
            let parent = FguiBase$2.insert_child(ui_parent, ui.layer);
            parent.addChild(ui);
            ui._onCreate();
            this.setUIActive(ui, false, false);
            return ui;
        }
        ;
        getParent(type) {
            if (!fgui.GRoot.inst.displayObject.parent) {
                Laya.stage.addChild(fgui.GRoot.inst.displayObject);
            }
            return FguiBase$2.insert_child(fgui.GRoot.inst, type);
        }
        checkWaitUI() {
            let wait_ui = this.findWaitUIMaxLevel();
            if (wait_ui) {
                console.log("close_ui 派发等待ui name:", wait_ui.UI_NAME);
                this.getUIData(wait_ui.UI_NAME).state = E_UI_State$1.Show;
                this.setUIActive(wait_ui, true, true);
            }
        }
        load(ui_name, cb) {
            Times$2.console("加载ui");
            this.loadCommonPackage(() => {
                let urls = [this.getPath(ui_name)];
                let preUrls = Config$1[ui_name].preUrls;
                if (preUrls) {
                    if (typeof preUrls == "function")
                        urls.push(...preUrls());
                    else
                        urls.push(...preUrls);
                }
                ResourcesMgr.instance.loadDir(urls, () => {
                    Times$2.consoleEnd("加载ui", ui_name);
                    if (cb)
                        cb();
                });
            });
        }
        ;
        loadNoCom(ui_name, cb) {
            Times$2.console("加载ui");
            let urls = [this.getPath(ui_name)];
            let preUrls = Config$1[ui_name].preUrls;
            if (preUrls) {
                if (typeof preUrls == "function")
                    urls.push(...preUrls());
                else
                    urls.push(...preUrls);
            }
            ResourcesMgr.instance.loadDir(urls, () => {
                Times$2.consoleEnd("加载ui", ui_name);
                if (cb)
                    cb();
            });
        }
        ;
        loadCommonPackage(cb) {
            if (this.isLoadCommonPackage)
                cb();
            else
                ResourcesMgr.instance.load(ConfigCommonPackageUrl, cb);
        }
        openUIed(ui, openData, openCb) {
            let state = this.getUIData(ui.UI_NAME).state;
            if (this.openUICount[ui.UI_NAME] == undefined)
                this.openUICount[ui.UI_NAME] = 0;
            this.openUICount[ui.UI_NAME]++;
            switch (state) {
                case E_UI_State$1.Wait:
                    console.log("open_ui 在等待队列中，重新显示:", ui.UI_NAME);
                    this.getUIData(ui.UI_NAME).state = E_UI_State$1.Hide;
                    this.openUIed(ui, openData, openCb);
                    break;
                case E_UI_State$1.Show:
                    if (openCb)
                        openCb(ui);
                    console.log("open_ui 当前界面已在显示，请勿重复调用 name:", ui.UI_NAME);
                    break;
                case E_UI_State$1.Hide:
                    let sameUI = this.find_show_and_level_ui(ui);
                    if (sameUI) {
                        console.log("open_ui 添加到等待队列: name:", sameUI);
                        this.getUIData(sameUI).state = E_UI_State$1.Wait;
                        this.setUIActive(this.getUIData(sameUI).ui, false, true);
                    }
                    console.log("open_ui 显示成功 name:", ui.UI_NAME);
                    this.getUIData(ui.UI_NAME).state = E_UI_State$1.Show;
                    ui.openData = openData;
                    this.setUIActive(ui, true, true);
                    if (openCb)
                        openCb(ui);
                    break;
                case E_UI_State$1.None:
                    console.log("open_ui 没有找到ui name:", ui.UI_NAME);
                    break;
                case E_UI_State$1.Load:
                    console.log("open_ui 正在加载中 请等待加载完调用 name:", ui.UI_NAME);
                    break;
                case E_UI_State$1.LoadClose:
                    this.getUIData(sameUI).state = E_UI_State$1.Hide;
                    console.log("open_ui 未加载完已调用CloseUI name:", ui.UI_NAME);
                    break;
                case E_UI_State$1.LoadError:
                    console.log("open_ui 加载失败的ui name:", ui.UI_NAME);
                    break;
            }
        }
        ;
        find_show_and_level_ui(ui) {
            let map = this.m_map_ui.maps;
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State$1.Show) {
                    if (ui.layer == this.getUIData(key).ui.layer)
                        return key;
                }
            }
            return null;
        }
        ;
        findWaitUIMaxLevel() {
            let map = this.m_map_ui.maps;
            let maxLayer = 0;
            let ui = null;
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State$1.Wait) {
                    let other_ui = this.getUIData(key).ui;
                    if (other_ui.layer >= maxLayer) {
                        maxLayer = other_ui.layer;
                        ui = other_ui;
                    }
                }
            }
            return ui;
        }
        ;
        getWaitUIs() {
            let map = this.m_map_ui.maps;
            let ui_names = [];
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State$1.Wait)
                    ui_names.push(key);
            }
            return ui_names;
        }
        hasOnceUIShow(ui_name) {
            let map = this.m_map_ui.maps;
            for (let key in map) {
                if (ui_name != key) {
                    if (this.getUIData(key).state == E_UI_State$1.Show)
                        return false;
                }
            }
            return true;
        }
        getOpenUICount(ui_name) {
            return this.openUICount[ui_name] || 0;
        }
        iconUrl(iconName) {
            return "ui://common/" + iconName;
        }
        iconUrlPack(iconName, packagename = "common") {
            return "ui://" + packagename + "/" + iconName;
        }
        getShowWinLen() {
            let count = 0;
            this.m_map_ui.forEach((v, k) => {
                if (k == ModuleType.Loading || k == ModuleType.UIGlodAnimFly)
                    return;
                if (v.state == E_UI_State$1.Show) {
                    count++;
                }
            });
            return count;
        }
        getUIShowing(ui) {
            let show = false;
            this.m_map_ui.forEach((v, k) => {
                if (k == ui && v.state == E_UI_State$1.Show) {
                    show = true;
                }
            });
            return show;
        }
    }
    UIMgr$1.instance = new UIMgr$1();

    class TipsItem$1 extends FguiBase$2 {
        constructor() {
            super(...arguments);
            this.c_text_str = null;
        }
        init(str) {
            this.c_text_str.text = str;
            this.y = 200;
            this.x = Laya.stage.width / 2;
            UIMgr$1.instance.getParent(E_UI_Parent$1.tip).addChild(this);
            this.alpha = 0;
            this.onStartHandler();
        }
        onStartHandler() {
            Laya.Tween.to(this, { alpha: 100 }, 500, null, Laya.Handler.create(this, this.onCeneterHandler));
        }
        onCeneterHandler() {
            Laya.Tween.to(this, { alpha: 100 }, 1000, null, Laya.Handler.create(this, this.onEndHandler));
        }
        onEndHandler() {
            Laya.Tween.to(this, { alpha: 0 }, 500, null, Laya.Handler.create(this, this.onMoveHandler));
        }
        onMoveHandler() {
            TipMgr$1.Int.pool.put(this);
        }
    }
    class UIDiamondsFlyItem$1 extends FguiBase$2 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr$1.instance.getParent(E_UI_Parent$1.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr$1.Int.poolGold.put(this);
        }
    }
    class UIXingzuoFlyItem$1 extends FguiBase$2 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr$1.instance.getParent(E_UI_Parent$1.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr$1.Int.poolXingzou.put(this);
        }
    }
    class UITuziFlyItem$1 extends FguiBase$2 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr$1.instance.getParent(E_UI_Parent$1.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr$1.Int.poolTuzi.put(this);
        }
    }
    class TipMgr$1 {
        constructor() {
            this.pool = new Pool$1({
                maxCount: 5,
                getRes: () => FguiBase$2.createPackageItem("common", "comp_tips", TipsItem$1),
                clearAttribute: (value) => {
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolGold = new Pool$1({
                maxCount: 15,
                getRes: () => FguiBase$2.createPackageItem("common", "comp_diamonds", UIDiamondsFlyItem$1),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolXingzou = new Pool$1({
                maxCount: 15,
                getRes: () => FguiBase$2.createPackageItem("common", "comp_keyFly", UIXingzuoFlyItem$1),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolTuzi = new Pool$1({
                maxCount: 15,
                getRes: () => FguiBase$2.createPackageItem("common", "comp_tuzifly", UITuziFlyItem$1),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this._create = false;
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new TipMgr$1;
            }
            return this._Int;
        }
        showTips(str) {
            if (!this._create) {
                this._create = true;
                FguiBase$2.setExtension("common", "comp_tips", TipsItem$1);
            }
            this.pool.get().init(str);
        }
        showGold(startPoint, speed, id, endPos = new Laya.Vector2(630, 120)) {
            if (!this._create) {
                this._create = true;
                FguiBase$2.setExtension("common", "comp_diamonds", UIDiamondsFlyItem$1);
            }
            this.poolGold.get().init(startPoint, speed, id, endPos);
        }
        showXingzuo(startPoint, speed, id, endPos = new Laya.Vector2(630, 140)) {
            if (!this._create) {
                this._create = true;
                FguiBase$2.setExtension("common", "comp_keyFly", UIXingzuoFlyItem$1);
            }
            this.poolXingzou.get().init(startPoint, speed, id, endPos);
        }
        showTuzi(startPoint, speed, id, endPos = new Laya.Vector2(630, 180)) {
            if (!this._create) {
                this._create = true;
                FguiBase$2.setExtension("common", "comp_tuzifly", UITuziFlyItem$1);
            }
            this.poolTuzi.get().init(startPoint, speed, id, endPos);
        }
    }

    var EPropNameById$2;
    (function (EPropNameById) {
        EPropNameById[EPropNameById["diamonds"] = 1] = "diamonds";
        EPropNameById[EPropNameById["star"] = 2] = "star";
        EPropNameById[EPropNameById["Zuanshi"] = 3] = "Zuanshi";
    })(EPropNameById$2 || (EPropNameById$2 = {}));
    var EPropNameByIdZh$2;
    (function (EPropNameByIdZh) {
        EPropNameByIdZh[EPropNameByIdZh["\u94BB\u77F3"] = 1] = "\u94BB\u77F3";
        EPropNameByIdZh[EPropNameByIdZh["\u91D1\u5E01"] = 2] = "\u91D1\u5E01";
    })(EPropNameByIdZh$2 || (EPropNameByIdZh$2 = {}));
    class LogicProp$2 {
        initData() {
        }
        add(id, count, isShowUI = false, mul = 1, closeCb = null) {
            let key = this.getCacheKey(id);
            let cur = this.get(id);
            let _useNumber = Maths.clampf(cur + count * mul, 0, this.config(id).MaxCount);
            if (cur != _useNumber)
                LocalCache.set(key, _useNumber);
            EventMgr$1.Int.emit(EventType$1.PropChange, id);
            if (isShowUI) {
                if (id == EPropNameById$2.diamonds) {
                    UIMgr$1.instance.openUI("comp_jinbidonghua1");
                }
                else if (id == EPropNameById$2.Zuanshi) {
                    UIMgr$1.instance.openUI("comp_jinbidonghua2");
                }
            }
        }
        has(id, count, isShowUI = false) {
            if (this.get(id) < count) {
                if (isShowUI) {
                    TipMgr$1.Int.showTips("钻石不足");
                }
                return false;
            }
            return true;
        }
        config(id) {
            return GameData.getPropItem(id);
        }
        get(id) {
            let key = this.getCacheKey(id);
            let count = this.config(id).StartCount;
            count = LocalCache.get(key, count);
            return count;
        }
        getCacheKey(type) {
            return "Prop_" + type;
        }
        get diamonds() {
            return this.get(EPropNameById$2.diamonds);
        }
        set diamonds(value) {
            let key = this.getCacheKey(EPropNameById$2.diamonds);
            LocalCache.set(key, value);
        }
    }
    LogicProp$2.instance = new LogicProp$2();

    class ConfigUI$1 {
        constructor(value) {
            this.ui = null;
            this.value = null;
            this._event_refresh_gold_node = null;
            if (value)
                this.value = value;
            else
                this.value = {};
            if (this.value.propId == undefined)
                this.value.propId = EPropNameById$2.diamonds;
        }
        destroy() {
            this.ui = null;
            this.value = null;
            this._event_refresh_gold_node = null;
        }
        set_controller() {
            if (!this.value.open_controller_config || this.value.open_controller_config.length == 0)
                return;
            for (let value of this.value.open_controller_config) {
                let index = typeof value.index == "function" ? value.index() : value.index;
                FguiBase$1.get_controller(this.ui, value.name).selectedIndex = index;
            }
        }
        add_event(...event) {
            if (!this.value.event)
                this.value.event = [];
            this.value.event.push(...event);
        }
        auto_rigst_gold() {
            if (this.value.event_refresh_gold_node) {
                let node_name = typeof this.value.event_refresh_gold_node == "string" ? this.value.event_refresh_gold_node : this.value.event_refresh_gold_node.node_name;
                this._event_refresh_gold_node = this.ui.find_children_names_once_node(node_name);
                if (this._event_refresh_gold_node)
                    this.add_event({
                        type: EventType$1.PropChange,
                        caller: this,
                        callback: this.on_event_use_gold,
                        enableCall: [this.value.propId],
                    });
            }
        }
        on_event_use_gold(id) {
            if (id != this.value.propId)
                return;
            if (!this._event_refresh_gold_node)
                return;
            this._event_refresh_gold_node.text = LogicProp$2.instance.get(this.value.propId) + "";
            if (this.value.event_refresh_gold_node && this.value.event_refresh_gold_node.cb)
                this.value.event_refresh_gold_node.cb.call(this.value.event_refresh_gold_node.caller || this.ui);
        }
        enable_refresh_event() {
            if (!this.value.event || this.value.event.length == 0)
                return;
            for (let value of this.value.event) {
                if (value.enableCall) {
                    value.callback.apply(value.caller || this.ui, value.enableCall);
                }
            }
        }
        rigst_event(is_on) {
            if (!this.value.event || this.value.event.length == 0)
                return;
            for (let value of this.value.event) {
                if (value.node) {
                    let node = typeof value.node == "function" ? value.node() : value.node;
                    if (is_on)
                        node.on(value.type, value.caller || this.ui, value.callback);
                    else
                        node.off(value.type, value.caller || this.ui, value.callback);
                }
                else {
                    if (is_on)
                        EventMgr$1.Int.on(value.type, value.callback, value.caller || this.ui);
                    else
                        EventMgr$1.Int.off(value.type, value.callback, value.caller || this.ui);
                }
            }
        }
        play_sound() {
            let sound = Config$1[this.ui.UI_NAME].enable_play_sound;
            if (sound != undefined)
                AudioMgr.instance.play_sound(sound);
        }
        node_delay_show() {
            if (!this.value.enable_node_delay_show || this.value.enable_node_delay_show.length == 0)
                return;
            for (let value of this.value.enable_node_delay_show) {
                let delay = typeof value.delay == "number" ? value.delay : value.delay();
                if (delay != 0) {
                    let node = this.ui.find_children_names_once_node(value.node_name);
                    if (node) {
                        console.log(this.ui.UI_NAME, " 按钮延迟显示:", value.node_name);
                        node.visible = false;
                        Laya.timer.once(delay, this.ui, () => {
                            node.visible = true;
                        });
                    }
                }
            }
        }
        get banner_state() {
            return Config$1[this.ui.UI_NAME].banner_state;
        }
        show_banner() {
            console.log("bannerState:", this.banner_state);
        }
        hide_banner() {
        }
    }

    class UIBase$1 extends FguiBase$2 {
        constructor() {
            super(...arguments);
            this.UI_NAME = "";
            this.ConfigUI = new ConfigUI$1({});
            this.openTrans = null;
            this.cache = {};
        }
        get fguiConfig() {
            return Config$1[this.UI_NAME];
        }
        _onCreate() {
            console.log(this.UI_NAME, ": _onCreate");
            this.ConfigUI.ui = this;
            this.openTrans = FguiBase$2.find_children_transition_names(this, "openPlay");
            this.ConfigUI.auto_rigst_gold();
            if (this.onMouseDown)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_DOWN,
                    callback: this.onMouseDown,
                    node: this
                });
            if (this.onMouseMove)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_MOVE,
                    callback: this.onMouseMove,
                    node: this
                });
            if (this.onMouseUp)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_UP,
                    callback: this.onMouseUp,
                    node: this
                });
            if (this.onCreate)
                this.onCreate();
        }
        _onOpen() {
            console.log(this.UI_NAME, ": _onOpen");
            this.ConfigUI.set_controller();
            this.ConfigUI.rigst_event(true);
            this.ConfigUI.play_sound();
            this.ConfigUI.node_delay_show();
            this.ConfigUI.show_banner();
            this.ConfigUI.enable_refresh_event();
            for (let value of this.openTrans)
                value.play();
            if (this.onOpen)
                this.onOpen();
            this.open_loop();
        }
        ;
        open_loop() {
            if (this.onUpdate) {
                Laya.timer.clear(this, this._onUpdate);
                Laya.timer.frameLoop(1, this, this._onUpdate);
            }
        }
        _onUpdate() {
            if (this.onUpdate)
                this.onUpdate();
        }
        _onClose() {
            console.log(this.UI_NAME, ": _onClose");
            this.ConfigUI.rigst_event(false);
            this.ConfigUI.hide_banner();
            Laya.timer.clearAll(this);
            if (this.onClose)
                this.onClose();
        }
        _onDestroy() {
            console.log(this.UI_NAME, ": _onDestroy");
            this.ConfigUI.destroy();
            Laya.timer.clearAll(this);
            if (this.onDestroy)
                this.onDestroy();
        }
        createPackageItem(resName) {
            return FguiBase$2.createPackageItem(this.fguiConfig.package_name, resName, Config$1[this.UI_NAME].setExtension[resName]);
        }
        setExtension(compName, userClass) {
            FguiBase$2.setExtension(this.fguiConfig.package_name, compName, userClass);
        }
        closeUI(destroy = false, arm = null) {
            UIMgr$1.instance.closeUI(this.UI_NAME, destroy, arm);
        }
        click_close() {
            this.closeUI(Config$1[this.UI_NAME].click_close_destroy || false);
        }
        get layer() {
            return Config$1[this.UI_NAME].layer;
        }
        GetGameObject(name) {
            let tmp = this.cache[name];
            if (tmp)
                return tmp;
            tmp = FguiBase$2.find_children_names_once_node(this, name);
            if (tmp)
                this.cache[name] = tmp;
            return tmp;
        }
    }

    class UILoading extends UIBase$1 {
        constructor() {
            super(...arguments);
            this.c_progress_ratio = null;
            this.c_progress_ratio2 = null;
            this.c_text_jindu = null;
            this.c_text_tishi = null;
            this.count = 0;
            this.count2 = 0;
            this.t1 = 0;
            this.t2 = 0;
            this.tipIndex = 0;
            this.tips = [
                "提升背包等级可以抓更多的鱼",
                "自行车可以加快速度",
                "海底会出现极品鱼"
            ];
        }
        onOpen() {
            console.log(this)
            this.getChildAt(1).visible = false;
            this.getChildAt(10).visible = false;
            this.on_event_progress();
            this.tipIndex = this.tipIndex + 1 >= this.tips.length ? 0 : this.tipIndex + 1;
        }
        onUpdate() {
            this.on_event_progress();
        }
        on_event_progress() {
            this.t1 += Laya.timer.delta;
            this.count = Math.min(100, (this.t1 / 6000) * 100);
            this.c_progress_ratio.tweenValue(this.count, 0.1);
            this.t2 += Laya.timer.delta;
            this.count2 = Math.min(100, (this.t2 / 1500) * 100);
            this.c_progress_ratio2.tweenValue(this.count2, 0.1);
            if (this.count2 >= this.c_progress_ratio2.max) {
                this.t2 = 0;
                this.tipIndex = this.tipIndex + 1 >= this.tips.length ? 0 : this.tipIndex + 1;
            }
        }
    }

    var EventType;
    (function (EventType) {
        EventType["START_GAME"] = "START_GAME";
        EventType["NODE_MOVE_COMPONLETE"] = "NODE_MOVE_COMPONLETE";
        EventType["NODE_TRIGGER_START"] = "NODE_TRIGGER_START";
        EventType["MOUSE_MOVE"] = "MOUSE_MOVE";
        EventType["GET_JELLY_NODE"] = "GET_JELLY_NODE";
        EventType["GAME_OVER"] = "GAME_OVER";
        EventType["ENTER_WATER"] = "ENTER_WATER";
        EventType["MSG_SHOP_SELECT_TYPE"] = "MSG_SHOP_SELECT_TYPE";
        EventType["MSG_SKIN_CHANGE_SKIN"] = "MSG_SKIN_CHANGE_SKIN";
        EventType["PropChange"] = "PropChange";
        EventType["UnlockSkin"] = "UnlockSkin";
        EventType["ChangeSkin"] = "ChangeSkin";
        EventType["ChangeSkinHat"] = "ChangeSkinHat";
        EventType["ChangeSkinPendant"] = "ChangeSkinPendant";
        EventType["UnlockEggs"] = "UnlockEggs";
        EventType["START_ENERGY_CHANGE"] = "START_ENERGY_CHANGE";
        EventType["START_WALL_REWARD_CHANGE"] = "START_WALL_REWARD_CHANGE";
        EventType["ATTACK_SHOW"] = "ATTACK_SHOW";
        EventType["ATTACK_COMBO_CHANGE"] = "ATTACK_COMBO_CHANGE";
        EventType["ChangeHair"] = "ChangeHair";
        EventType["FreeMapSelect"] = "FreeMapSelect";
        EventType["ChangeFormation"] = "ChangeFormation";
        EventType["CHANGE_SANWU"] = "ChangeSanWu";
        EventType["ChangeRing"] = "ChangeRing";
        EventType["ChangeHuawen"] = "ChangeHuawen";
        EventType["SHOWFEIJITIP"] = "SHOWFEIJITIP";
        EventType["CHANGESHOWSIDE"] = "CHANGESHOWSIDE";
        EventType["JIESUO_SUBMONEY"] = "JIESUO_SUBMONEY";
        EventType["HideJieSuo"] = "HideJieSuo";
        EventType["OPEN_SIDE"] = "OPEN_SIDE";
        EventType["STOP_BUY_ROOM"] = "STOP_BUY_ROOM";
        EventType["OPEN_ROOM"] = "OPEN_ROOM";
        EventType["CHANGE_FISHCOUNT"] = "CHANGE_FISHCOUNT";
        EventType["GETSTEPPOS"] = "GETSTEPPOS";
        EventType["FLY_STAR"] = "FLY_STAR";
        EventType["LOADFISHICON"] = "LOADFISHICON";
        EventType["SHOWRENWU"] = "SHOWRENWU";
        EventType["HIDERENWU"] = "HIDERENWU";
        EventType["MUST_SHOW_MONEY"] = "MUST_SHOW_MONEY";
        EventType["ADDBLACKMAYISIDE"] = "ADDBLACKMAYISIDE";
        EventType["SHOW_UPGRADE_PLAYER"] = "SHOW_UPGRADE_PLAYER";
        EventType["HIDE_UPGRADE_PLAYER"] = "HIDE_UPGRADE_PLAYER";
        EventType["SHOW_UPGRADE_SOLIDER"] = "SHOW_UPGRADE_SOLIDER";
        EventType["HIDE_UPGRADE_SOLIDER"] = "HIDE_UPGRADE_SOLIDER";
        EventType["SHOWHIT"] = "SHOWHIT";
        EventType["STEP_MOVE_CAMERA"] = "STEP_MOVE_CAMERA";
        EventType["StarChange"] = "StarChange";
    })(EventType || (EventType = {}));
    class EventMgr {
        constructor() {
            this._eventMap = [];
            this.m_events = new Map();
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new EventMgr;
            }
            return this._Int;
        }
        on(name, callBack, caller) {
            if (!callBack || !caller)
                return;
            let event = this.m_events.get(name);
            if (!event) {
                event = [];
                this.m_events.set(name, event);
            }
            event.push({ callBack, caller });
        }
        emit(name, ...param) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    value.callBack.call(value.caller, ...param);
            }
        }
        off(name, callBack, caller) {
            let events = this.m_events.get(name);
            if (!events)
                return;
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    if (value.callBack == callBack && value.caller == caller) {
                        events.splice(i, 1);
                        return;
                    }
            }
        }
        offAll(name) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            events.length = 0;
        }
    }

    class IntervalDisplayAD {
        constructor(ServerConfigKey) {
            this.ServerConfigKey = "";
            this.last_display_time = 0;
            this.is_check = true;
            this.ServerConfigKey = ServerConfigKey;
            this.last_display_time = 0;
        }
        has() {
            if (!this.is_check)
                return true;
            let is_visible = GameSDK.isConfigUIModel(this.ServerConfigKey);
            if (!is_visible)
                return false;
            let interval = GameSDK.getConfigUIModelInterval(this.ServerConfigKey);
            if (this.ServerConfigKey == "" || interval == 0) {
                return true;
            }
            let now = Math.floor(Date.now() / 1000);
            let sub = 0;
            if (is_visible) {
                sub = now - this.last_display_time;
                if (interval != 0) {
                    if (sub >= interval) {
                        sub = now - IntervalDisplayAD.last_display_time;
                        interval = GameSDK.sdk.data[IntervalDisplayAD.ServerConfigKey];
                        if (typeof interval == "string")
                            interval = Number(interval);
                        else if (interval == undefined)
                            interval = 0;
                        if (sub >= interval) {
                            is_visible = true;
                        }
                        else {
                            is_visible = false;
                            console.log("后台控制广告显隐-", this.ServerConfigKey, "-全局间隔时间未达到", sub, interval);
                        }
                    }
                    else
                        is_visible = false;
                }
                this.last_display_time = now;
            }
            if (is_visible) {
                IntervalDisplayAD.last_display_time = now;
                console.log("后台控制广告显隐-", this.ServerConfigKey, "-: visible", is_visible, interval, sub);
            }
            return is_visible;
        }
    }
    IntervalDisplayAD.last_display_time = 0;
    IntervalDisplayAD.ServerConfigKey = "ad_all_interval";

    class BannerMgr {
        constructor() {
            this.IntervalDisplayADBanner = new IntervalDisplayAD("is_banner");
            this._enable_banner_count = 0;
            this._enable_banner_show = false;
        }
        show() {
            this.enable_banner(true);
        }
        hide() {
            this.enable_banner(false);
        }
        has() {
            return this._enable_banner_count != 0;
        }
        checkDelayIsBanner() {
            let delay = GameSDK.sdk.data.IntervalAdTime || 0;
            if (!GameSDK.isOpenBanner() && delay != 0) {
                Laya.timer.once(delay * 1000 + 200, null, () => {
                    this.check_banner_enable(true);
                });
            }
        }
        enable_banner(is_show) {
            if (is_show)
                this._enable_banner_count++;
            else
                this._enable_banner_count--;
            if (!GameSDK.isOpenBanner())
                return;
            Laya.timer.once(200, this, this.check_banner_enable, [is_show], true);
        }
        check_banner_enable(is_show) {
            console.log("banner:", (is_show ? "显示" : "隐藏"), ", 引用计数:", this._enable_banner_count);
            if (this._enable_banner_count > 0 && !this._enable_banner_show) {
                this._enable_banner_show = true;
                if (GameSDK.isOpenBanner()) {
                    if (!this.IntervalDisplayADBanner.has())
                        return;
                    GameSDK.sdk.showBanner();
                    console.log("banner:", "真正显示");
                }
            }
            if (this._enable_banner_count <= 0 && this._enable_banner_show) {
                this._enable_banner_show = false;
                if (GameSDK.isOpenBanner()) {
                    GameSDK.sdk.hideBanner();
                    console.log("banner:", "真正隐藏");
                }
            }
        }
    }

    class SDKConfig {
    }
    SDKConfig.getLocation = false;
    SDKConfig.useOpenid = false;
    SDKConfig.GAMEID = "";
    SDKConfig.VIVO_VERSION = "";
    SDKConfig.OPPO_VERSION = "";
    SDKConfig.TOUTIAO_GAME_NAME = "";
    SDKConfig.TOUTIAO_VERSION = "";
    SDKConfig.SHARE_CONTENT = [];
    SDKConfig.TOUTIAO_SHARECONTENT = [];
    SDKConfig.TOUTIAO_SHARETEMPLATEID = [];
    SDKConfig.WECHAT_GAME_NAME = "";
    SDKConfig.WECHAT_VERSION = "";
    SDKConfig.WECHAT_SHARECONTENT = [];
    SDKConfig.WECHAT_SHARETEMPLATEID = [];
    SDKConfig.HBS_VERSION = "";
    SDKConfig.GAME233_APPKEY = "";
    SDKConfig.GAME233_POS = "";
    SDKConfig.APP_IOS_APPID = "";
    SDKConfig.MOMOYU_VERSION = "";

    class ToolSDK {
        static GET_PLT() {
            let plat_type = PlatType.WEB;
            let bridge = this.getBridge("demo.JSBridge");
            let plt_str = "浏览器";
            if (bridge != undefined) {
                let platrom = bridge.call("platform");
                if (platrom == "Game233") {
                    plat_type = PlatType.GAME233;
                    plt_str = "233乐园";
                }
                else if (platrom == "momoyu") {
                    plat_type = PlatType.MOMOYU;
                    plt_str = "摸摸鱼";
                }
            }
            else {
                if (window['kwaigame']) {
                    plat_type = PlatType.KUAIGAME;
                    plt_str = "快手";
                }
                else if (window["tt"] && Laya.Browser["onTTMiniGame"]) {
                    plat_type = PlatType.TOUTIAO;
                    plt_str = "头条";
                }
                else if (window['uc']) {
                    plat_type = PlatType.GAMEUC;
                    plt_str = "uc浏览器";
                }
                else if (window["qg"]) {
                    if (Laya.Browser.onQGMiniGame) {
                        plat_type = PlatType.OPPO;
                        plt_str = "OPPO";
                    }
                    else if (Laya.Browser.onVVMiniGame) {
                        plat_type = PlatType.VIVO;
                        plt_str = "VIVO";
                    }
                    else
                        plat_type = PlatType.WEB;
                }
                else if (window["hbs"] && Laya.Browser["onHWMiniGame"]) {
                    plat_type = PlatType.HBS;
                    plt_str = "华为";
                }
                else if (window["wx"]) {
                    if (Laya.Browser.onWeiXin) {
                        plat_type = PlatType.WECHAT;
                        plt_str = "微信";
                    }
                    else if (window["qq"]) {
                        plat_type = PlatType["SQQ"];
                        plt_str = "QQ";
                    }
                    else
                        plat_type = PlatType.WEB;
                }
                else
                    plat_type = PlatType.WEB;
            }
            console.log("自动获取平台:" + plt_str);
            return plat_type;
        }
        static getBridge(pathClass) {
            if (window['conchConfig'] == undefined) {
                return undefined;
            }
            let os = window['conchConfig'].getOS();
            if (os != "Conch-android") {
                return undefined;
            }
            return window['PlatformClass'].createClass(pathClass);
        }
        static randomItem(array) {
            if (array && array.length > 0) {
                return array[this.random(0, array.length - 1)];
            }
            else {
                return null;
            }
        }
        static random(min, max) {
            return Math.round(Math.random() * (max - min) + min);
        }
        static get_cache(key) {
            let data = Laya.LocalStorage.getItem(key);
            if (data == null || data == "null" || data == undefined || data == "" || data == "NaN") {
                return null;
            }
            return data;
        }
        ;
        static set_cache(key, value) {
            Laya.LocalStorage.setItem(key, value);
        }
        ;
        static has(key) {
            return !!this.get_cache(key);
        }
        static delete_cache(key) {
            Laya.LocalStorage.removeItem(key);
        }
        ;
        static clear_cache() {
            Laya.LocalStorage.clear();
        }
        static stopSound() {
            Laya.SoundManager.setMusicVolume(0);
        }
        static replaySound() {
            Laya.SoundManager.setMusicVolume(1);
        }
    }

    class NavigateItem {
    }

    class Handler {
        constructor(caller = null, method = null, args = null, once = false) {
            this.once = false;
            this._id = 0;
            this.setTo(caller, method, args, once);
        }
        setTo(caller, method, args, once = false) {
            this._id = Handler._gid++;
            this.caller = caller;
            this.method = method;
            this.args = args;
            this.once = once;
            return this;
        }
        run() {
            if (this.method == null)
                return null;
            var id = this._id;
            var result = this.method.apply(this.caller, this.args);
            this._id === id && this.once && this.recover();
            return result;
        }
        runWith(data) {
            if (this.method == null)
                return null;
            var id = this._id;
            if (data == null)
                var result = this.method.apply(this.caller, this.args);
            else if (!this.args && !data.unshift)
                result = this.method.call(this.caller, data);
            else if (this.args)
                result = this.method.apply(this.caller, this.args.concat(data));
            else
                result = this.method.apply(this.caller, data);
            this._id === id && this.once && this.recover();
            return result;
        }
        clear() {
            this.caller = null;
            this.method = null;
            this.args = null;
            return this;
        }
        recover() {
            if (this._id > 0) {
                this._id = 0;
                Handler._pool.push(this.clear());
            }
        }
        static create(caller, method, args = null, once = true) {
            if (Handler._pool.length)
                return Handler._pool.pop().setTo(caller, method, args, once);
            return new Handler(caller, method, args, once);
        }
    }
    Handler._pool = [];
    Handler._gid = 1;

    var PlayerFlag;
    (function (PlayerFlag) {
        PlayerFlag[PlayerFlag["NO_AD"] = 0] = "NO_AD";
        PlayerFlag[PlayerFlag["NOMAL_HAS_AD"] = 1] = "NOMAL_HAS_AD";
        PlayerFlag[PlayerFlag["CHANNEL0"] = 2] = "CHANNEL0";
    })(PlayerFlag || (PlayerFlag = {}));
    var ErrorCountType;
    (function (ErrorCountType) {
        ErrorCountType[ErrorCountType["VIDEO"] = 0] = "VIDEO";
        ErrorCountType[ErrorCountType["BANNER"] = 1] = "BANNER";
        ErrorCountType[ErrorCountType["NATIVE"] = 2] = "NATIVE";
    })(ErrorCountType || (ErrorCountType = {}));
    class BaseSDK {
        constructor() {
            this._sdkGameData = {};
            this._version = "1.0.10";
            this.onADViewComplete = null;
            this.configURL = "";
            this.data = {};
            this.isShortCutInstalled = false;
            this._isBannerShowing = false;
            this._navigateList = [];
            this._isInitNavigate = false;
            this.cityData = { "code": 200, "loc": ["中国"], "ip": "", "env": "", "nowtime": "" };
            this.defaultServerConfig = {
                "is_AddDesk": { state: "1" },
                "is_AvdFloat": { state: "1" },
                "is_AvdList": { state: "1" },
                "is_GameNative": { state: "1", interval: 5 },
                "is_MoreGameBtn": { state: "0" },
                "is_PropSceneUI": { state: "1", interval: 5 },
                "is_banner": { state: "1", interval: 5 },
                "ad_all_interval": 10,
            };
            this.playerFlag = PlayerFlag.NOMAL_HAS_AD;
            this.mousedowntime = 0;
            var data = ToolSDK.get_cache(("GameData" + SDKConfig.GAMEID));
            if (data) {
                this._sdkGameData = JSON.parse(data);
            }
            else {
                this._sdkGameData = {};
            }
            this.mousedowntime = Date.now();
            Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onStageMouseDown);
            Laya.timer.loop(1000, this, () => {
                if (Date.now() - this.mousedowntime > 20 * 1000) {
                    SDKEventMgr.Int.emit(SDKEventName.OpenAutoFN);
                    this.mousedowntime = Date.now();
                    SDKEventMgr.Int.emit(SDKEventName.LONG_TIME_NO_OPERATION);
                }
            });
            SDKEventMgr.Int.on(SDKEventName.OpenAutoFN, this.OpenAutoFN, this);
        }
        onStageMouseDown() {
            this.mousedowntime = Date.now();
        }
        get sdkGameData() {
            return this._sdkGameData;
        }
        avdErrorLevel() {
            if (this.data.ErrorLevel == undefined) {
                return 0;
            }
            return parseInt(this.data.ErrorLevel);
        }
        errorMaxCount(type) {
            if (type == ErrorCountType.BANNER) {
                if (this.data.ErrorCountB == undefined) {
                    return 0;
                }
                return parseInt(this.data.ErrorCountB);
            }
            else if (type == ErrorCountType.VIDEO) {
                if (this.data.ErrorCountV == undefined) {
                    return 0;
                }
                return parseInt(this.data.ErrorCountV);
            }
            else if (type == ErrorCountType.NATIVE) {
                if (this.data.ErrorCount == undefined) {
                    return 0;
                }
                return parseInt(this.data.ErrorCount);
            }
        }
        checkIsTody(time) {
            var date = new Date(time);
            var dateNow = new Date();
            let bNewDay = false;
            if (date.getFullYear() == dateNow.getFullYear() &&
                date.getMonth() == dateNow.getMonth() &&
                date.getDate() == dateNow.getDate()) {
                bNewDay = true;
            }
            return bNewDay;
        }
        errorCount(type) {
            if (!this._sdkGameData.time)
                this._sdkGameData.time = Date.now();
            if (!this.checkIsTody(this._sdkGameData.time)) {
                this._sdkGameData.curErrorCountB = 0;
                this._sdkGameData.curErrorCountV = 0;
                this._sdkGameData.curErrorCount = 0;
                ToolSDK.set_cache(("GameData" + SDKConfig.GAMEID), JSON.stringify(this._sdkGameData));
            }
            if (type == ErrorCountType.BANNER) {
                if (this._sdkGameData.curErrorCountB == undefined) {
                    return 0;
                }
                return this._sdkGameData.curErrorCountB;
            }
            else if (type == ErrorCountType.VIDEO) {
                if (this._sdkGameData.curErrorCountV == undefined) {
                    return 0;
                }
                return this._sdkGameData.curErrorCountV;
            }
            else if (type == ErrorCountType.NATIVE) {
                if (this._sdkGameData.curErrorCount == undefined) {
                    return 0;
                }
                return this._sdkGameData.curErrorCount;
            }
        }
        updataAvdErrorCount(value, type) {
            this._sdkGameData.time = Date.now();
            if (type == ErrorCountType.BANNER) {
                if (this._sdkGameData.curErrorCountB == value) {
                    return false;
                }
                this._sdkGameData.curErrorCountB = value;
                ToolSDK.set_cache(("GameData" + SDKConfig.GAMEID), JSON.stringify(this._sdkGameData));
                return true;
            }
            else if (type == ErrorCountType.VIDEO) {
                if (this._sdkGameData.curErrorCountV == value) {
                    return false;
                }
                this._sdkGameData.curErrorCountV = value;
                ToolSDK.set_cache(("GameData" + SDKConfig.GAMEID), JSON.stringify(this._sdkGameData));
                return true;
            }
            else if (type == ErrorCountType.NATIVE) {
                if (this._sdkGameData.curErrorCount == value) {
                    return false;
                }
                this._sdkGameData.curErrorCount = value;
                ToolSDK.set_cache(("GameData" + SDKConfig.GAMEID), JSON.stringify(this._sdkGameData));
                return true;
            }
        }
        avdErrorProp() {
            if (this.data.ErrorProba == undefined) {
                return 0;
            }
            return parseFloat(this.data.ErrorProba);
        }
        playGameErrorProp() {
            if (this.data.PlayGameAdProba == undefined) {
                return 0;
            }
            return parseFloat(this.data.PlayGameAdProba);
        }
        enterGameVideoProp() {
            if (this.data.EnterAdProba == undefined) {
                return 0;
            }
            return parseFloat(this.data.EnterAdProba);
        }
        waterFallErrorProp() {
            if (this.data.WaterfallProba == undefined) {
                return 0;
            }
            return parseFloat(this.data.WaterfallProba);
        }
        playGameLevel() {
            if (this.data.PlayGameAd == undefined) {
                return 0;
            }
            return parseInt(this.data.PlayGameAd);
        }
        isCurrentVersion() {
            if (this._version == undefined) {
                return false;
            }
            if (!this.data.Version)
                return false;
            return this.data.Version == this._version;
        }
        byteToString(arr) {
            if (typeof arr === 'string') {
                return arr;
            }
            var str = '', _arr = arr;
            for (var i = 0; i < _arr.length; i++) {
                var one = _arr[i].toString(2), v = one.match(/^1+?(?=0)/);
                if (v && one.length == 8) {
                    var bytesLength = v[0].length;
                    var store = _arr[i].toString(2).slice(7 - bytesLength);
                    for (var st = 1; st < bytesLength; st++) {
                        store += _arr[st + i].toString(2).slice(2);
                    }
                    str += String.fromCharCode(parseInt(store, 2));
                    i += bytesLength - 1;
                }
                else {
                    str += String.fromCharCode(_arr[i]);
                }
            }
            return str;
        }
        getBytes(str) {
            var bytes = [];
            for (var i = 0; i < str.length; i++) {
                bytes.push(str.charCodeAt(i));
            }
            return bytes;
        }
        decode(data) {
            let bytes = this.getBytes(data);
            for (var i = 0; i < bytes.length; i++) {
                bytes[i] = bytes[i] ^ 359;
            }
            return this.byteToString(bytes);
        }
        initConfig(cb) {
            let count_call = 2;
            let cb_call = () => {
                count_call--;
                if (count_call <= 0) {
                    for (let key in this.defaultServerConfig) {
                        if (this.data[key] == undefined) {
                            this.data[key] = this.defaultServerConfig[key];
                        }
                    }
                    this.onConfigLoad();
                    if (cb)
                        cb();
                }
            };
            Laya.timer.once(5000, this, () => {
                if (count_call > 0) {
                    this.onConfigLoad();
                    if (cb)
                        cb();
                }
            });
            if (GameSDK.isDecode)
                this.configURL = this.configURL.replace("api.json", "apijson_en");
            this.request({
                url: this.configURL + "?a=" + Math.random(),
                success: (res) => {
                    if (GameSDK.isDecode)
                        res = JSON.parse(this.decode(res.data));
                    else {
                        res = JSON.parse(res.data);
                    }
                    console.log("-------------initConfig--------------", res);
                    for (let key in res) {
                        this.data[key] = res[key];
                    }
                    cb_call();
                }
            });
            this.request({
                url: "https://iploc.jpsdk.com/api/city",
                success: (res) => {
                    console.log("-------------initCity--------------", res.data);
                    this.cityData = JSON.parse(res.data);
                    cb_call();
                }
            });
        }
        hasShareRecorder() {
            return false;
        }
        getNavigateList() {
            if (this._isInitNavigate) {
                return this._navigateList;
            }
            let list = this.data.applist || this.data.navigateAppList;
            let len = list.length;
            let item;
            let info;
            for (let i = 0; i < len; i += 1) {
                info = list[i];
                item = new NavigateItem();
                item.appId = info.appid;
                item.name = info.name;
                item.iconPath = info.iconPath.split(",");
                item.videoId = info.videoId;
                item.weight = info.weight;
                this._navigateList.push(item);
            }
            this.shuffle(this._navigateList);
            this._isInitNavigate = true;
            return this._navigateList;
        }
        shuffle(arr, isChangeOriginal = true) {
            if (!isChangeOriginal) {
                let tmp = arr.concat();
                tmp.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return tmp;
            }
            else {
                arr.sort((a, b) => {
                    return Math.random() > .5 ? 1 : -1;
                });
                return arr;
            }
        }
        OpenAutoFN() {
        }
        shortCutInstalled(onComplete) { }
        checkShortcut(onComplete) { }
        getLogicScene(onComplete) { }
        navigateToMiniGame(msg) {
        }
        createBanner() {
        }
        showBanner() {
            this._isBannerShowing = true;
        }
        hideBanner() {
            this._isBannerShowing = false;
        }
        isBannerShow() {
            return this._isBannerShowing;
        }
        showADVideo(caller, onComplete, reason, args) {
            playVideoAd((res)=>{
                if(res){
                    this.noticeOpenVideo(reason);
                    if (onComplete) {
                        this.onADViewComplete = Handler.create(caller, onComplete, args);
                        this.onADViewComplete.runWith(true);
                    }
                }
            })
            
            
        }
        showADInsert() {
        }
        noticeOpenVideo(reason) {
            this.sendVideo({ 'point': reason, 'status': 0 });
        }
        noticeCloseVideo(reason) {
            this.sendVideo({ 'point': reason, 'status': 1 });
        }
        startVideoRecord(time, callback) {
        }
        pauseVideoRecord() {
        }
        resumeVideoRecord() {
        }
        stopVideoRecord() {
        }
        shareVideoRecord(callback) {
            if (callback)
                callback(true);
        }
        isSupportShareVideo() {
            return true;
        }
        isSupportErrorClick() {
            return false;
        }
        vibrateShort(type) {
        }
        vibrateLong() {
        }
        createNative(value) {
        }
        get version() {
            return this._version;
        }
        showToast(str, time) { }
        onConfigLoad() {
        }
        sendVideo(data) {
        }
        stageOnStart(data) {
        }
        statgeOnRunning(data) {
        }
        stageOnEnd(data) {
        }
        sendEvent(name, params = "") {
        }
        request(value) {
            console.log("PlatformVirtual.request", value);
            var xmlhttp;
            if (window.XMLHttpRequest) {
                xmlhttp = new XMLHttpRequest();
            }
            else {
                xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                    if (value.success) {
                        var jsonData = null;
                        if (xmlhttp.responseText && xmlhttp.responseText != "")
                            jsonData = xmlhttp.responseText;
                        value.success({ code: xmlhttp.status, data: jsonData });
                    }
                }
            };
            var url = value.url;
            if (value.data) {
                let params = Object.keys(value.data).map(function (key) {
                    return encodeURIComponent(key) + "=" + encodeURIComponent(value.data[key]);
                }).join("&");
                url += "?" + params;
            }
            xmlhttp.open("GET", url, true);
            xmlhttp.send();
        }
        loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            if (comlete)
                comlete(true);
        }
        shareMsg(caller, onComplete, reason, args) {
        }
        showGameBanner() {
        }
        hideGameBanner() {
        }
        showGamePortal() {
        }
        closeCustomAd() { }
        closeBoxPortalAd() { }
        closeBoxBanner() { }
        showCustomAd(isPaster) { }
        checkFollowState(callback) {
            if (callback)
                callback(true);
        }
        openUserProfile(callback) {
            if (callback)
                callback();
        }
    }

    const cityData$1 = {
        "code": 200,
        "loc": ["中国", "四川", "成都", "武侯", "电信", "104.04303", "30.64235"],
        "ip": "171.221.145.138",
        "env": "",
        "nowtime": "2020-12-30 16:54:16"
    };
    const apiData$1 = {
        "offcitys": [],
        "aderrormaxcount": 0,
        "version": "1.0.1",
        "waterfall": "1",
        "textDelay": 0,
        "isaggreation": 5,
        "advertmaxcount": 5,
        "aderrorrate": 0.2,
        "NativeAd": { "HomeNativeAd": 272469, "WinNativeAd": 272469, "FailNativeAd": 272469 },
        "BannerAd": "272470",
        "RewardedVideoAd": "272471",
        "appid": "30312415",
        "NativeAvd": false,
        "IntervalAdTime": 3,
        "navigateAppList": [],
        "shareList": [],
        "is_AddDesk": { state: "0" },
        "is_AvdFloat": { state: "0" },
        "is_AvdList": { state: "0" },
        "is_GameNative": { state: "0", interval: 5 },
        "is_MoreGameBtn": { state: "0" },
        "is_PropSceneUI": { state: "0", interval: 5 },
        "is_banner": { state: "0", interval: 5 },
        "ad_all_interval": 10,
    };
    class Game233 extends BaseSDK {
        constructor() {
            super();
            this._requestList = [];
            this._isRequest = false;
            this._bridge = ToolSDK.getBridge("demo.JSBridge");
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/ess/api.json`;
            this._bridge.callWithBack(function (res) {
                console.log(res);
            }, "initSdk", SDKConfig.GAME233_APPKEY);
        }
        showADVideo(caller, onComplete, reason, args) {
            if (this._bridge == undefined) {
                return;
            }
            this._bridge.callWithBack(function (value) {
                var obj = JSON.parse(value);
                if (obj.code == 0) {
                    onComplete.call(caller, true);
                }
                else {
                    onComplete.call(caller, false);
                    console.log(obj.message);
                }
            }, "showADVideo", SDKConfig.GAME233_POS);
        }
        initConfig(cb) {
            this.cityData = cityData$1;
            this.data = apiData$1;
            console.log("使用自定义城市配置 方便测试:", this.cityData);
            console.log("使用自定义后台数据配置 方便测试:", this.data);
            this.onConfigLoad();
            if (cb)
                cb();
        }
        request(value) {
            console.log("Game233.request", value);
            this._requestList.push(value);
            this.htmlRequest();
        }
        htmlRequest() {
            if (this._requestList.length <= 0 || this._isRequest) {
                return;
            }
            if (this._bridge == undefined) {
                return;
            }
            let value = this._requestList[0];
            var url = value.url;
            if (value.data) {
                let params = Object.keys(value.data).map(function (key) {
                    return encodeURIComponent(key) + "=" + encodeURIComponent(value.data[key]);
                }).join("&");
                url += "?" + params;
            }
            this._bridge.callWithBack(function (data) {
                var jsonData = JSON.parse(data);
                value.success({ code: 200, data: jsonData });
                this._requestList.splice(0, 1);
                this.htmlRequest();
            }.bind(this), "htmlRequest", url);
        }
    }

    const cityData = {
        "code": 200,
        "loc": ["中国", "四川", "成都", "武侯", "电信", "104.04303", "30.64235"],
        "ip": "171.221.145.138",
        "env": "",
        "nowtime": "2020-12-30 16:54:16"
    };
    const apiData = {
        "offcitys": [],
        "aderrormaxcount": 0,
        "version": "1.0.1",
        "waterfall": "1",
        "textDelay": 0,
        "isaggreation": 5,
        "advertmaxcount": 5,
        "aderrorrate": 0.2,
        "NativeAd": { "HomeNativeAd": 272469, "WinNativeAd": 272469, "FailNativeAd": 272469 },
        "BannerAd": "272470",
        "RewardedVideoAd": "272471",
        "appid": "30312415",
        "NativeAvd": false,
        "IntervalAdTime": 3,
        "navigateAppList": [],
        "shareList": [],
        "is_AddDesk": { state: "0" },
        "is_AvdFloat": { state: "0" },
        "is_AvdList": { state: "0" },
        "is_GameNative": { state: "0", interval: 5 },
        "is_MoreGameBtn": { state: "0" },
        "is_PropSceneUI": { state: "0", interval: 5 },
        "is_banner": { state: "0", interval: 5 },
        "ad_all_interval": 10,
    };
    class GameUC extends BaseSDK {
        constructor() {
            super();
            this._closeCallback = null;
            this.defaultServerConfig = {
                "is_AddDesk": { state: "1" },
                "is_AvdFloat": { state: "1" },
                "is_AvdList": { state: "1" },
                "is_GameNative": { state: "1", interval: 5 },
                "is_MoreGameBtn": { state: "1" },
                "is_PropSceneUI": { state: "1", interval: 5 },
                "is_banner": { state: "1", interval: 5 },
                "ad_all_interval": 10,
            };
            this.isShowBanner = false;
            this._version = SDKConfig.OPPO_VERSION;
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/uc/api.json`;
            this.uc = Laya.Browser.window.uc;
            this._systemInfo = JSON.parse(this.uc.getSystemInfoSync());
            this._navigateList = new Array();
        }
        onConfigLoad() {
            this.createBanner();
        }
        initConfig(cb) {
            this.cityData = cityData;
            this.data = apiData;
            console.log("使用自定义城市配置 方便测试:", this.cityData);
            console.log("使用自定义后台数据配置 方便测试:", this.data);
            this.onConfigLoad();
            if (cb)
                cb();
        }
        navigateToMiniGame(msg) {
        }
        shortCutInstalled(onComplete) {
        }
        createBanner() {
            const deviceWidth = this._systemInfo.screenWidth > this._systemInfo.screenHeight ? this._systemInfo.screenHeight : this._systemInfo.screenWidth;
            const width = deviceWidth / 2;
            const height = width * 194 / 345;
            this._bannerNode = this.uc.createBannerAd({
                style: {
                    width: width,
                    height: height,
                    gravity: 7,
                }
            });
        }
        showBanner() {
            if (this._bannerNode) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode) {
                this._bannerNode.hide();
                this.isShowBanner = false;
            }
        }
        showADVideo(caller, onComplete, reason, args) {
            if (this.uc == undefined)
                return;
            if (this._videoNode) {
                return;
            }
            this.noticeOpenVideo(reason);
            this._videoNode = this.uc.createRewardVideoAd();
            this._videoNode.show().then().catch(err => {
                console.log(err);
                this._videoNode = undefined;
                onComplete.call(caller, false);
            });
            this._videoNode.onLoad(() => {
                console.log("广告加载成功");
            });
            this._videoNode.onError((error) => {
                console.log('show excitation ad error: ', error);
                this.showToast(error, 2000);
                onComplete.call(caller, false);
                this._videoNode = undefined;
                ToolSDK.replaySound();
            });
            this._videoNode.onClose((res) => {
                if (res && res.isEnded) {
                    this.showToast('正常播放结束');
                    this.noticeCloseVideo(reason);
                    onComplete.call(caller, true);
                }
                else {
                    this.showToast('中途退出');
                    this.noticeCloseVideo(reason);
                    onComplete.call(caller, false);
                }
                ToolSDK.replaySound();
                this._videoNode = undefined;
            });
        }
        showVidwo(reason) {
            var self = this;
            if (this.isShowBanner)
                this._bannerNode.hide();
            this._videoNode.show();
            this._closeCallback && this._videoNode.offClose(this._closeCallback);
            this._closeCallback = function (res) {
                if (self.isShowBanner)
                    self._bannerNode.show();
                self.resumeVideoRecord();
                if (res && res.isEnded || res === undefined) {
                    self.noticeCloseVideo(reason);
                    self.onADViewComplete.runWith(true);
                }
                else {
                    self.onADViewComplete.runWith(false);
                }
                ToolSDK.replaySound();
            };
            this._videoNode.onClose(this._closeCallback);
        }
        createNative(navigateId) {
        }
        showToast(message, time = 2000) {
            this.uc.showToast({
                content: message,
                duration: time
            });
        }
        showADInsert() {
            const interstitialAd = this.uc.createInterstitialAd();
            interstitialAd.show().then().catch(err => console.log(err));
            interstitialAd.onLoad(() => {
                console.log('插屏-广告加载成功');
            });
            interstitialAd.onError(err => {
                console.log('插屏-广告加载失败', err);
            });
            interstitialAd.onClose(res => {
                console.log('插屏-关闭');
            });
        }
    }

    class Hbs extends BaseSDK {
        constructor() {
            super();
            this._closeCallback = null;
            this.defaultServerConfig = {
                "is_AddDesk": { state: "0" },
                "is_AvdFloat": { state: "0" },
                "is_AvdList": { state: "0" },
                "is_GameNative": { state: "1", interval: 5 },
                "is_MoreGameBtn": { state: "0" },
                "is_PropSceneUI": { state: "0", interval: 5 },
                "is_banner": { state: "0", interval: 5 },
                "ad_all_interval": 10,
            };
            this.isShowBanner = false;
            this.isLoading = false;
            this._version = SDKConfig.HBS_VERSION;
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/huawei/api.json`;
            this.hbs = Laya.Browser.window.hbs;
            this.hbs.hasShortcutInstalled({
                success: function (res) {
                    this.isShortCutInstalled = res;
                },
                fail: function () {
                    this.isShortCutInstalled = false;
                }
            });
            this.hbs.onShow(() => {
                ToolSDK.replaySound();
                this.initConfig(null);
            });
            this.hbs.onHide(() => {
            });
        }
        onConfigLoad() {
            this.hbs.gameLoginWithReal({
                forceLogin: 0,
                appid: this.data.appid
            });
        }
        navigateToMiniGame(msg) {
            this.hbs && this.hbs.navigateToQuickApp({
                packageName: msg.packageName,
                extraData: msg.data,
                success: function () {
                    console.log("-----------跳转小游戏:" + msg.name + "成功-----------");
                },
                fail: function (res) {
                    console.log("-----------跳转小游戏:" + msg.name + "失败-----------");
                    console.log(JSON.stringify(res));
                }
            });
        }
        shortCutInstalled(onComplete) {
            var self = this;
            this.hbs.installShortcut({
                message: 'Adds the shortcut to the desktop for convenient use next time.',
                success: function (ret) {
                    console.log('handling install success');
                    onComplete && onComplete(true);
                },
                fail: function (erromsg, errocode) {
                    console.log('handling install fail: ' + erromsg + ", errocode: " + errocode);
                    onComplete && onComplete(false);
                },
                complete: function () {
                    console.log("handling install  complete");
                    self.showToast("桌面图标已创建", 1000);
                }
            });
        }
        createBanner() {
            var self = this;
            this.hbs.getSystemInfoSync();
            this._bannerNode = this.hbs.createBannerAd({
                adUnitId: this.data.BannerAd,
                style: {
                    top: 20,
                    left: 20,
                    height: 57,
                    width: 360
                }
            });
            this._bannerNode.onLoad(function () {
                if (!self.isShowBanner)
                    self._bannerNode.hide();
            });
            this._bannerNode.onError(function (err) {
                console.log("Banner error:", err);
            });
        }
        showBanner() {
            if (this._bannerNode) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode)
                this._bannerNode.hide();
            this.isShowBanner = false;
        }
        showADVideo(caller, onComplete, reason, args) {
            let data = GameSDK.data;
            if (data && !data.is_load_ad) {
                Handler.create(caller, onComplete, args).runWith(true);
                return;
            }
            var self = this;
            if (typeof (this.hbs.createRewardedVideoAd) == 'undefined')
                return;
            if (this.isLoading)
                return;
            this.showLoading();
            this.noticeOpenVideo(reason);
            this.onADViewComplete = Handler.create(caller, onComplete, args);
            if (!this._videoNode) {
                console.log("广告id:" + this.data.RewardedVideoAd);
                this._videoNode = this.hbs.createRewardedVideoAd({ adUnitId: this.data.RewardedVideoAd });
                this._videoNode.onLoad((e) => {
                    console.log("视频加载成功:", JSON.stringify(e));
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showVidwo(reason);
                    ToolSDK.stopSound();
                });
                this._videoNode.onError((err) => {
                    console.log("视频加载失败:", JSON.stringify(err));
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showToast("暂无视频", 2000);
                    ToolSDK.replaySound();
                });
            }
            if (this.showTime)
                clearTimeout(this.showTime);
            this._videoNode.load();
            this.showTime = setTimeout(this.hideLoading, 3000);
        }
        showVidwo(reason) {
            var self = this;
            if (this.isShowBanner)
                this._bannerNode.hide();
            this._videoNode.show();
            this._closeCallback && this._videoNode.offClose(this._closeCallback);
            this._closeCallback = function (res) {
                if (self.isShowBanner)
                    self._bannerNode.show();
                self.resumeVideoRecord();
                if (res && res.isEnded || res === undefined) {
                    self.noticeCloseVideo(reason);
                    self.onADViewComplete.runWith(true);
                }
                else {
                    self.onADViewComplete.runWith(false);
                }
                ToolSDK.replaySound();
            };
            this._videoNode.onClose(this._closeCallback);
        }
        showLoading() {
            this.isLoading = true;
            if (this.hbs && this.hbs.showLoading) {
                this.hbs.showLoading({ title: "请求中，请稍后..." });
            }
        }
        hideLoading() {
            this.isLoading = false;
            if (this.hbs && this.hbs.hideLoading) {
                this.hbs.hideLoading({});
            }
        }
        showToast(message, time) {
            this.hbs.showToast({
                title: message,
                icon: "none",
                duration: time
            });
        }
        createNative(navigateId) {
            console.log("广告id:" + navigateId);
            let nativeNode = this.hbs.createNativeAd({
                adUnitId: navigateId
            });
            return nativeNode;
        }
        get addelay() {
            if (!this.data)
                return 0;
            return this.data.textDelay * 1000;
        }
        vibrateShort() {
            this.hbs.vibrateShort({
                success: function () {
                    console.log("log----vibrateShort-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        vibrateLong() {
            this.hbs.vibrateLong({
                success: function () {
                    console.log("log----vibrateLong-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            this.hbs.getSystemInfoSync();
            let loadTask = this.hbs.loadSubpackage({
                subpackage: pack,
                success: function (info) {
                    if (comlete) {
                        comlete(info);
                    }
                },
                fail: function (info) {
                },
                complete: function () {
                }
            });
            loadTask.onprogress(res => {
                console.log('下载进度', res.progress);
                console.log('已经下载的数据长度', res.loadSize);
                console.log('预期需要下载的数据总长度', res.totalSize);
                if (progress) {
                    progress(res);
                }
            });
        }
        showADInsert() {
            let insertAdNode = this.hbs.createInterstitialAd({
                posId: this.data.InterstitialAd,
            });
            insertAdNode.onError(err => {
                console.log("插屏广告加载失败", err);
            });
            insertAdNode.onLoad(function (data) {
                console.log('onLoad data ' + JSON.stringify(data));
                insertAdNode.show();
            });
            insertAdNode.load();
        }
    }

    class KuaiGame extends BaseSDK {
        constructor() {
            super();
            this._closeCallback = null;
            this._recoderData = undefined;
            this.defaultServerConfig = {
                "Offcitys": [],
                "aderrormaxcount": 0,
                "Version": "1.0.1",
                "waterfall": "1",
                "textDelay": 0,
                "BtnTime": 3,
                "isaggreation": 5,
                "advertmaxcount": 5,
                "aderrorrate": 0.2,
                "NativeAd": { "HomeNativeAd": 272469, "WinNativeAd": 272469, "FailNativeAd": 272469 },
                "BannerAd": "272470",
                "RewardAd": "2300001112_01",
                "appid": "30312415",
                "NativeAvd": false,
                "IntervalAdTime": 3,
                "navigateAppList": [],
                "shareList": [],
                "is_AddDesk": { state: "0" },
                "is_AvdFloat": { state: "0" },
                "is_AvdList": { state: "0" },
                "is_GameNative": { state: "0", interval: 5 },
                "is_MoreGameBtn": { state: "0" },
                "is_PropSceneUI": { state: "0", interval: 5 },
                "is_banner": { state: "0", interval: 5 },
                "ad_all_interval": 10,
            };
            this.isShowBanner = false;
            this._isRecordStart = false;
            this._tickRecordBegin = 0;
            this.isLoading = false;
            this._version = SDKConfig.OPPO_VERSION;
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/kuaishou/api.json`;
            this.ks = Laya.Browser.window.ks;
            let that = this;
            console.log("进入快手");
            this.ks.getSystemInfo({
                response: (result) => {
                    that._systemInfo = JSON.stringify(result);
                    console.log("获取系统信息:" + that._systemInfo);
                }
            });
            this._navigateList = new Array();
        }
        onConfigLoad() {
            this.mediaRecorder = this.ks.getGameRecorder();
            if (this.mediaRecorder === null) {
                console.log("当前版本 App 不支持录屏");
            }
            this.mediaRecorder.on('start', () => {
                this._tickRecordBegin = Date.now();
                this._isRecordStart = true;
            });
            this.mediaRecorder.on('stop', res => {
                if (res && res.videoID) {
                    console.log(`videoID is ${res.videoID}`);
                    console.log(`录屏停止，录制成功`);
                    if (this._tickRecordBegin && Date.now() - this._tickRecordBegin < 3000) {
                        this._recoderData = null;
                    }
                    else {
                        this._recoderData = res.videoID;
                    }
                    this._isRecordStart = false;
                }
                else {
                    console.log(`录屏停止，录制失败`);
                }
            });
            this.mediaRecorder.on('error', (err) => {
                console.log(`发生录屏错误 ${JSON.stringify(err)}`);
            });
        }
        navigateToMiniGame(msg) {
        }
        shortCutInstalled(onComplete) {
        }
        createBanner() {
        }
        showBanner() {
            if (this._bannerNode) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode) {
                this._bannerNode.hide();
                this.isShowBanner = false;
            }
        }
        showADVideo(caller, onComplete, reason, args) {
            var self = this;
            if (typeof (this.ks.createRewardedVideoAd) == 'undefined')
                return;
            if (this.isLoading)
                return;
            this.showLoading();
            this.noticeOpenVideo(reason);
            this.onADViewComplete = Handler.create(caller, onComplete, args);
            console.log("开始播放视频:" + reason);
            if (!this._videoAd) {
                console.log("视频ID === " + this.data.RewardAd);
                this._videoAd = this.ks.createRewardedVideoAd({ adUnitId: this.data.RewardAd });
                let that = this;
                this._videoAd.onClose((result) => {
                    console.log("激励视频关闭回调: " + JSON.stringify(result));
                    that.onADViewComplete.runWith(false);
                    if (result && result.isEnded || result === undefined) {
                        console.log("激励视频奖励回调: " + JSON.stringify(result));
                        that.onADViewComplete.runWith(true);
                    }
                    else {
                        console.log("激励视频播放失败: " + JSON.stringify(result));
                        self.hideLoading();
                    }
                });
            }
            this._videoAd.show({
                success: () => {
                    console.log("激励视频播放成功");
                    self.hideLoading();
                },
                fail: (result) => {
                    console.log("激励视频播放失败: " + JSON.stringify(result));
                    self.hideLoading();
                }
            });
        }
        pauseVideoRecord() {
            if (this.mediaRecorder === null) {
                console.log("返回 null 时表示当前 APP 版本不支持录屏");
                return;
            }
            this.mediaRecorder.pause();
        }
        resumeVideoRecord() {
            if (this.mediaRecorder === null) {
                console.log("返回 null 时表示当前 APP 版本不支持录屏");
                return;
            }
            this.mediaRecorder.resume();
        }
        stopVideoRecord() {
            if (this.mediaRecorder === null) {
                console.log("返回 null 时表示当前 APP 版本不支持录屏");
                return;
            }
            if (this._isRecordStart) {
                console.log("停止录屏");
                this.mediaRecorder.stop();
            }
            this._isRecordStart = false;
        }
        startVideoRecord(time, callback) {
            if (this.mediaRecorder === null) {
                console.log("返回 null 时表示当前 APP 版本不支持录屏");
                return;
            }
            if (this._isRecordStart) {
                this.stopVideoRecord();
                return;
            }
            this.mediaRecorder.start();
        }
        hasShareRecorder() {
            if (this.mediaRecorder == undefined) {
                return;
            }
            if (this._tickRecordBegin && Date.now() - this._tickRecordBegin < 3000)
                return false;
            return true;
        }
        showLoading() {
            this.isLoading = true;
        }
        hideLoading() {
            this.isLoading = false;
        }
        showToast(message, time) {
            console.log(message, time);
        }
        onShareAppMessage() {
            if (this._recoderData)
                this.shareVideoRecord();
        }
        shareVideoRecord(callback) {
            if (this.ks == null)
                return;
            let self = this;
            if (this._recoderData == null)
                return;
            console.log(`录制ID === ：`, self._recoderData);
            this.mediaRecorder.publishVideo({
                video: self._recoderData,
                callback: (error) => {
                    if (error) {
                        console.log(`发布录屏失败： ${JSON.stringify(error)}`);
                        if (callback)
                            callback(false);
                    }
                    else {
                        console.log('分享录屏成功');
                        self._recoderData = null;
                        if (callback)
                            callback(true);
                    }
                }
            });
        }
        loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            let loadTask = this.ks.loadSubpackage({
                name: pack,
                success: function (info) {
                    console.log("分包加载完成1111");
                    if (comlete) {
                        comlete(true);
                        console.log("分包加载完成1111");
                    }
                },
                fail: function (err) {
                    if (comlete) {
                        comlete(false);
                    }
                    console.info('加载分包 sub1Name 失败', err, pack);
                },
                complete: function () {
                }
            });
            loadTask.onProgressUpdate(res => {
                console.log('下载进度', res.progress);
                console.log('已经下载的数据长度', res.totalBytesWritten);
                console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite);
                if (progress) {
                    progress(res);
                }
            });
        }
        vibrateShort() {
        }
        vibrateLong() {
        }
        get addelay() {
            if (!this.data)
                return 0;
            return this.data.BtnTime * 1000;
        }
        checkFollowState(callback) {
            this.ks.checkFollowState({
                accountType: "CPServiceAccount",
                callback: (result) => {
                    `check Follow MiniGame Official Account, result:${JSON.stringify(result)}`;
                    if (result.errorCode == 1 && result.hasFollow) {
                        console.log("关注成功");
                        if (callback) {
                            callback(true);
                        }
                    }
                    else {
                        console.log("关注错误信息 :" + result.errorMsg);
                        if (callback) {
                            callback(false);
                        }
                    }
                }
            });
        }
        openUserProfile(callback) {
            this.ks.openUserProfile({
                accountType: "CPServiceAccount",
                callback: (result) => {
                    `open CP Profile, result: ${JSON.stringify(result)}`;
                    if (result.errorCode == 1) {
                        this.checkFollowState(callback);
                    }
                }
            });
        }
    }

    class Times$1 {
        constructor(time) {
            this.time = 0;
            if (time) {
                this.time = time;
            }
            else {
                this.time = Times$1.now;
            }
        }
        static get now() {
            return new Date().getTime();
        }
        static getDate() {
            return new Date().getDate();
        }
        static console(key) {
            this._console[key] = Times$1.now;
        }
        static consoleEnd(key, ...args) {
            console.log("执行耗时 ", key, (Times$1.now - (this._console[key] || Times$1.now)) / 1000, ...args);
        }
        static get Date() {
            return new Date();
        }
        static day(time) {
            return Math.floor(this.hour(time) / 24);
        }
        static hour(time) {
            return Math.floor(this.minute(time) / 60);
        }
        static minute(time) {
            return Math.floor(this.second(time) / 60);
        }
        static second(time) {
            if (time == null || time == undefined)
                time = this.now;
            return Math.floor(time / 1000);
        }
        static numHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numSecond(time) {
            return this.converMinTen(this.second(time));
        }
        static chinaHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + "分" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + "时" + res;
            }
            return res;
        }
        static chinaMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + "分" + res;
            }
            return res;
        }
        static chinaSecond(time) {
            return this.converMinTen(this.second(time)) + "秒";
        }
        static converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        add(time) {
            this.time += time;
            return this;
        }
        sub(time) {
            this.time -= time;
            return this;
        }
        get now() { return this.time; }
        ;
        get day() {
            return Math.floor(this.hour / 24);
        }
        get hour() {
            return Math.floor(this.minute / 60);
        }
        get minute() {
            return Math.floor(this.second / 60);
        }
        ;
        get second() {
            return Math.floor(this.time / 1000);
        }
        get numHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numSecond() {
            return this.converMinTen(this.second);
        }
        get chinaHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + "分" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + "时" + res;
            }
            return res;
        }
        get chinaMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + "分" + res;
            }
            return res;
        }
        get chinaSecond() {
            return this.converMinTen(this.second) + "秒";
        }
        converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        static isSameDay(t) {
            return new Date(t).toLocaleDateString() === new Date().toLocaleDateString();
        }
        static isToday(_time) {
            this.get_endtime();
            var compare_res = this.compare_time(_time);
            if (compare_res == 1)
                return true;
            else
                return false;
        }
        static compare_time(time) {
            var today_end = this.get_endtime();
            var time_old = time;
            if (today_end == time_old) {
                return 1;
            }
            else {
                return 0;
            }
        }
        static get_endtime() {
            var time_end = new Date(new Date(new Date().toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1);
            var time_format = this.format_date(time_end);
            return time_format;
        }
        static format_date(now) {
            var year = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            var hh = now.getHours();
            var mm = now.getMinutes();
            var ss = now.getSeconds();
            var clock = year + "";
            if (month < 10) {
                clock += "0";
            }
            clock += month + "";
            if (day < 10) {
                clock += "0";
            }
            clock += day + "";
            if (hh < 10) {
                clock += "0";
            }
            clock += hh + "";
            if (mm < 10) {
                clock += '0';
            }
            clock += mm;
            if (ss < 10) {
                clock += '0';
            }
            clock += ss;
            return clock;
        }
    }
    Times$1._console = {};

    class Oppo extends BaseSDK {
        constructor() {
            super();
            this._closeCallback = null;
            this.isShowBanner = false;
            this.showVideoTime = 0;
            this.isLoading = false;
            this._version = SDKConfig.OPPO_VERSION;
            this.configURL = `https://hallcq.jpsdk.com/static/20323/oppo/api.json`;
            let self = this;
            let extraData = this.qg.getLaunchOptionsSync();
            if (extraData.referrerInfo != {}) ;
            this.qg.hasShortcutInstalled({
                success: function (res) {
                    self.isShortCutInstalled = res;
                },
                fail: function () {
                    self.isShortCutInstalled = false;
                }
            });
            this._navigateList = new Array();
        }
        get qg() {
            if (!this._qg) {
                this._qg = Laya.Browser.window.qg;
            }
            return this._qg;
        }
        onConfigLoad() {
            this.createBanner();
            this.createGamePortalAd();
            this.createGameBannerAd();
        }
        navigateToMiniGame(msg) {
            this.qg && this.qg.navigateToMiniGame({
                pkgName: msg.packageName,
                extraData: msg.data,
                success: function () {
                    console.log("-----------跳转小游戏:" + msg.name + "成功-----------");
                },
                fail: function (res) {
                    console.log("-----------跳转小游戏:" + msg.name + "失败-----------");
                    console.log(JSON.stringify(res));
                }
            });
        }
        shortCutInstalled(onComplete) {
            var self = this;
            this.qg.hasShortcutInstalled({
                success: function (res) {
                    if (res == false) {
                        self.qg.installShortcut({
                            success: function () {
                                onComplete && onComplete(true);
                            },
                            fail: function () {
                                onComplete && onComplete(false);
                            }
                        });
                    }
                    else {
                        onComplete && onComplete(true);
                    }
                },
                fail: function () {
                    onComplete && onComplete(false);
                }
            });
        }
        createBanner() {
            var self = this;
            var system = this.qg.getSystemInfoSync();
            this._bannerNode = this.qg.createBannerAd({ posId: "608580", adIntervals: 30 });
            this._bannerNode.onResize(function (e) {
                self._bannerNode.style = { top: system.windowHeight - e.height };
            });
            this._bannerNode.onLoad(function () {
                if (!self.isShowBanner)
                    self._bannerNode.hide();
            });
            this._bannerNode.onError(function (err) {
                console.log("Banner error:", err);
            });
        }
        showBanner() {
            if (this._bannerNode) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode)
                this._bannerNode.hide();
            this.isShowBanner = false;
        }
        showADVideo(caller, onComplete, reason, args) {
            var self = this;
            if (typeof (this.qg.createRewardedVideoAd) == 'undefined')
                return;
            if (this.isLoading)
                return;
            this.showLoading();
            this.noticeOpenVideo(reason);
            this.onADViewComplete = Handler.create(caller, onComplete, args);
            if (!this._videoNode) {
                this._videoNode = this.qg.createRewardedVideoAd({ posId: "608588" });
                this._videoNode.onLoad(() => {
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showVidwo(reason);
                    ToolSDK.stopSound();
                });
                this._videoNode.onError((err) => {
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showToast("暂无视频", 2000);
                    self.onADViewComplete.runWith(false);
                    ToolSDK.replaySound();
                });
            }
            if (this.showTime)
                clearTimeout(this.showTime);
            this._videoNode.load();
            this.showTime = setTimeout(this.hideLoading, 3000);
        }
        showVidwo(reason) {
            var self = this;
            if (this.isShowBanner)
                this._bannerNode.hide();
            this._videoNode.show();
            this.showVideoTime = Times$1.now;
            this._closeCallback && this._videoNode.offClose(this._closeCallback);
            this._closeCallback = function (res) {
                if (self.isShowBanner)
                    self._bannerNode.show();
                self.resumeVideoRecord();
                if (Times$1.now - self.showVideoTime >= 30 * 1000) {
                    if (!res)
                        res = { isEnded: true };
                    else
                        res.isEnded = true;
                }
                if (res && res.isEnded || res === undefined) {
                    self.noticeCloseVideo(reason);
                    self.onADViewComplete.runWith(true);
                }
                else {
                    self.onADViewComplete.runWith(false);
                }
                ToolSDK.replaySound();
            };
            this._videoNode.onClose(this._closeCallback);
        }
        showLoading() {
            this.isLoading = true;
            if (this.qg && this.qg.showLoading) {
                this.qg.showLoading({ title: "请求中，请稍后..." });
            }
        }
        hideLoading() {
            this.isLoading = false;
            if (this.qg && this.qg.hideLoading) {
                this.qg.hideLoading({});
            }
        }
        createNative(navigateId) {
            let nativeNode = this.qg.createNativeAd({
                posId: navigateId
            });
            return nativeNode;
        }
        showToast(message, time) {
            this.qg.showToast({
                title: message,
                icon: "none",
                duration: time
            });
        }
        vibrateShort() {
            this.qg.vibrateShort({
                success: function () {
                    console.log("log----vibrateShort-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        vibrateLong() {
            this.qg.vibrateLong({
                success: function () {
                    console.log("log----vibrateLong-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            let loadTask = this.qg.loadSubpackage({
                name: pack,
                success: function (info) {
                    if (comlete) {
                        comlete(true);
                    }
                },
                fail: function (err) {
                    if (comlete) {
                        comlete(false);
                    }
                    console.info('加载分包 sub1Name 失败', err, pack);
                },
                complete: function () {
                }
            });
            loadTask.onProgressUpdate(res => {
                console.log('下载进度', res.progress);
                console.log('已经下载的数据长度', res.totalBytesWritten);
                console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite);
                if (progress) {
                    progress(res);
                }
            });
        }
        createGameBannerAd() {
            let self = this;
            var system = this.qg.getSystemInfoSync();
            this.gameBannerAd = this.qg.createGameBannerAd({
                adUnitId: "608579",
                style: {
                    top: system.windowHeight,
                    left: 0,
                    orientation: 'horizontal'
                }
            });
            this.gameBannerAd.onResize(function (e) {
                self.gameBannerAd.style = {
                    top: system.windowHeight,
                    left: system.windowWidth,
                };
            });
            console.log("<<<<<<<<<<创建横幅互推盒子>>>>>>>>>", this.gameBannerAd);
        }
        showGameBanner() {
            console.log("<<<<<<<<<<展示互推盒子>>>>>>>>>", this.gameBannerAd);
            if (!this.gameBannerAd) {
                this.createGameBannerAd();
            }
            if (this.gameBannerAd) {
                this.gameBannerAd.show();
            }
        }
        hideGameBanner() {
            if (this.gameBannerAd) {
                this.gameBannerAd.hide();
            }
        }
        createGamePortalAd() {
        }
        showGamePortal() {
            var self = this;
            if (this.qg.getSystemInfoSync().platformVersionCode >= 1076) {
                var gamePortalAd = this.qg.createGamePortalAd({
                    adUnitId: "608589"
                });
            }
            else {
                console.log('快应用平台版本号低于1076，暂不支持互推盒子相关 API');
            }
            gamePortalAd.load().then(function () {
                console.log('load success');
            }).catch(function (error) {
                console.log('load fail with:' + error.errCode + ',' + error.errMsg);
            });
            gamePortalAd.onLoad(function () {
                console.log('互推盒子九宫格广告加载成功');
                gamePortalAd.show();
            });
            gamePortalAd.onError(function (err) {
                console.log("ERR === ", JSON.stringify(err));
                self.showToast("暂无更多游戏", 1000);
            });
        }
        isSupportShareVideo() {
            return false;
        }
        get addelay() {
            if (!this.data)
                return 0;
            return this.data.BtnTime * 1000;
        }
        setUserCloudStorage(key, value) {
            let arr = { key: key, value: value };
            this.qg.setUserCloudStorage({
                KVDataList: arr,
                success: (res) => {
                    console.log("OPPO缓存调用成功");
                },
                fail: (res) => {
                    console.log("OPPO缓存调用失败 ：", JSON.stringify(res));
                },
                complete: (res) => {
                    console.log("OPPO缓存调用完成");
                },
            });
        }
        getUserCloudStorage(key) {
            this.qg.getUserCloudStorage({
                keyList: [key],
                success: (res) => {
                    console.log("获取缓存调用成功 :", JSON.stringify(res.KVDataList));
                    return res.KVDataList;
                },
                fail: (res) => {
                    console.log("获取调用失败 : ", JSON.stringify(res));
                },
                complete: (res) => {
                    console.log("调用完成");
                },
            });
        }
        setClipboardData(data, callback) {
            if (this.qg && this.qg.setClipboardData) {
                this.qg.setClipboardData({
                    data,
                    success(res) {
                        console.log(`setClipboardData调用成功`);
                        callback(true);
                    },
                    fail(res) {
                        console.log(`setClipboardData调用失败`);
                        callback(false);
                    },
                });
            }
            else {
                callback(true);
            }
        }
        getClipboardData(callback) {
            if (this.qg && this.qg.getClipboardData) {
                this.qg.getClipboardData({
                    success(res) {
                        console.log("getClipboardData调用成功：" + `${res.data}`);
                        callback(res.data);
                    },
                    fail(res) {
                        console.log(`getClipboardData调用失败`);
                        callback("");
                    },
                });
            }
            else {
                callback("");
            }
        }
        showCustomAd(isPatch) {
            this.closeCustomAd();
            this.hideBanner();
            this.qg.getSystemInfoSync();
            let customId = "589204";
            let idList = ["589204", "589204"];
            if (isPatch == "big") {
                customId = idList[ToolSDK.random(0, 1)];
                if (this.qg.createCustomAd) {
                    this._customAd = this.qg.createCustomAd({
                        posId: customId,
                        style: {}
                    });
                    this._customAd.onError(err => {
                        console.log("原生模板广告加载失败", err);
                    });
                    this._customAd.show().then(() => {
                        console.log('原生模板广告展示完成');
                    }).catch((err) => {
                        console.log('原生模板广告展示失败', JSON.stringify(err));
                    });
                }
            }
            else {
                customId = idList[ToolSDK.random(0, 1)];
                if (this.qg.createCustomAd) {
                    this._customAd = this.qg.createCustomAd({
                        posId: customId,
                        style: {}
                    });
                    this._customAd.onError(err => {
                        console.log("原生模板广告加载失败", err);
                    });
                    this._customAd.show().then(() => {
                        console.log('原生模板广告展示完成');
                    }).catch((err) => {
                        console.log('原生模板广告展示失败', JSON.stringify(err));
                    });
                }
            }
        }
        closeCustomAd() {
            if (this._customAd) {
                this._customAd.hide();
                this._customAd.destroy();
            }
        }
    }

    class SDKData {
        static get data() {
            return {
                PlatType: PlatType.AUTO,
                callBack: () => { },
                use_count_banner: false,
                fgui_sdk_path: "res/fgui/",
                GAMEID: "20323",
                VIVO_VERSION: "1.0.0",
                OPPO_VERSION: "1.0.0",
                TOUTIAO_VERSION: "1.0.1",
                MOMOYU_VERSION: "1.0.0",
                TOUTIAO_GAME_NAME: "开家大旅馆",
                TOUTIAO_SHARECONTENT: [
                    "开家大旅馆!壮大你的队伍！"
                ],
                SHARE_CONTENT: [
                    "开家大旅馆!壮大你的队伍！"
                ],
                TOUTIAO_SHARETEMPLATEID: [
                    "36i9j0bek1lflatfwd"
                ],
                WECHAT_GAME_NAME: "开家大旅馆",
                WECHAT_VERSION: "1.0.1",
                WECHAT_SHARECONTENT: [
                    "开家大旅馆"
                ],
                WECHAT_SHARETEMPLATEID: [
                    { title: "开家大旅馆!壮大你的队伍！", iconPath: "https://wxoss.jpsdk.com/game/20229/wechat/share/shareIcon.jpg" }
                ],
                HBS_VERSION: "1.0.0",
                GAME233_APPKEY: "1606253762",
                GAME233_POS: "999000000",
                PltDefaultConfig: [
                    {
                        key: PlatType.TOUTIAO,
                        value: {
                            BannerAd: "3cklnmjbk8bk4c0cmi",
                            InterstAd: "225oh2fojh29l2215h",
                            InterstAds: ["225oh2fojh29l2215h"],
                            IntervalAdTime: 3,
                            NativeAvd: false,
                            RewardAd: "n7c91ofp84d3bl03h3",
                            addelay: 0,
                            appid: "tt1cd16a6c83ef3e2f02",
                            navigateAppList: [],
                            Offcitys: ["北京", "深圳", "广州", "深圳", "东莞", "天津",
                                "长沙", "武汉", "西安", "杭州", "宁波", "重庆", "南京", "苏州", "济南", "青岛", "福州"],
                            OPLISTS: [],
                            REWARDAD_MAX: 0,
                            REWARDAD_RATE: 0,
                            REWARDAD_RESTART_GAME: 0,
                            HIDE_REWARDAD_RATE: 0,
                            HIDE_REWARDAD_MAX: 0,
                            shareList: [],
                            Shareid: "4an66cif1mgj8a3g33",
                            Version: "1.0.0",
                            playerSkinShield: "2,3,4,5,6",
                            "is_AddDesk": { state: "0" },
                            "is_AvdFloat": { state: "0" },
                            "is_AvdList": { state: "0" },
                            "is_GameNative": { state: "0", interval: 0 },
                            "is_MoreGameBtn": { state: "1" },
                            "is_PropSceneUI": { state: "0", interval: 0 },
                            "is_banner": { state: "1", interval: 0 },
                            "ad_all_interval": 0,
                            Add_attention: 0
                        }
                    }, {
                        key: PlatType.OPPO,
                        value: {
                            BannerAd: "317030",
                            IntervalAdTime: 0,
                            NativeAd: 317032,
                            InterstAd: 317033,
                            RewardAd: "317031",
                            ad_all_interval: 10,
                            aderrormaxcount: 0,
                            aderrorrate: 0.2,
                            advertmaxcount: 5,
                            appid: "30521975",
                            GameBanner: "317033",
                            GamePortal: "304450",
                            is_AddDesk: { state: "1" },
                            is_AvdFloat: { state: "0" },
                            is_AvdList: { state: "0" },
                            is_GameNative: { state: "1", interval: 5 },
                            is_MoreGameBtn: { state: "1" },
                            is_PropSceneUI: { state: "0", interval: 5 },
                            is_banner: { state: "1", interval: "0" },
                            isaggreation: 5,
                            navigateAppList: [],
                            Offcitys: ["北京", "深圳", "广州", "深圳", "东莞", "天津", "长沙",
                                "武汉", "西安", "杭州", "宁波", "重庆", "南京", "苏州", "济南", "青岛", "福州", "厦门", "郑州"],
                            shareList: [],
                            textDelay: 0,
                            Version: "1.0.0",
                            waterfall: "0",
                        }
                    }, {
                        key: PlatType.KUAIGAME,
                        value: {
                            BannerAd: "",
                            IntervalAdTime: 0,
                            NativeAd: { HomeNativeAd: 297428, WinNativeAd: 297428, FailNativeAd: 297428 },
                            NativeAvd: false,
                            RewardedVideoAd: "2300000798_01",
                            ad_all_interval: 10,
                            aderrormaxcount: 0,
                            aderrorrate: 0.2,
                            advertmaxcount: 5,
                            appid: "ks709035469824743963",
                            is_AddDesk: { state: "0" },
                            is_AvdFloat: { state: "0" },
                            is_AvdList: { state: "0" },
                            is_GameNative: { state: "1", interval: 5 },
                            is_MoreGameBtn: { state: "0" },
                            is_PropSceneUI: { state: "0", interval: 5 },
                            is_banner: { state: "0", interval: "0" },
                            isaggreation: 5,
                            navigateAppList: [],
                            Offcitys: ["北京", "深圳", "广州", "深圳", "东莞", "天津", "长沙",
                                "武汉", "西安", "杭州", "宁波", "重庆", "南京", "苏州", "济南", "青岛", "福州", "厦门", "郑州"],
                            shareList: [],
                            textDelay: 0,
                            version: "1.0.0",
                            waterfall: "0",
                        }
                    }, {
                        key: PlatType.WECHAT,
                        value: {
                            BannerAd: "adunit-f29c29c1a91e68c7",
                            IntervalAdTime: 0,
                            NativeAd: { HomeNativeAd: 297428, WinNativeAd: 297428, FailNativeAd: 297428 },
                            NativeAvd: false,
                            RewardedVideoAd: "adunit-9ef2c188676efa66",
                            InterstAd: "adunit-57b0536a60c5cd2e",
                            ad_all_interval: 10,
                            aderrormaxcount: 0,
                            aderrorrate: 0.2,
                            advertmaxcount: 5,
                            appid: "wxf7dd065df7d2de01",
                            is_AddDesk: { state: "0" },
                            is_AvdFloat: { state: "1" },
                            is_AvdList: { state: "1" },
                            is_GameNative: { state: "0", interval: 5 },
                            is_MoreGameBtn: { state: "1" },
                            is_PropSceneUI: { state: "1", interval: 5 },
                            is_banner: { state: "1", interval: "0" },
                            isaggreation: 5,
                            navigateAppList: [],
                            Offcitys: ["北京", "深圳", "广州", "深圳", "东莞", "天津", "长沙",
                                "武汉", "西安", "杭州", "宁波", "重庆", "南京", "苏州", "济南", "青岛", "福州", "厦门", "郑州"],
                            shareList: [{ "title": "痘痘，黑头，粉刺一个都不能留！ ", "iconPath": "https://wxoss.jpsdk.com/game/20229/wechat/share/shareIcon.jpg" }],
                            textDelay: 0,
                            version: "1.0.1",
                            waterfall: "0",
                            customCfg: [{
                                    id: 'adunit-a81d400ea6ed045c',
                                    top: 900,
                                    left: 0,
                                    side: 0
                                }, {
                                    id: 'adunit-95562d89d1708b96',
                                    top: 900,
                                    left: -68,
                                    side: 2
                                }, {
                                    id: 'adunit-0c49be13bb0f80fb',
                                    top: 1100,
                                    left: -375,
                                    side: 1
                                }, {
                                    id: 'adunit-027a65cb93648b70',
                                    top: 380,
                                    left: 0,
                                    side: 0
                                }]
                        }
                    }
                ]
            };
        }
    }

    class SxyGame {
        constructor() {
            this._hasInitPlat = false;
        }
        static get instance() {
            return SxyGame._instance || (SxyGame._instance = new SxyGame);
        }
        init() {
            this.getPlatform();
            SxyGame.openid = this.getOpenid();
            this.getUUID();
            this.setNewPlayer();
            return this.checkSDK();
        }
        getPlatform() {
            if (this._hasInitPlat)
                return;
            this._hasInitPlat = true;
            if (typeof window["tt"] != "undefined") {
                SxyGame.platform = window["tt"];
                SxyGame.platformFlag = true;
                console.log("当前平台：头条");
            }
            else if (typeof wx != "undefined") {
                SxyGame.platform = wx;
                SxyGame.platformFlag = true;
                console.log("当前平台：微信");
            }
            else {
                window.getStorageSync = function (key) {
                    return window.localStorage.getItem(key);
                };
                window.setStorageSync = function (key, value) {
                    window.localStorage.setItem(key, value);
                };
                window.request = function (data) {
                    var xmlhttp;
                    if (window.XMLHttpRequest) {
                        xmlhttp = new XMLHttpRequest();
                    }
                    else {
                        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                    }
                    xmlhttp.onreadystatechange = function () {
                        if (xmlhttp.readyState == 4) {
                            if (!!data.success && typeof data.success === 'function') {
                                var jsonData = null;
                                if (xmlhttp.responseText && xmlhttp.responseText != "") {
                                    jsonData = JSON.parse(xmlhttp.responseText);
                                }
                                data.success({
                                    code: xmlhttp.status,
                                    data: jsonData
                                });
                            }
                        }
                    };
                    var url = data.url;
                    if (data.data) {
                        let params = Object.keys(data.data).map(function (key) {
                            return encodeURIComponent(key) + "=" + encodeURIComponent(data.data[key]);
                        }).join("&");
                        url += "?" + params;
                    }
                    xmlhttp.open("GET", url, true);
                    xmlhttp.send();
                };
                SxyGame.platform = window;
            }
        }
        static sendVideo(data) {
            SxyGame.instance.send(data, "video");
        }
        static sendEvent(name, params = "") {
            let data = {
                'eventName': name,
                'params': params
            };
            SxyGame.instance.send(data, "event");
        }
        checkSDK() {
            return new Promise((resolve, reject) => {
                SxyGame.gameId = SDKData.data.GAMEID;
                SxyGame.getLocation = SDKConfig.getLocation;
                SxyGame.useOpenid = SDKConfig.useOpenid;
                if (!SxyGame.gameId)
                    console.error('缺少gameId配置');
                SxyGame.platform.request({
                    url: SxyGame.logerUrl + "/static/app.json",
                    method: "GET",
                    success: function (res) {
                        if (res.code == 200 || res.statusCode == 200) {
                            if (GameSDK.compareVersion(res.data.data.version, SxyGame.localVersion) > 0) {
                                console.error("您的上报SDK不是最新版本，请尽快升级！");
                            }
                            resolve();
                        }
                        else {
                            reject();
                        }
                    }
                });
            });
        }
        getUUID() {
            var uuid = '';
            try {
                uuid = SxyGame.platform.getStorageSync('sxy_uuid');
            }
            catch (e) {
                uuid = "uuid_default";
            }
            if (!uuid) {
                uuid = this.create_uuid();
                try {
                    SxyGame.platform.setStorageSync("sxy_uuid", uuid);
                }
                catch (e) {
                    SxyGame.platform.setStorageSync("sxy_uuid", 'uuid_default');
                }
            }
            return uuid;
        }
        setNewPlayer() {
            var reg_date = SxyGame.platform.getStorageSync('sxy_reg_date');
            var today = SxyGame.formatDate(new Date());
            if (!reg_date) {
                SxyGame.platform.setStorageSync("sxy_new_player", true);
                SxyGame.platform.setStorageSync("sxy_reg_date", today);
            }
            else {
                if (today > reg_date) {
                    SxyGame.platform.setStorageSync("sxy_new_player", false);
                }
            }
        }
        static formatDate(date) {
            var myyear = date.getFullYear();
            var mymonth = date.getMonth() + 1;
            var myweekday = date.getDate();
            if (mymonth < 10) {
                mymonth = "0" + mymonth;
            }
            if (myweekday < 10) {
                myweekday = "0" + myweekday;
            }
            return (myyear + "-" + mymonth + "-" + myweekday);
        }
        getOpenid() {
            return SxyGame.platform.getStorageSync("sxy_openid") || "";
        }
        create_uuid() {
            function e() {
                return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
            }
            return e() + e() + e() + e() + e() + e() + e() + e();
        }
        send(data, action) {
            if (SxyGame.useOpenid) {
                this.getOpenid();
                if (!SxyGame.openid) {
                    console.error('没有openid，此次上报失败');
                    return;
                }
            }
            var that = this;
            new Promise(function (resolve, reject) {
                SxyGame.paramJoin(data);
                data.gameId = SxyGame.gameId;
                data.platform = GameSDK.type;
                data.session_key = SxyGame.session_key || "";
                data.openid = SxyGame.openid || "";
                data.uuid = that.getUUID();
                data.avatar = SxyGame.avatar || "";
                data.action = action;
                SxyGame.platform.request({
                    url: SxyGame.logerUrl + "/index/api.do",
                    data: data,
                    header: {},
                    method: "GET",
                    fail: function () {
                        resolve("");
                    },
                    success: function (res) {
                        resolve(200 == res.statusCode ? "" : "status error");
                    }
                });
            });
        }
        sendPlayerStay(newPlayer, time) {
            let data = {
                newPlayer: newPlayer,
                status: time >= 300
            };
            this.send(data, "staylong");
        }
        sendOpenid(openid) {
            if ("" === openid || !openid) {
                return console.error("openID不能为空");
            }
            SxyGame.platform.setStorageSync("sxy_openid", openid);
        }
        static paramJoin(data) {
            data.newPlayer = SxyGame.platform.getStorageSync('sxy_new_player');
        }
    }
    SxyGame.localVersion = "1.2.0";
    SxyGame.logerUrl = "https://loger.jpsdk.com";
    SxyGame.gameId = '';
    SxyGame.openid = '';
    SxyGame.getLocation = false;
    SxyGame.useOpenid = false;
    SxyGame.platformFlag = false;
    SxyGame.stage = {
        "onStart": function (data) {
            data.method = 'start';
            SxyGame.instance.send(data, "stage");
        },
        "onRunning": function (data) {
            data.method = 'running';
            SxyGame.instance.send(data, "stage");
        },
        "onEnd": function (data) {
            data.method = 'end';
            SxyGame.instance.send(data, "stage");
        }
    };

    class Pool {
        constructor(value) {
            this.value = null;
            this.pools = new Map();
            this.value = value;
        }
        get(path) {
            let value = this.pool(path).pop();
            if (!value)
                value = this.value.getRes(path);
            this.value.clearAttribute(value);
            if (this.value.onGet)
                this.value.onGet(value);
            return value;
        }
        put(value, path) {
            this.value.clearAttribute(value);
            let pool = this.pool(path);
            if (pool.length > this.value.maxCount) {
                if (this.value.destroy)
                    this.value.destroy(value);
            }
            else {
                if (this.value.onPut)
                    this.value.onPut(value);
                pool.push(value);
            }
        }
        pool(path) {
            let pool = this.pools.get(path);
            if (!pool) {
                pool = [];
                this.pools.set(path || "pool", pool);
            }
            return pool;
        }
        clear() {
            this.pools.forEach(pool => {
                for (let value of pool) {
                    this.value.clearAttribute(value);
                    if (this.value.destroy)
                        this.value.destroy(value);
                }
                pool.length = 0;
            });
            this.pools.clear();
        }
    }

    class TipsItem extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.c_text_str = null;
        }
        init(str) {
            this.c_text_str.text = str;
            this.y = 200;
            this.x = Laya.stage.width / 2;
            UIMgr.instance.getParent(E_UI_Parent.tip).addChild(this);
            this.alpha = 0;
            this.onStartHandler();
        }
        onStartHandler() {
            Laya.Tween.to(this, { alpha: 100 }, 500, null, Laya.Handler.create(this, this.onCeneterHandler));
        }
        onCeneterHandler() {
            Laya.Tween.to(this, { alpha: 100 }, 1000, null, Laya.Handler.create(this, this.onEndHandler));
        }
        onEndHandler() {
            Laya.Tween.to(this, { alpha: 0 }, 500, null, Laya.Handler.create(this, this.onMoveHandler));
        }
        onMoveHandler() {
            TipMgr.Int.pool.put(this);
        }
    }
    class UIDiamondsFlyItem extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr.instance.getParent(E_UI_Parent.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr.Int.poolGold.put(this);
        }
    }
    class UIXingzuoFlyItem extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr.instance.getParent(E_UI_Parent.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr.Int.poolXingzou.put(this);
        }
    }
    class UITuziFlyItem extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.v2_temp = new Laya.Vector2();
        }
        init(startPoint, speed, id, endPos) {
            let targetPos = endPos;
            this.setXY(startPoint.x, startPoint.y);
            this.v2_temp.x = startPoint.x - targetPos.x;
            this.v2_temp.y = startPoint.y - targetPos.y;
            let duration = Math.sqrt(this.v2_temp.x * this.v2_temp.x + this.v2_temp.y * this.v2_temp.y) / speed;
            Laya.Tween.to(this, { x: targetPos.x, y: targetPos.y }, duration, null, Laya.Handler.create(this, this.tweenCb));
            UIMgr.instance.getParent(E_UI_Parent.diamondsFly).addChild(this);
        }
        tweenCb() {
            TipMgr.Int.poolTuzi.put(this);
        }
    }
    class TipMgr {
        constructor() {
            this.pool = new Pool({
                maxCount: 5,
                getRes: () => FguiBase$3.createPackageItem("common", "comp_tips", TipsItem),
                clearAttribute: (value) => {
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolGold = new Pool({
                maxCount: 15,
                getRes: () => FguiBase$3.createPackageItem("common", "comp_diamonds", UIDiamondsFlyItem),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolXingzou = new Pool({
                maxCount: 15,
                getRes: () => FguiBase$3.createPackageItem("common", "comp_keyFly", UIXingzuoFlyItem),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this.poolTuzi = new Pool({
                maxCount: 15,
                getRes: () => FguiBase$3.createPackageItem("common", "comp_tuzifly", UITuziFlyItem),
                clearAttribute: (value) => {
                    Laya.Tween.clearAll(value);
                    value.removeFromParent();
                },
                destroy: (value) => {
                    value.dispose();
                }
            });
            this._create = false;
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new TipMgr;
            }
            return this._Int;
        }
        showTips(str) {
            if (!this._create) {
                this._create = true;
                FguiBase$3.setExtension("common", "comp_tips", TipsItem);
            }
            this.pool.get().init(str);
        }
        showGold(startPoint, speed, id, endPos = new Laya.Vector2(630, 120)) {
            if (!this._create) {
                this._create = true;
                FguiBase$3.setExtension("common", "comp_diamonds", UIDiamondsFlyItem);
            }
            this.poolGold.get().init(startPoint, speed, id, endPos);
        }
        showXingzuo(startPoint, speed, id, endPos = new Laya.Vector2(630, 140)) {
            if (!this._create) {
                this._create = true;
                FguiBase$3.setExtension("common", "comp_keyFly", UIXingzuoFlyItem);
            }
            this.poolXingzou.get().init(startPoint, speed, id, endPos);
        }
        showTuzi(startPoint, speed, id, endPos = new Laya.Vector2(630, 180)) {
            if (!this._create) {
                this._create = true;
                FguiBase$3.setExtension("common", "comp_tuzifly", UITuziFlyItem);
            }
            this.poolTuzi.get().init(startPoint, speed, id, endPos);
        }
    }

    var EPropNameById$1;
    (function (EPropNameById) {
        EPropNameById[EPropNameById["diamonds"] = 1] = "diamonds";
        EPropNameById[EPropNameById["star"] = 2] = "star";
        EPropNameById[EPropNameById["Zuanshi"] = 3] = "Zuanshi";
    })(EPropNameById$1 || (EPropNameById$1 = {}));
    var EPropNameByIdZh$1;
    (function (EPropNameByIdZh) {
        EPropNameByIdZh[EPropNameByIdZh["\u94BB\u77F3"] = 1] = "\u94BB\u77F3";
        EPropNameByIdZh[EPropNameByIdZh["\u91D1\u5E01"] = 2] = "\u91D1\u5E01";
    })(EPropNameByIdZh$1 || (EPropNameByIdZh$1 = {}));
    class LogicProp$1 {
        initData() {
        }
        add(id, count, isShowUI = false, mul = 1, closeCb = null) {
            let key = this.getCacheKey(id);
            let cur = this.get(id);
            let _useNumber = Maths$1.clampf(cur + count * mul, 0, this.config(id).MaxCount);
            if (cur != _useNumber)
                LocalCache$1.set(key, _useNumber);
            EventMgr.Int.emit(EventType.PropChange, id);
            if (isShowUI) {
                if (id == EPropNameById$1.diamonds) {
                    UIMgr.instance.openUI("comp_jinbidonghua1");
                }
                else if (id == EPropNameById$1.Zuanshi) {
                    UIMgr.instance.openUI("comp_jinbidonghua2");
                }
            }
        }
        has(id, count, isShowUI = false) {
            if (this.get(id) < count) {
                if (isShowUI) {
                    TipMgr.Int.showTips("钻石不足");
                }
                return false;
            }
            return true;
        }
        config(id) {
            return GameData.getPropItem(id);
        }
        get(id) {
            let key = this.getCacheKey(id);
            let count = this.config(id).StartCount;
            count = LocalCache$1.get(key, count);
            return count;
        }
        getCacheKey(type) {
            return "Prop_" + type;
        }
        get diamonds() {
            return this.get(EPropNameById$1.diamonds);
        }
        set diamonds(value) {
            let key = this.getCacheKey(EPropNameById$1.diamonds);
            LocalCache$1.set(key, value);
        }
    }
    LogicProp$1.instance = new LogicProp$1();

    class DesMg {
        static encode(str) {
            var bytes = this.utf8Encode(str);
            var key = bytes.slice(0, 2);
            for (var n = 0; n < bytes.length; n++) {
                var a = bytes[n];
                a = a ^ key[n % 2];
                key[n + 2] = a;
            }
            return this.encode_base(key, true);
        }
        static decode(str) {
            var bytes = this.decode_base(str, true);
            var s = bytes.slice(0, 2);
            var t = bytes.slice(2, bytes.length);
            for (var n = 0, r = t.length; n < r; n++) {
                var a = t[n];
                a = a ^ s[n % 2];
                t[n] = a;
            }
            return this.utf8Decode(t);
        }
        static encode_base(str, isDes) {
            var out = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            var bytes = isDes ? str : this.utf8Encode(str);
            while (i < bytes.length) {
                chr1 = bytes[i++];
                chr2 = bytes[i++];
                chr3 = bytes[i++];
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                }
                else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                out = out +
                    this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
                    this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
            }
            return out;
        }
        static decode_base(str, isDes) {
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            str = str.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            var bytes = [];
            while (i < str.length) {
                enc1 = this._keyStr.indexOf(str.charAt(i++));
                enc2 = this._keyStr.indexOf(str.charAt(i++));
                enc3 = this._keyStr.indexOf(str.charAt(i++));
                enc4 = this._keyStr.indexOf(str.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                bytes.push(chr1);
                if (enc3 != 64) {
                    bytes.push(chr2);
                }
                if (enc4 != 64) {
                    bytes.push(chr3);
                }
            }
            if (isDes === true) {
                return bytes;
            }
            var out = this.utf8Decode(bytes);
            return out;
        }
        static utf8Encode(string) {
            string = string.replace(/\r\n/g, "\n");
            var bytes = [];
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    bytes.push(c);
                }
                else if ((c > 127) && (c < 2048)) {
                    bytes.push(c(c >> 6) | 192);
                    bytes.push((c & 63) | 128);
                }
                else {
                    bytes.push((c >> 12) | 224);
                    bytes.push(((c >> 6) & 63) | 128);
                    bytes.push((c & 63) | 128);
                }
            }
            return bytes;
        }
        static utf8Decode(bytes) {
            var str = "";
            var i = 0;
            var c, c2, c3 = 0;
            while (i < bytes.length) {
                c = bytes[i];
                if (c < 128) {
                    str += String.fromCharCode(c);
                    i++;
                }
                else if ((c > 191) && (c < 224)) {
                    c2 = bytes[i + 1];
                    str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                }
                else {
                    c2 = bytes[i + 1];
                    c3 = bytes[i + 2];
                    str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return str;
        }
    }
    DesMg._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    class UserData {
        static init() {
            var data = LocalCache$1.get(UserData.userDataKey, "");
            if (data != null && data != undefined && data != "") {
                this._userData = JSON.parse(data);
            }
            else {
                UserData._userData = { userid: 1, openid: "0", nickname: "游客玩家", session_key: "", avatar: "", plat: 0, score: 0, fruit_num: 0, sesame_score: 0, sesame_num: 0, durian_score: 0, durian_num: 0, hotpot_score: 0, hotpot_num: 0, endless_score: 0, endless_num: 0, kfc_score: 0, kfc_num: 0, isGetUser: false, info: {} };
            }
        }
        static get isSdkLoging() {
            return this._isSdkLogin;
        }
        static login(data) {
        }
        static _loginServer(callback = undefined, target = undefined, data1) {
            var data = {
                uuid: SxyGame.instance.getUUID(),
                platform: 1,
                code: data1.code,
                anonymousCode: data1.anonymousCode
            };
            this.request("/api.login", data, function (res) {
                if (res.code == -1) {
                    console.log("---------登陆失败----------");
                }
                else {
                    console.log("---------登陆成功----------");
                    let data = DesMg.decode(res.data);
                    UserData.logicSuccess(data);
                }
            }.bind(this), function () {
                this._isSdkLogin = false;
            }.bind(this), false);
            this._isSdkLogin = true;
        }
        static LogicWeb() {
        }
        static _loginServerWeb(callback = undefined, target = undefined, data1) {
            var data = {
                uuid: SxyGame.instance.getUUID(),
                platform: 1,
            };
            this.request("/api.login", data, function (res) {
                if (res.code == -1) {
                    console.log("---------登陆失败----------");
                }
                else {
                    console.log("---------登陆成功----------");
                    let data = DesMg.decode(res.data);
                    UserData.logicSuccess(data);
                }
            }.bind(this), function () {
                this._isSdkLogin = false;
            }.bind(this), false);
            this._isSdkLogin = true;
        }
        static get userData() {
            return this._userData;
        }
        static logicSuccess(info) {
            try {
                var data = JSON.parse(info);
                if (data.userid)
                    UserData.userData.userid = data.userid;
                if (data.session_key)
                    UserData.userData.session_key = data.session_key;
                if (data.openid)
                    UserData.userData.openid = data.openid;
                if (data.avatar)
                    UserData.userData.avatar = data.avatar;
                if (data.nickname)
                    UserData.userData.nickname = data.nickname;
                if (data.info)
                    UserData.userData.info = data.info;
                if (data.score)
                    LogicProp$1.instance.maxScore = data.score;
                this.saveUserData();
            }
            catch (e) {
                console.log("解析数据错误");
            }
        }
        static saveUserData() {
            LocalCache$1.set(UserData.userDataKey, JSON.stringify(this.userData));
        }
        static startSaveInfo() {
        }
        static getUserData(callback, target = undefined, isTips = true) {
            if (!this._isSdkLogin || this.userData.isGetUser) {
                callback.call(target, true);
            }
            else {
                GameSDK.getUserInfo(function (res) {
                    console.log("平台:", res);
                    if (res == undefined) {
                        callback.call(target, false);
                        return;
                    }
                    res.avatarUrl = res.avatarUrl.replace(/.image/g, '.jpg');
                    UserData.userData.nickname = res.nickName;
                    UserData.userData.avatar = res.avatarUrl;
                    UserData.userData.isGetUser = true;
                    var data = {
                        userid: UserData.userData.userid,
                        nickname: UserData.userData.nickname,
                        avatar: UserData.userData.avatar
                    };
                    this.request("/api.setUser", data, function (res) {
                        if (res.code == -1) {
                            console.log("---------更新玩家信息失败----------");
                        }
                        else {
                            console.log("---------更新玩家信息成功----------");
                        }
                    }.bind(this), function () {
                    }.bind(this), false);
                    UserData.saveUserData();
                    callback.call(target, true);
                }, isTips, this);
            }
        }
        static saveScore(score, compose_num, info) {
            var data = {
                userid: UserData.userData.userid,
                score: score,
                info: info
            };
            this.request("/api.update", data, function (res) {
                if (res.code == -1) {
                    console.log("---------更新分数失败----------");
                }
                else {
                    console.log("---------更新分数成功----------");
                }
            }.bind(this), function () {
            }.bind(this), false);
        }
        static requestRankList(callback, target = undefined) {
            var msg = {
                userid: UserData.userData.userid
            };
            this.request("/api.getRank", msg, function (res) {
                let data = DesMg.decode(res.data);
                callback.call(target, res.code, JSON.parse(data));
            }.bind(this), function () {
                console.log("排行榜信息失败");
            }.bind(this), false);
        }
        static getPlayerDetail(player, callback) {
            if (player.info != undefined) {
                callback(player.info);
                return;
            }
            var msg = {
                userid: player.userid,
            };
            this.request("/api.getInfo", msg, function (res) {
                console.log("获取玩家详情");
                if (res.code != 0) {
                    return;
                }
                let data = DesMg.decode(res.data);
                player.info = JSON.parse(data).info;
                callback(player.info);
            }.bind(this), function () {
                console.log("获取玩家详情失败");
            }.bind(this), false);
        }
        static request(method, data, callback, failBack, isOpenId = true) {
            if (isOpenId) {
                data.openid = UserData._userData.openid;
            }
            this.httpRequest({
                url: UserData.serverUrl + method,
                data: DesMg.encode(JSON.stringify(data)),
                success: (res) => {
                    callback && callback(res.data);
                },
                fail: (res) => {
                    failBack();
                }
            });
        }
        static httpRequest(data) {
            console.log("PlatformVirtual.request", data);
            var xmlhttp;
            if (window.XMLHttpRequest) {
                xmlhttp = new XMLHttpRequest();
            }
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState !== 4) {
                    return;
                }
                if (xmlhttp.status == 200) {
                    if (data.success) {
                        var jsonData = null;
                        if (xmlhttp.responseText && xmlhttp.responseText != "")
                            jsonData = JSON.parse(xmlhttp.responseText);
                        data.success({ code: xmlhttp.status, data: jsonData });
                    }
                }
            };
            xmlhttp.ontimeout = function (e) {
                if (data.fail) {
                    data.fail();
                }
            };
            xmlhttp.timeout = 2000;
            var url = data.url;
            if (data.data) {
                let params = "data=" + data.data;
                url += "?" + params;
            }
            xmlhttp.open("GET", url, true);
            xmlhttp.send();
        }
        static decode(data) {
            let bytes = this.getBytes(data);
            for (var i = 0; i < bytes.length; i++) {
                bytes[i] = bytes[i] ^ 359;
            }
            return String.fromCharCode.apply(null, new Uint8Array(bytes));
        }
        static getBytes(str) {
            var ch, st, re = [];
            for (var i = 0; i < str.length; i++) {
                ch = str.charCodeAt(i);
                st = [];
                do {
                    st.push(ch & 0xFF);
                    ch = ch >> 8;
                } while (ch);
                re = re.concat(st.reverse());
            }
            return re;
        }
    }
    UserData.userDataKey = "LOCALUSERDATA_TOKEN";
    UserData.serverUrl = "https://hallcq.jpsdk.com/game/toutiao/20247";
    UserData.token = "";

    class Times {
        constructor(time) {
            this.time = 0;
            if (time) {
                this.time = time;
            }
            else {
                this.time = Times.now;
            }
        }
        static get now() {
            return new Date().getTime();
        }
        static getDate() {
            return new Date().getDate();
        }
        static console(key) {
            this._console[key] = Times.now;
        }
        static consoleEnd(key, ...args) {
            console.log("执行耗时 ", key, (Times.now - (this._console[key] || Times.now)) / 1000, ...args);
        }
        static get Date() {
            return new Date();
        }
        static day(time) {
            return Math.floor(this.hour(time) / 24);
        }
        static hour(time) {
            return Math.floor(this.minute(time) / 60);
        }
        static minute(time) {
            return Math.floor(this.second(time) / 60);
        }
        static second(time) {
            if (time == null || time == undefined)
                time = this.now;
            return Math.floor(time / 1000);
        }
        static numHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        static numSecond(time) {
            return this.converMinTen(this.second(time));
        }
        static chinaHour(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time) % 60) + "分" + res;
            }
            if (this.minute() >= 60) {
                res = this.converMinTen(this.hour(time)) + "时" + res;
            }
            return res;
        }
        static chinaMinute(time) {
            let res;
            res = this.converMinTen(this.second(time) % 60) + "秒";
            if (this.second() >= 60) {
                res = this.converMinTen(this.minute(time)) + "分" + res;
            }
            return res;
        }
        static chinaSecond(time) {
            return this.converMinTen(this.second(time)) + "秒";
        }
        static converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        add(time) {
            this.time += time;
            return this;
        }
        sub(time) {
            this.time -= time;
            return this;
        }
        get now() { return this.time; }
        ;
        get day() {
            return Math.floor(this.hour / 24);
        }
        get hour() {
            return Math.floor(this.minute / 60);
        }
        get minute() {
            return Math.floor(this.second / 60);
        }
        ;
        get second() {
            return Math.floor(this.time / 1000);
        }
        get numHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + ":" + res;
            }
            else {
                res = "00:" + res;
            }
            return res;
        }
        get numSecond() {
            return this.converMinTen(this.second);
        }
        get chinaHour() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute % 60) + "分" + res;
            }
            if (this.minute >= 60) {
                res = this.converMinTen(this.hour) + "时" + res;
            }
            return res;
        }
        get chinaMinute() {
            let res;
            res = this.converMinTen(this.second % 60) + "秒";
            if (this.second >= 60) {
                res = this.converMinTen(this.minute) + "分" + res;
            }
            return res;
        }
        get chinaSecond() {
            return this.converMinTen(this.second) + "秒";
        }
        converMinTen(num) {
            return num < 10 ? ("0" + num) : num.toString();
        }
        static isSameDay(t) {
            return new Date(t).toLocaleDateString() === new Date().toLocaleDateString();
        }
        static isToday(_time) {
            this.get_endtime();
            var compare_res = this.compare_time(_time);
            if (compare_res == 1)
                return true;
            else
                return false;
        }
        static compare_time(time) {
            var today_end = this.get_endtime();
            var time_old = time;
            if (today_end == time_old) {
                return 1;
            }
            else {
                return 0;
            }
        }
        static get_endtime() {
            var time_end = new Date(new Date(new Date().toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1);
            var time_format = this.format_date(time_end);
            return time_format;
        }
        static format_date(now) {
            var year = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            var hh = now.getHours();
            var mm = now.getMinutes();
            var ss = now.getSeconds();
            var clock = year + "";
            if (month < 10) {
                clock += "0";
            }
            clock += month + "";
            if (day < 10) {
                clock += "0";
            }
            clock += day + "";
            if (hh < 10) {
                clock += "0";
            }
            clock += hh + "";
            if (mm < 10) {
                clock += '0';
            }
            clock += mm;
            if (ss < 10) {
                clock += '0';
            }
            clock += ss;
            return clock;
        }
    }
    Times._console = {};

    class Toutiao extends BaseSDK {
        constructor() {
            super();
            this._bannerWidth = 240;
            this._closeCallback = null;
            this.showADInsertTime = 0;
            this.isShowBanner = false;
            this.openAutoFNTime = 0;
            this.isReadyVieoAd = false;
            this.errorAdCount = 0;
            this.isAdVideoShow = false;
            this._isRecordStart = false;
            this._tickRecordBegin = 0;
            this._tickRecordEnd = 0;
            this.isShareVideo = false;
            this.isShowInterstitial = true;
            this.isInsertAdLoaded = false;
            this.isShowADInsert = false;
            this.InterstAdIndex = 0;
            this.checkUpdate();
            this._version = SDKData.data.TOUTIAO_VERSION;
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKData.data.GAMEID}/toutiao/api.json`;
        }
        get tt() {
            if (!this._tt) {
                this._tt = Laya.Browser.window.tt;
            }
            return this._tt;
        }
        getStorageSync(key, def) {
            if (!key)
                return;
            var data = def ? def : null;
            try {
                data = window["tt"].getStorageSync(key);
            }
            catch (error) { }
            return data;
        }
        setStorageSync(key, data) {
            try {
                window["tt"].setStorageSync(key, data);
            }
            catch (error) {
            }
        }
        checkUpdate() {
            try {
                if (window["tt"]) {
                    if ("function" == typeof window["tt"].getUpdateManager) {
                        const updateManager = window["tt"].getUpdateManager();
                        updateManager.onCheckForUpdate(function (t) {
                            console.log(t.hasUpdate);
                        });
                        updateManager.onUpdateReady(() => {
                            window["tt"].showModal({
                                title: "更新提示",
                                content: "有新版本啦！赶快开启新的历程吧~",
                                success: function (res) {
                                    if (res.confirm) {
                                        updateManager.applyUpdate();
                                    }
                                    else {
                                        window["tt"].showToast({
                                            icon: "none",
                                            title: "下一次启动时会使用新版本",
                                        });
                                    }
                                },
                            });
                        });
                        updateManager.onUpdateFailed(function () {
                            console.log("新的版本下载失败");
                        });
                    }
                }
            }
            catch (e) {
                console.log(" error checkUpdate");
            }
            this.startRefeshInsertAd();
        }
        getUserInfo(callback, isTips = true, target = undefined) {
            let self = this;
            this.tt.getSetting({ success: function (res) {
                    console.log("res:", res.authSetting["scope.userInfo"]);
                    if (res.authSetting["scope.userInfo"]) {
                        self.tt.getUserInfo({
                            success(res) {
                                console.log("字节信息:", res);
                                callback.call(target, res.userInfo);
                            },
                            fail(res) {
                                if (isTips)
                                    self.showToast("请在设置中开权限", 2000);
                                callback.call(target, undefined);
                                console.log(`getUserInfo 调用失败`, res.errMsg);
                            },
                        });
                    }
                    else {
                        self.tt.authorize({
                            scope: "scope.userInfo",
                            success: function () {
                                self.tt.getUserInfo({
                                    success(res) {
                                        console.log("字节信息:", res);
                                        callback.call(target, res.userInfo);
                                    },
                                    fail(res) {
                                        if (isTips)
                                            self.showToast("请在设置中开权限", 2000);
                                        callback.call(target, undefined);
                                    },
                                });
                            },
                            fail: function (res) {
                                callback.call(target, undefined);
                                console.log("授权用户信息失败", res);
                                if (isTips)
                                    self.showToast("请在设置中开权限", 2000);
                            }
                        });
                    }
                } });
        }
        onAppShow(res) {
            console.log("onShow: " + JSON.stringify(res.query));
            console.log("onAppShow");
            LogicData.instance.getClipboardData();
        }
        onAppHide(res) {
            console.log("onAppHide", res);
            let TAG_COUNT = "HIDE_REWARDAD_COUNT";
            let TAG_TIME = "HIDE_REWARDAD_TIME";
            if (this.isShareVideo || !this.isDouyin || this._isRecordStart)
                return;
            let needCount = Math.random();
            let count = this.data.HIDE_REWARDAD_RATE;
            let rewardAd = this.data.HIDE_REWARDAD_MAX;
            let hideRewardAdCount = this.getStorageSync(TAG_COUNT, 0);
            let nowTime = Times.now;
            let hideRewardAdTime = this.getStorageSync(TAG_TIME, nowTime);
            if (!Times.isSameDay(hideRewardAdTime)) {
                hideRewardAdCount = 0;
                this.setStorageSync(TAG_COUNT, 0);
                this.setStorageSync(TAG_TIME, nowTime);
            }
            if (GameSDK.isOpenCitys() && !GameSDK.isCurrentVersion && this._videoAd && needCount < count && hideRewardAdCount < rewardAd) {
                this.showADInsert();
                Laya.MouseManager.enabled = true;
                this._videoAd.show().then(() => {
                    this.setStorageSync(TAG_COUNT, hideRewardAdCount + 1);
                    this.sendEvent("视频H");
                });
            }
        }
        onLoginSuccess(data) {
            this.tt.showShareMenu({
                withShareTicket: true
            });
            this.tt.onShareAppMessage(() => {
                return {
                    title: ToolSDK.randomItem(SDKConfig.TOUTIAO_SHARECONTENT),
                    templateId: ToolSDK.randomItem(SDKConfig.TOUTIAO_SHARETEMPLATEID),
                };
            });
            this.createBanner();
            UserData.login(data);
        }
        isSupportShareVideo() {
            if (this.videoPath == null) {
                return false;
            }
            else {
                return true;
            }
        }
        showBanner() {
            if (this._bannerNode && this.isCurrentVersion() == false) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode) {
                this.isShowBanner = false;
                this._bannerNode.hide();
            }
        }
        createBanner() {
            var self = this;
            console.log("***********banner 广告刷新************", this._bannerWidth);
            var system = this.tt.getSystemInfoSync();
            this._bannerNode = this.tt.createBannerAd({
                adUnitId: this.data.BannerAd,
                adIntervals: 30,
                style: {
                    top: system.windowHeight - 110,
                    left: 0,
                    width: system.windowWidth
                }
            });
            this._bannerNode.onResize(function (e) {
                self._bannerNode.style.left = (system.windowWidth - e.width) / 2;
                self._bannerNode.style.top = system.windowHeight - e.height;
            });
            this._bannerNode.onLoad(function () {
                if (!self.isShowBanner || this.isCurrentVersion())
                    self._bannerNode.hide();
            });
            this._bannerNode.onError(function (err) {
                console.log("Banner error:", err);
            });
        }
        OpenAutoFN() {
            if (!this.isDouyin)
                return;
            let nowTime = Times.now;
            if ((nowTime - this.openAutoFNTime) <= 20000)
                return;
            let TAG_COUNT = "REWARDAD_COUNT";
            let TAG_TIME = "REWARDAD_TIME";
            let needCount = Math.random();
            let count = this.data.REWARDAD_RATE;
            let rewardAd = this.data.REWARDAD_MAX;
            let rewardAdCount = this.getStorageSync(TAG_COUNT, 0);
            let rewardAdTime = this.getStorageSync(TAG_TIME, nowTime);
            if (!Times.isSameDay(rewardAdTime)) {
                rewardAdCount = 0;
                this.setStorageSync(TAG_TIME, nowTime);
                this.setStorageSync(TAG_COUNT, 0);
            }
            if (GameSDK.isOpenCitys() && !GameSDK.isCurrentVersion && this._videoAd && rewardAdCount <= rewardAd && needCount < count) {
                Laya.MouseManager.enabled = true;
                console.log("OpenAutoFN Log");
                this._videoAd.show().then(() => {
                    this._videoAd.destroy().then(() => { }).catch(() => { });
                    this._videoAd.offClose(this._onCloseVideoHandler.bind(this));
                    this._videoAd.offLoad(this._onLoadVideoHandler.bind(this));
                    this._videoAd.offError(this._onErrorVideoHandler.bind(this));
                    this._videoAd = null;
                    Laya.timer.once(10000, this, () => {
                        this.createAdVideo("");
                    });
                    this.setStorageSync(TAG_COUNT, rewardAdCount + 1);
                    this.openAutoFNTime = Times.now;
                    this.sendEvent("视频A");
                }).catch(() => {
                });
            }
        }
        _onErrorVideoHandler(err) {
            let self = this;
            self.isReadyVieoAd = false;
            Laya.MouseManager.enabled = true;
            if (self.isAdVideoShow) {
                self.sendEvent("激励广告错误" + err.errCode);
                if (!GameSDK.isCurrentVersion && this.videoPath && LogicData.instance.isCanShare) {
                    UIMgr.instance.openUI(ModuleType.AdShare, null, null, (isState) => {
                        if (isState) {
                            LogicData.instance.addCanShare();
                        }
                        if (self.onADViewComplete)
                            self.onADViewComplete.runWith(isState);
                    });
                    return;
                }
                self.showTips("暂无视频", 1000);
                if (err.errCode == 1004) ;
                else {
                    Laya.timer.clear(self, self.onPreloadAdHandler);
                    Laya.timer.once(10000, self, self.onPreloadAdHandler);
                }
            }
        }
        _onCloseVideoHandler(res) {
            this.isReadyVieoAd = false;
            Laya.MouseManager.enabled = true;
            this.startRefeshInsertAd();
            this.resumeVideoRecord();
            ToolSDK.replaySound();
            if ((res && res.isEnded) || (res === undefined)) {
                this.noticeCloseVideo(this.videoAdReason);
                if (this.isAdVideoShow)
                    this.onADViewComplete.runWith(true);
            }
            else {
                if (this.isAdVideoShow) {
                    this.onADViewComplete.runWith(false);
                    this.showTips("需要看完视频才能获得奖励！", 1000);
                }
            }
            this.isAdVideoShow = false;
            Laya.timer.once(5000, this, this.onPreloadAdHandler);
        }
        _onLoadVideoHandler(res) {
            this.errorAdCount = 0;
            this.isReadyVieoAd = true;
            Laya.MouseManager.enabled = true;
            if (this.isAdVideoShow) {
                this.pauseVideoRecord();
                this._videoAd.show().then(() => {
                    this.stopRefeshInsertAd();
                    this.noticeOpenVideo(this.videoAdReason);
                });
                Laya.timer.clear(this, this.onPreloadAdHandler);
            }
        }
        createAdVideo(reason) {
            if (!this._videoAd) {
                this._videoAd = this.tt.createRewardedVideoAd({ adUnitId: this.data.RewardAd });
                this.videoAdReason = reason;
                this._videoAd.onLoad(this._onLoadVideoHandler.bind(this));
                this._videoAd.onError(this._onErrorVideoHandler.bind(this));
                this._videoAd.onClose(this._onCloseVideoHandler.bind(this));
            }
        }
        showADVideo(caller, onComplete, reason, args) {
            if (GameSDK.isDebug) {
                if (onComplete) {
                    this.onADViewComplete = Handler.create(caller, onComplete, args);
                    this.onADViewComplete.runWith(true);
                }
                return;
            }
            if (typeof (this.tt.createRewardedVideoAd) == 'undefined')
                return;
            Laya.MouseManager.enabled = false;
            this.isAdVideoShow = true;
            this.onADViewComplete = Handler.create(caller, onComplete, args);
            this.createAdVideo(reason);
            if (this.isReadyVieoAd) {
                this._videoAd.show().then(() => {
                    this.noticeOpenVideo(reason);
                });
            }
            else {
                this._videoAd.load();
            }
            if (!Laya.MouseManager.enabled) {
                Laya.timer.once(1500, this, function () {
                    Laya.MouseManager.enabled = true;
                });
            }
        }
        onPreloadAdHandler() {
            if (this._videoAd) {
                this._videoAd.load();
            }
        }
        showModal(pars) {
            this.tt.showModal({
                title: pars.title || "提示",
                content: pars.content || "内容",
                confirmText: pars.confirmText || "确定",
                cancelText: pars.cancelText || "取消",
                showCancel: pars.showCancel || true,
                success(res) {
                    if (res.confirm) {
                        pars && pars.success && pars.success();
                    }
                    if (res.cancel) {
                        pars && pars.fail && pars.fail();
                    }
                },
                fail(res) {
                    pars && pars.fail && pars.fail();
                }
            });
        }
        loadRewardedVideo() {
            console.log("loadRewardedVideo", this.tt);
            if (this.tt) {
                this._videoAd = this.tt.createRewardedVideoAd({ adUnitId: this.data.RewardAd });
                this._videoAd.onLoad(() => {
                });
                this._videoAd.onError((err) => {
                });
            }
        }
        pauseVideoRecord() {
            this.tt.getGameRecorderManager().pause();
        }
        resumeVideoRecord() {
            this.tt.getGameRecorderManager().resume();
        }
        stopVideoRecord() {
            console.log("======> stopVideoRecord <======");
            this.startRefeshInsertAd();
            var recorder = this.tt.getGameRecorderManager();
            if (this._isRecordStart) {
                console.log("停止录屏");
                recorder.stop();
            }
            this._isRecordStart = false;
        }
        startVideoRecord(time, callback) {
            this.stopRefeshInsertAd();
            if (this.tt == null)
                return;
            console.log("======> startVideoRecord <======");
            var recorder = this.tt.getGameRecorderManager();
            if (this._isRecordStart) {
                this._isRecordStart = false;
                recorder.stop();
                return;
            }
            recorder.start({
                duration: time || 300,
            });
            recorder.onStart(res => {
                this._tickRecordBegin = Times.now;
                console.log("======> startVideoRecord <====== onStart");
                if (callback)
                    callback("start");
                this._isRecordStart = true;
            });
            recorder.onStop(res => {
                console.log(res, res.videoPath);
                console.log("======> startVideoRecord <====== onStop");
                this._tickRecordEnd = Times.now;
                if (this._tickRecordBegin && this._tickRecordEnd - this._tickRecordBegin < 3000) {
                    this.showToast("录屏时间小于3秒", 2000);
                }
                else {
                    this.videoPath = res.videoPath;
                }
                if (callback)
                    callback("end");
                this._isRecordStart = false;
            });
        }
        startRefeshInsertAd() {
            this.stopRefeshInsertAd();
            Laya.timer.loop(90 * 1000, this, this.refeshInsertAd);
        }
        refeshInsertAd() {
            if (!GameSDK.isCurrentVersion) {
                var nowTime = Times.now;
                if ((nowTime - this.showADInsertTime) >= 30000) {
                    this.showADInsert();
                }
            }
        }
        stopRefeshInsertAd() {
            Laya.timer.clear(this, this.refeshInsertAd);
        }
        hasShareRecorder() {
            console.log("hasShareRecorder time : " + (this._tickRecordEnd - this._tickRecordBegin));
            if (this._tickRecordBegin && this._tickRecordEnd - this._tickRecordBegin < 3000)
                return false;
            return true;
        }
        showLoading() {
            if (this.tt && this.tt.showLoading) {
                this.tt.showLoading({
                    title: "请求中，请稍后...",
                    success(res) {
                        console.log(`${res}`);
                    },
                    fail(res) {
                        console.log(`showLoading调用失败`);
                    },
                });
            }
        }
        hideLoading() {
            if (this.tt && this.tt.hideLoading) {
                this.tt.hideLoading({
                    success(res) {
                        console.log(`${res}`);
                    },
                    fail(res) {
                        console.log(`showLoading调用失败`);
                    },
                });
            }
        }
        showTips(message, time) {
            this.tt.showToast({
                title: message,
                icon: "none",
                duration: time
            });
        }
        showToast(message, time) {
            console.log(message, time);
            this.tt.showToast({
                title: message,
                duration: time
            });
        }
        onShareAppMessage() {
            if (this.videoPath)
                this.shareVideoRecord();
        }
        onConfigLoad() {
            console.log("SDKBytedance.onRemoteConfigLoad", this.data);
            if (this.data.Shareid) {
                SDKConfig.TOUTIAO_SHARETEMPLATEID = this.data.Shareid;
            }
            this.tt.setKeepScreenOn({ keepScreenOn: true });
            this.createAdVideo(null);
            this.tt.login({
                force: false,
                success: (i) => {
                    console.log("O_O SDKBytedance.init", i);
                    var data = {
                        gameId: this.data.appid,
                        code: i.code,
                        anonymousCode: i.anonymousCode
                    };
                    this.onLoginSuccess(data);
                },
                fail: function (e) {
                }
            });
            this.tt.onShow(this.onAppShow.bind(this));
            this.tt.onHide(this.onAppHide.bind(this));
        }
        shareVideoRecord(callback) {
            if (this.tt == null)
                return;
            console.log('=====> 开始分享视频 <====== path: ' + this.videoPath);
            if (!this.hasShareRecorder()) {
                this.showToast("录屏时间小于3秒", 2000);
                if (callback)
                    callback(false);
                return;
            }
            if (this.videoPath == null) {
                this.showToast("录屏时间小于3秒", 2000);
                if (callback)
                    callback(false);
                return;
            }
            this.isShareVideo = true;
            let self = this;
            let successFunc = function (res) {
                self.isShareVideo = false;
                console.log('分享视频成功', res);
                if (self.getVersion("1.40.0")) ;
                self.copyFileSync();
                if (callback)
                    callback(true);
            };
            let failFunc = function (res) {
                self.isShareVideo = false;
                console.log('分享视频失败:', JSON.stringify(res));
                self.showToast("视频失效,请继续游戏", 2000);
                if (callback)
                    callback(false);
            };
            this.tt.shareAppMessage({
                channel: "video",
                title: ToolSDK.randomItem(SDKConfig.SHARE_CONTENT),
                desc: ToolSDK.randomItem(SDKConfig.SHARE_CONTENT),
                imageUrl: "",
                templateId: ToolSDK.randomItem(SDKConfig.TOUTIAO_SHARETEMPLATEID),
                query: "",
                extra: {
                    videoPath: this.videoPath,
                    videoTopics: [SDKConfig.TOUTIAO_GAME_NAME, "抖音小游戏"],
                    hashtag_list: [SDKConfig.TOUTIAO_GAME_NAME, "抖音小游戏"],
                    video_title: ToolSDK.randomItem(SDKConfig.TOUTIAO_SHARECONTENT),
                    withVideoId: true,
                },
                success: successFunc,
                fail: failFunc,
            });
        }
        copyFileSync() {
            const fileSystemManager = this.tt.getFileSystemManager();
            try {
                let destPath = 'ttfile://user/shareVideo.mp4';
                fileSystemManager.copyFileSync(this.videoPath, destPath);
                console.log("====> 拷贝成功 <=======");
                this.videoPath = destPath;
            }
            catch (err) {
                console.log("====> 拷贝失败 <=======", JSON.stringify(err));
            }
        }
        navigateToMiniGame(msg) {
            if (!this.getVersion("1.40.0")) {
                console.log("当前版本不支持");
                return;
            }
            this.tt && this.tt.navigateToVideoView({
                videoId: msg.videoId,
                success: function () {
                    console.log("-----------跳转小游戏:" + msg.name + "成功-----------");
                },
                fail: function (res) {
                    console.log("-----------跳转小游戏:" + msg.name + "失败-----------");
                    console.log(JSON.stringify(res));
                }
            });
        }
        vibrateShort() {
            this.tt.vibrateShort({
                success(res) {
                },
                fail(res) {
                }
            });
        }
        vibrateLong() {
            this.tt.vibrateLong({
                success(res) {
                },
                fail(res) {
                }
            });
        }
        onCloseHandle() {
            this.showADInsertTime = Times.now;
            this.startRefeshInsertAd();
            this.isInsertAdLoaded = false;
            this.isShowADInsert = false;
        }
        onErrorHandle() {
        }
        onLoadHandle() {
            this.isInsertAdLoaded = true;
        }
        showADInsert() {
            console.log("ADInsert Log Show");
            if (typeof (this.tt.createInterstitialAd) == 'undefined')
                return;
            var self = this;
            if (!this.insertAdNode || this.isInsertAdLoaded) {
                if (this.insertAdNode) {
                    self.insertAdNode.offClose(this.onCloseHandle.bind(this));
                    self.insertAdNode.offLoad(this.onLoadHandle.bind(this));
                    self.insertAdNode.offError(this.onErrorHandle.bind(this));
                    self.insertAdNode = null;
                }
                var adids = this.data.InterstAds[this.InterstAdIndex];
                if (adids != "") {
                    this.InterstAdIndex++;
                    if (this.InterstAdIndex >= this.data.InterstAds.length) {
                        this.InterstAdIndex = 0;
                    }
                    this.insertAdNode = this.tt.createInterstitialAd({
                        adUnitId: adids,
                    });
                    if (this.insertAdNode) {
                        this.insertAdNode.onClose(this.onCloseHandle.bind(this));
                        this.insertAdNode.onError(this.onErrorHandle.bind(this));
                        this.insertAdNode.onLoad(this.onLoadHandle.bind(this));
                    }
                }
            }
            if (this.insertAdNode) {
                this.insertAdNode.show().then(() => {
                    this.OpenAutoFN();
                    this.sendEvent("插屏广告显示");
                    this.stopRefeshInsertAd();
                    this.isShowADInsert = true;
                }).catch((e) => {
                    console.log("插屏显示失败:" + JSON.stringify(e));
                });
            }
        }
        getVersion(version) {
            let systemInfo = this.tt.getSystemInfoSync();
            var curVersion = systemInfo.SDKVersion;
            var isDouyin = systemInfo.appName === "Douyin";
            return isDouyin && GameSDK.compareVersion(curVersion, version) >= 0;
        }
        get isDouyin() {
            let systemInfo = this.tt.getSystemInfoSync();
            systemInfo.SDKVersion;
            return systemInfo.appName === "Douyin";
        }
        loadSubpackage(packName, zipFileName, topath, callbackSuccess, callbackProgress) {
            let self = this;
            if (this.tt) {
                if (this.tt.loadSubpackage) {
                    this.tt.loadSubpackage({
                        name: packName,
                        success: (res) => {
                            console.log("字节分包加载成功！", res);
                            if (zipFileName != "") {
                                self.loadBin(zipFileName, packName, callbackSuccess);
                            }
                            else {
                                if (callbackSuccess)
                                    callbackSuccess();
                            }
                        },
                        fail: (res) => {
                            console.log("字节分包加载失败！", res);
                            if (callbackProgress)
                                callbackProgress();
                        }
                    });
                }
                else {
                    if (zipFileName != "") {
                        self.loadBin(zipFileName, packName, callbackSuccess);
                    }
                    else {
                        if (callbackSuccess)
                            callbackSuccess();
                    }
                }
            }
        }
        loadBin(zipPath, packName = '', callbackSuccess = undefined, callbackFailed = undefined) {
            let binPath = zipPath + "/" + packName + ".bin";
            Laya.loader.load([{ url: binPath, type: "plfb" }], Laya.Handler.create(this, function () {
                if (callbackSuccess)
                    callbackSuccess();
            }));
        }
        shortCutInstalled(callback) {
            if (this.tt) {
                console.log("====添加到桌面====");
                this.tt.addShortcut({
                    success: function (res) {
                        callback(true);
                    },
                    fail: function (res) {
                        console.log("" + res.errMsg);
                        callback(false);
                    }
                });
            }
        }
        checkShortcut(callback) {
            if (this.tt) {
                console.log("====检查添加到桌面====");
                this.tt.checkShortcut({
                    success: function (res) {
                        callback(res.status.exist);
                    },
                    fail: function (res) {
                        console.log("res: " + JSON.stringify(res));
                        callback(false);
                    }
                });
            }
            else {
                callback(false);
            }
        }
        getLogicScene(callback) {
            if (this.tt) {
                var options = this.tt.getLaunchOptionsSync();
                callback(options.scene);
                console.log("options: " + options);
                console.log("options: " + JSON.stringify(options));
                console.log("query: " + JSON.stringify(options.query));
                console.log("extra: " + JSON.stringify(options.extra));
            }
            else {
                callback("");
            }
        }
        setClipboardData(data, callback) {
            if (this.tt && this.tt.setClipboardData) {
                this.tt.setClipboardData({
                    data,
                    success(res) {
                        console.log(`setClipboardData调用成功`);
                        callback(true);
                    },
                    fail(res) {
                        console.log(`setClipboardData调用失败`);
                        callback(false);
                    },
                });
            }
            else {
                callback(true);
            }
        }
        getClipboardData(callback) {
            if (this.tt && this.tt.getClipboardData) {
                this.tt.getClipboardData({
                    success(res) {
                        console.log("getClipboardData调用成功：" + `${res.data}`);
                        callback(res.data);
                    },
                    fail(res) {
                        console.log(`getClipboardData调用失败`);
                        callback("");
                    },
                });
            }
            else {
                callback("");
            }
        }
    }

    class Vivo extends BaseSDK {
        constructor() {
            super();
            this._closeCallback = null;
            this.isShowBanner = false;
            this.isLoading = false;
            this._version = SDKConfig.VIVO_VERSION;
            console.log("版本  == ", this._version);
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/vivo/api.json`;
            let self = this;
            this.qg = Laya.Browser.window.qg;
            this.qg.hasShortcutInstalled({
                success: function (res) {
                    self.isShortCutInstalled = res;
                },
                fail: function () {
                    self.isShortCutInstalled = false;
                }
            });
        }
        onConfigLoad() {
            this.createBanner();
        }
        shortCutInstalled(onComplete) {
            var self = this;
            this.qg.hasShortcutInstalled({
                success: function (res) {
                    if (res == false) {
                        self.qg.installShortcut({
                            success: function () {
                                onComplete && onComplete(true);
                                self.isShortCutInstalled = res;
                            },
                            fail: function () {
                                onComplete && onComplete(false);
                                self.isShortCutInstalled = false;
                            }
                        });
                    }
                    else {
                        self.showToast("桌面图标已创建", 1000);
                        onComplete && onComplete(true);
                    }
                },
                fail: function () {
                    onComplete && onComplete(false);
                }
            });
        }
        createBanner() {
            var self = this;
            var system = this.qg.getSystemInfoSync();
            this._bannerNode = this.qg.createBannerAd({
                posId: this.data.BannerAd,
                adIntervals: 10,
            });
            this._bannerNode.onResize(function (e) {
                self._bannerNode.style = { top: system.windowHeight - e.height };
            });
            this._bannerNode.onLoad(function () {
                if (!self.isShowBanner)
                    self._bannerNode.hide();
            });
            this._bannerNode.onError(function (err) {
                console.log("Banner error:", JSON.stringify(err));
            });
        }
        closeBanner() {
            this.hideBanner();
            this.destroyBanner();
            if (this.bannerTimer) {
                this.bannerTimer.clear(this, this.re_banner);
                this.bannerTimer = null;
            }
        }
        re_banner() {
            if (!this.bannerTimer) {
                this.bannerTimer = new Laya.Timer();
            }
            this.destroyBanner();
            this.createBanner();
            this.showBanner();
            this.bannerTimer.loop(10000, this, this.re_banner);
        }
        showBanner() {
            if (this._bannerNode) {
                this.isShowBanner = true;
                this._bannerNode.show();
            }
        }
        hideBanner() {
            if (this._bannerNode)
                this._bannerNode.hide();
            this.isShowBanner = false;
        }
        destroyBanner() {
            if (this._bannerNode) {
                this._bannerNode.destroy();
            }
        }
        showADVideo(caller, onComplete, reason, args) {
            var self = this;
            if (typeof (this.qg.createRewardedVideoAd) == 'undefined')
                return;
            if (this.isLoading)
                return;
            this.showLoading();
            this.noticeOpenVideo(reason);
            this.onADViewComplete = Handler.create(caller, onComplete, args);
            if (!this._videoNode) {
                this._videoNode = this.qg.createRewardedVideoAd({ posId: this.data.RewardAd });
                this._videoNode.onLoad(() => {
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showVidwo(reason);
                    ToolSDK.stopSound();
                });
                this._videoNode.onError((err) => {
                    if (self.showTime)
                        clearTimeout(self.showTime);
                    self.hideLoading();
                    self.showToast("暂无视频", 2000);
                    ToolSDK.replaySound();
                });
            }
            if (this.showTime)
                clearTimeout(this.showTime);
            this._videoNode.load();
            this.showTime = setTimeout(this.hideLoading, 3000);
        }
        showVidwo(reason) {
            var self = this;
            if (this.isShowBanner)
                this._bannerNode.hide();
            this._videoNode.show();
            this._closeCallback && this._videoNode.offClose(this._closeCallback);
            this._closeCallback = function (res) {
                if (self.isShowBanner)
                    self._bannerNode.show();
                self.resumeVideoRecord();
                if (res && res.isEnded || res === undefined) {
                    self.noticeCloseVideo(reason);
                    self.onADViewComplete.runWith(true);
                }
                else {
                    self.onADViewComplete.runWith(false);
                }
                ToolSDK.replaySound();
            };
            this._videoNode.onClose(this._closeCallback);
        }
        showLoading() {
            this.isLoading = true;
            if (this.qg && this.qg.showLoading) {
                this.qg.showLoading({ title: "请求中，请稍后..." });
            }
        }
        hideLoading() {
            this.isLoading = false;
            if (this.qg && this.qg.hideLoading) {
                this.qg.hideLoading({});
            }
        }
        showToast(message, time) {
            this.qg.showToast({
                title: message,
                icon: "none",
                duration: time
            });
        }
        createNative(navigateId) {
            let nativeNode = this.qg.createNativeAd({
                posId: navigateId
            });
            return nativeNode;
        }
        vibrateShort() {
            this.qg.vibrateShort({
                success: function () {
                    console.log("log----vibrateShort-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        vibrateLong() {
            this.qg.vibrateLong({
                success: function () {
                    console.log("log----vibrateLong-----");
                },
                fail: function () { },
                complete: function () { },
            });
        }
        loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            this.qg.getSystemInfoSync();
            let loadTask = this.qg.loadSubpackage({
                name: pack,
                success: function (info) {
                    if (comlete) {
                        comlete(info);
                    }
                },
                fail: function (info) {
                },
                complete: function () {
                }
            });
            loadTask.onProgressUpdate(res => {
                console.log('下载进度', res.progress);
                console.log('已经下载的数据长度', res.totalBytesWritten);
                console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite);
                if (progress) {
                    progress(res);
                }
            });
        }
        showADInsert() {
            let insertAdNode = this.qg.createInterstitialAd({
                posId: this.data.InterstAd,
            });
            insertAdNode.onError(err => {
                console.log("插屏广告加载失败", err);
            });
            insertAdNode.show().then(() => {
                console.log('插屏广告展示完成');
            }).catch((err) => {
                console.log('插屏广告展示失败', JSON.stringify(err));
            });
        }
        get addelay() {
            if (!this.data)
                return 0;
            return this.data.BtnTime * 1000;
        }
        isSupportShareVideo() {
            return false;
        }
    }

    class Web extends BaseSDK {
        constructor() {
            super();
            this.configURL = `https://hallcq.jpsdk.com/static/20323/oppo/api.json`;
        }
        initConfig(cb) {
            super.initConfig(cb);
        }
        onConfigLoad() {
            UserData.LogicWeb();
        }
        getUserInfo(callback, isTips = true, target = undefined) {
            callback.call(target, { nickName: "游客玩家", avatarUrl: "" });
        }
        vibrateShort() {
            if (Laya.Browser.window.tt) {
                Laya.Browser.window.tt.vibrateShort({
                    success(res) {
                    },
                    fail(res) {
                    }
                });
            }
        }
        vibrateLong() {
            if (Laya.Browser.window.tt) {
                Laya.Browser.window.tt.vibrateLong({
                    success(res) {
                    },
                    fail(res) {
                    }
                });
            }
        }
    }

    class ViewBase extends fgui.GComponent {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = "";
        }
        static find_parent_component_once_node(node, comp) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let parent = node.parent;
            while (parent) {
                if (parent instanceof comp) {
                    break;
                }
                parent = parent.parent;
            }
            return parent;
        }
        constructFromXML() {
            super.constructFromXML(undefined);
            this.displayObject.onAwake = this._onAwake.bind(this);
            this.displayObject.onDestroy = this._onDestroy.bind(this);
            if (this.onClickByView)
                this.onClick(this, this.onClickByView);
            if (this.onCreate)
                this.onCreate();
        }
        _onAwake() {
            if (this.ServerConfigKey && !ViewBase.find_parent_component_once_node(this, ViewBase)) {
                if (!GameSDK.isConfigUIModel(this.ServerConfigKey))
                    this.visible = false;
            }
            if (this.onLoaded)
                this.onLoaded();
        }
        _onDestroy() {
            Laya.timer.clearAll(this);
            if (this.onDestroyed)
                this.onDestroyed();
        }
        random(min, max) {
            return Math.round(Math.random() * (max - min) + min);
        }
        randomItem(array) {
            if (array && array.length > 0) {
                return array[this.random(0, array.length - 1)];
            }
            else {
                return null;
            }
        }
    }

    class AvdCell extends ViewBase {
        onCreate() {
            this._icon = this.getChildByPath("img").asLoader;
            this._nameLab = this.getChildByPath("name").asTextField;
        }
        onClickByView() {
            if (this._data) {
                GameSDK.navigateToMiniGame(this._data);
            }
        }
        updataData(data) {
            if (this._data == data) {
                return;
            }
            this._data = data;
            if (data) {
                let bgs = [];
                for (var i = 1; i <= 6; ++i) {
                    let bg = this.getChild("bg" + i);
                    if (bg)
                        bgs.push(bg.asImage);
                }
                let index = this.random(0, bgs.length - 1);
                bgs.map((a, i) => {
                    a.visible = i == index;
                });
                this._icon.url = this.randomItem(data.iconPath);
                this._nameLab.text = data.name;
            }
        }
    }

    class AvdFloat extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = "is_AvdFloat";
        }
        onCreate() {
            this._icon = this.getChildByPath("icon.img").asLoader;
            this._nameLab = this.getChildByPath("name").asTextField;
            let timeOut = 3;
            if (this.data) {
                parseFloat(this.data.toString());
            }
            this._Listata = GameSDK.getNavigateList();
            if (this._Listata.length <= 0)
                return;
            Laya.timer.clear(this, this._freamtimeHandler);
            Laya.timer.loop(timeOut * 1000, this, this._freamtimeHandler);
            this._freamtimeHandler();
        }
        onClickByView(evet) {
            evet._stoped = true;
            if (this._data) {
                GameSDK.navigateToMiniGame(this._data);
            }
        }
        _freamtimeHandler() {
            let index = Math.floor(Math.random() * this._Listata.length);
            let info = this._Listata[index];
            this._icon.url = this.randomItem(info.iconPath);
            this._nameLab.text = info.name;
            this._data = info;
        }
    }

    class AvdList extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = "is_AvdList";
            this._data = [];
        }
        onCreate() {
            this._list = this.getChildByPath("leftBoxList").asList;
            this._list.itemRenderer = Laya.Handler.create(this, this.updataCellHandler, null, false);
            this.changeAll();
            Laya.timer.loop(3 * 1000, this, this.changeAll);
        }
        changeAll() {
            this._data = [];
            let list = GameSDK.getNavigateList();
            let _index = this.random(0, list.length - 5);
            if (_index < 0)
                return;
            for (var i = _index; i < _index + 4; ++i) {
                if (list[i])
                    this._data.push(list[i]);
            }
            this._list.numItems = this._data.length;
            var children = this._list._children;
            var index = Math.floor(Math.random() * children.length);
            let tmp = children[index];
            this.aniro(tmp, 10, () => {
                this.aniro(tmp, -10, () => {
                    this.aniro(tmp, 10, () => {
                        this.aniro(tmp, -10, () => {
                            this.aniro(tmp, 0, () => {
                            });
                        });
                    });
                });
            });
        }
        aniro(node, angle, callback) {
            Laya.Tween.to(node, { rotation: angle }, 300, null, Laya.Handler.create(this, () => {
                callback();
            }, null, false));
        }
        updataCellHandler(index, view) {
            view.updataData(this._data[index]);
        }
    }

    class MoreGameBtn extends ViewBase {
        onCreate() {
            if (GameSDK.type == PlatType.TOUTIAO) {
                let systemInfo = window["tt"].getSystemInfoSync();
                var isDouyin = systemInfo.appName === "Douyin";
                this.visible = isDouyin && !GameSDK.isCurrentVersion && MoreGameBtn.IntervalDisplayAD.has();
            }
        }
        onClickByView() {
            if (GameSDK.type == PlatType.OPPO) ;
            else if (GameSDK.type == PlatType.WECHAT) {
                SDKViewMgr.popUpView(PropType.SmallItem);
            }
            else {
                SDKViewMgr.moreView();
            }
        }
    }
    MoreGameBtn.ServerConfigKey = "is_MoreGameBtn";
    MoreGameBtn.IntervalDisplayAD = new IntervalDisplayAD(MoreGameBtn.ServerConfigKey);

    class PropSceneUI extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = PropSceneUI.ServerConfigKey;
            this.navigatedata = [];
            this.pasue_end_time = 0;
            this.index = 0;
            this._dirction = 1;
            this.maxPosY = 10;
            this.posY = 0;
            this._list_speed = 3;
            this.level = Number.MAX_SAFE_INTEGER;
            this.bclick = false;
        }
        moveDownHandler(evet) {
            this.pasue_end_time = Date.now() + 300;
            Laya.stage.once(Laya.Event.MOUSE_UP, this, this.moveUpHandler);
        }
        moveUpHandler(evet) {
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.moveUpHandler);
            this.posY = this._list.scrollPane.posY;
        }
        randomOpenView() {
        }
        enterframe() {
            if (Date.now() < this.pasue_end_time)
                return;
            this.posY = this._list.scrollPane.posY;
            this.posY += this._list_speed;
            if (this.posY >= this.maxPosY) {
                this.posY = this.maxPosY;
                this._list_speed *= -1;
            }
            else if (this.posY <= 0) {
                this.posY = 0;
                this._list_speed *= -1;
            }
            this._list.scrollPane.setPosY(this.posY);
        }
        onCreate() {
        }
        touch_banner_close() {
        }
        onDestroyed() {
        }
        updataCellHandler(index, view) {
            view.updataData(this.navigatedata[index]);
        }
        setCallback(level, callBack) {
        }
        click_continue() {
        }
    }
    PropSceneUI.ServerConfigKey = "is_PropSceneUI";
    PropSceneUI.IntervalDisplayAD = new IntervalDisplayAD(PropSceneUI.ServerConfigKey);
    PropSceneUI.lastbannertime = 0;

    class NativeBanner extends ViewBase {
        constructor() {
            super(...arguments);
            this._info = { NativeType: 0 };
        }
        onCreate() {
            console.log("===============onCreate NativeBanner===================");
            this._iconLoader = this.getChildByPath("icon").asLoader;
            this._txt = this.getChildByPath("n5").asTextField;
            this.getChild("n3").asCom.onClick(this, this.clickViewHandler);
            if (this.data) {
                try {
                    this._info = JSON.parse(this.data.toString());
                }
                catch (error) {
                    this._info = { NativeType: 0 };
                }
            }
            if (!this._info)
                this._info = { NativeType: 0 };
            this.createNative();
            this._iconLoader.onClick(this, this.clickNativeBannerView);
        }
        showView() {
            if (!LogicData.instance.isOpen) {
                return;
            }
            if (this._nativeNode) {
                if (NativeBanner.nativeInfo == null) {
                    this._nativeNode.load();
                    console.log("showNative ------------------ aa");
                }
                else {
                    if (NativeBanner.showCount >= GameSDK.Nativecache) {
                        console.log("showNative ------------------ bb : " + NativeBanner.showCount);
                        this.initNatveView(NativeBanner.nativeInfo);
                        this._nativeNode.load();
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                    else {
                        console.log("showNative ------------------ cc : " + NativeBanner.showCount);
                        this.initNatveView(NativeBanner.nativeInfo);
                        this._nativeNode.load();
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                }
            }
        }
        clickNativeBannerView() {
            this.removeView();
            this.reportAdClick();
        }
        clickViewHandler(evet) {
            evet._stoped = true;
            this.removeView();
        }
        createNative() {
            let self = this;
            GameSDK.data;
            let listID = ["608585", "608586"];
            let nativeId = listID[NativeBanner.index];
            NativeBanner.index++;
            if (NativeBanner.index >= listID.length)
                NativeBanner.index = 0;
            console.log(nativeId, "=== 原生广告id === ", NativeBanner.index);
            if (this._nativeNode) {
                this._nativeNode.destroy();
                this._nativeNode = null;
            }
            this._nativeNode = GameSDK.createNative(nativeId);
            if (!this._nativeNode)
                return;
            this._nativeNode.onError(function (e) {
                console.log("=========>oppo 原生广告加载失败", e);
                self.displayObject.event("LoadFailNativeBanner");
                if (NativeBanner.nativeInfo) {
                    if (NativeBanner.showCount >= GameSDK.Nativecache) {
                        console.log("showNative ------------------ bb : " + NativeBanner.showCount);
                        this.initNatveView(NativeBanner.nativeInfo);
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                    else {
                        console.log("showNative ------------------ cc : " + NativeBanner.showCount);
                        this.initNatveView(NativeBanner.nativeInfo);
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                }
            });
            this._nativeNode.onLoad(function (res) {
                console.log("=========>oppo 原生广告加载成功", res);
                if (res && res.adList) {
                    let nativeInfo = res.adList[res.adList.length - 1];
                    console.log("原生广告数据：", nativeInfo);
                    NativeBanner.nativeInfo = nativeInfo;
                    NativeBanner.showCount = 0;
                    self.initNatveView(nativeInfo);
                    self.displayObject.event("LoadSuccessNativeBanner");
                }
            });
        }
        AutoreportAdClick() {
            console.log("自动跳转。。。。");
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdClick({ adId: this._useNtAdId.toString() });
        }
        initNatveView(nativeInfo) {
            console.log("initNatveView: " + NativeBanner.showCount + " , " + NativeBanner.nativeInfo);
            if (nativeInfo.imgUrlList && nativeInfo.imgUrlList.length > 0) {
                this._iconLoader.url = nativeInfo.imgUrlList[0];
            }
            else if (nativeInfo.iconUrlList && nativeInfo.iconUrlList.length > 0) {
                this._iconLoader.url = nativeInfo.iconUrlList[0];
            }
            else {
                this.removeView();
                return;
            }
            this._txt.text = nativeInfo.title;
            NativeBanner.showCount += 1;
            this._useNtAdId = nativeInfo.adId;
            this.reportAdShow();
        }
        reportAdClick() {
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdClick({ adId: this._useNtAdId.toString() });
        }
        reportAdShow() {
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdShow({ adId: this._useNtAdId.toString() });
        }
        removeView() {
            this.displayObject.event("CloseNativeBanner");
        }
    }
    NativeBanner.nativeInfo = null;
    NativeBanner.showCount = 0;
    NativeBanner.index = 0;

    class AddDesk extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = "is_AddDesk";
        }
        onCreate() {
            if (GameSDK.isShortCutInstalled) {
                this.visible = false;
            }
        }
        onClickByView() {
            GameSDK.shortCutInstalled((is_succes) => {
                console.log("添加到桌面:", is_succes);
            });
        }
    }

    class GameNative extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = GameNative.ServerConfigKey;
        }
        onCreate() {
            this._showNative = this.getChild("n0");
        }
        showNativeView(avdBtn, continueBtn, compete, loadSucces, loadFail, plevel = 1, isInsert = false) {
            this._showNativeBtn = avdBtn;
            this._continueBtn = continueBtn;
            this._showNativeBtn.onClick(this, this.onShowNativeBannerHandler);
            if (this._continueBtn)
                this._continueBtn.onClick(this, this.onContinueHandler);
            this._cometeHandler = compete;
            this._loadFail = loadFail;
            this._loadSucces = loadSucces;
            this._isInsert = isInsert;
            this._showNative.displayObject.on("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.on("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.on("LoadSuccessNativeBanner", this, this.onLoadSuccessHandler);
            this._level = plevel;
            this._showNative.showView();
        }
        onShowNativeBannerHandler() {
            this._showNative.clickNativeBannerView();
        }
        onContinueHandler() {
            console.log("this._isInsert ---- ", this._isInsert);
            if (this._isInsert) {
                if (!GameSDK.isOffCitys()) {
                    if (!GameSDK.isCurrentVersion) {
                        let ErrorNum = GameSDK.data["YS_QT"][1] / 100;
                        let prop = Math.random();
                        console.log(prop, " === 误点概率 === ", ErrorNum);
                        if (prop <= ErrorNum) {
                            this._showNative.clickNativeBannerView();
                        }
                        else {
                            this.onCloseHandler();
                        }
                    }
                    else {
                        this.onCloseHandler();
                    }
                }
                else {
                    this.onCloseHandler();
                }
            }
            else {
                if (!GameSDK.isOffCitys()) {
                    if (!GameSDK.isCurrentVersion) {
                        let ErrorNum = GameSDK.data["YS_QT"][0] / 100;
                        let prop = Math.random();
                        console.log(prop, " === 误点概率 NO Insert === ", ErrorNum);
                        if (prop <= ErrorNum) {
                            this._showNative.clickNativeBannerView();
                        }
                        else {
                            this.onCloseHandler();
                        }
                    }
                    else {
                        this.onCloseHandler();
                    }
                }
                else {
                    this.onCloseHandler();
                }
            }
        }
        onCloseHandler() {
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._cometeHandler) {
                this._cometeHandler();
            }
        }
        onLoadFailHandler() {
            console.log("原生广告成功回调===> 失败 : ", this._loadFail);
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._loadFail) {
                this._loadFail();
            }
        }
        onLoadSuccessHandler() {
            console.log("原生广告成功回调：", this._loadSucces);
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._loadSucces) {
                this._loadSucces();
            }
        }
    }
    GameNative.ServerConfigKey = "is_GameNative";
    GameNative.IntervalDisplayAD = new IntervalDisplayAD(GameNative.ServerConfigKey);

    class ClickGift extends ViewBase {
        constructor() {
            super(...arguments);
            this.progress = null;
            this.tip1 = null;
            this.tip2 = null;
            this.callback = null;
            this.n9 = null;
            this.n3 = null;
            this.showBannerRatio = 50;
        }
        onCreate() {
        }
        touch_banner_close() {
        }
        btn_click() {
        }
    }

    class MoreGameTT extends ViewBase {
        constructor() {
            super(...arguments);
            this.callback = null;
            this._list = null;
            this.navigatedata = [];
        }
        onCreate() {
            GameSDK.hideBanner();
            this.getChild("btn_close").onClick(this, this.onClickCloseHandler);
            this._hotItem = this.getChild("btn_zuire");
            this._newItem = this.getChild("btn_zuixin");
            this.navigatedata = GameSDK.getNavigateList();
            this._list = this.getChild("list_icon").asList;
            this._list.itemRenderer = Laya.Handler.create(this, this.updataCellHandler, null, false);
            this._list.numItems = this.navigatedata.length;
            this.initHotItem();
            this.initNewItem();
        }
        initHotItem() {
            for (let i = 0; i < this.navigatedata.length; i += 1) {
                let temp = this.navigatedata[i];
                if (temp.weight == 99) {
                    this._hotItem.updataData(temp);
                    break;
                }
                else if (i == this.navigatedata.length - 1) {
                    this._hotItem.updataData(this.navigatedata[0]);
                }
            }
        }
        initNewItem() {
            for (let i = 0; i < this.navigatedata.length; i += 1) {
                let temp = this.navigatedata[i];
                if (temp.weight == 88) {
                    this._newItem.updataData(temp);
                    break;
                }
                else if (i == this.navigatedata.length - 1) {
                    this._newItem.updataData(this.navigatedata[0]);
                }
            }
        }
        updataCellHandler(index, view) {
            view.updataData(this.navigatedata[index]);
        }
        onClickCloseHandler() {
            GameSDK.showBanner();
            this.dispose();
            if (this.callback) {
                this.callback();
                this.callback = null;
            }
        }
    }
    MoreGameTT.ServerConfigKey = "is_MoreGameBtn";
    MoreGameTT.IntervalDisplayAD = new IntervalDisplayAD(MoreGameTT.ServerConfigKey);

    class AvdCellTTSmall extends ViewBase {
        onCreate() {
            this._icon = this.getChildByPath("comp_icon.loader_icon").asLoader;
            this._nameLab = this.getChildByPath("text_name").asTextField;
        }
        onClickByView() {
            if (this._data) {
                GameSDK.navigateToMiniGame(this._data);
                this.touchable = false;
                Laya.timer.once(100, this, () => {
                    this.touchable = true;
                });
            }
        }
        updataData(data) {
            if (this._data == data) {
                return;
            }
            this._data = data;
            if (data) {
                this._icon.url = this.randomItem(data.iconPath);
                this._nameLab.text = data.name;
            }
        }
    }

    class AvdCellTTItem extends ViewBase {
        onCreate() {
            this._icon = this.getChildByPath("btn_icon.loader_icon").asLoader;
            this._nameLab = this.getChildByPath("text_name").asTextField;
            this._controller = this.getController("c1");
        }
        onClickByView() {
            if (this._data) {
                GameSDK.navigateToMiniGame(this._data);
                this.touchable = false;
                Laya.timer.once(100, this, () => {
                    this.touchable = true;
                });
            }
        }
        updataData(data) {
            if (this._data == data) {
                return;
            }
            this._data = data;
            if (data) {
                this._icon.url = this.randomItem(data.iconPath);
                this._nameLab.text = data.name;
                if (this._data.weight == 99) {
                    this._controller.setSelectedIndex(1);
                }
                else if (this._data.weight == 88) {
                    this._controller.setSelectedIndex(2);
                }
                else {
                    this._controller.setSelectedIndex(0);
                }
            }
        }
    }

    class NativeBanner1 extends ViewBase {
        constructor() {
            super(...arguments);
            this._info = { NativeType: 0 };
        }
        onCreate() {
            console.log("===============onCreate NativeBanner1===================");
            this._iconLoader = this.getChildByPath("icon").asLoader;
            this._txt = this.getChildByPath("n5").asTextField;
            this.getChild("n3").asCom.onClick(this, this.clickViewHandler);
            if (this.data) {
                try {
                    this._info = JSON.parse(this.data.toString());
                }
                catch (error) {
                    this._info = { NativeType: 0 };
                }
            }
            if (!this._info)
                this._info = { NativeType: 0 };
            this.createNative();
            this._iconLoader.onClick(this, this.clickNativeBannerView);
        }
        showView() {
            if (!LogicData.instance.isOpen) {
                return;
            }
            if (this._nativeNode) {
                if (NativeBanner1.nativeInfo == null) {
                    this._nativeNode.load();
                    console.log("showNative ------------------ aa");
                }
                else {
                    if (NativeBanner1.showCount >= GameSDK.Nativecache) {
                        console.log("showNative ------------------ bb : " + NativeBanner1.showCount);
                        this.initNatveView(NativeBanner1.nativeInfo);
                        this._nativeNode.load();
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                    else {
                        console.log("showNative ------------------ cc : " + NativeBanner1.showCount);
                        this.initNatveView(NativeBanner1.nativeInfo);
                        this._nativeNode.load();
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                }
            }
        }
        clickNativeBannerView() {
            this.removeView();
            this.reportAdClick();
        }
        clickViewHandler(evet) {
            evet._stoped = true;
            this.removeView();
        }
        createNative() {
            let self = this;
            GameSDK.data;
            let nativeId;
            console.log(nativeId, "=== 原生广告id === ", NativeBanner1.index);
            if (this._nativeNode) {
                this._nativeNode.destroy();
                this._nativeNode = null;
            }
            nativeId = "608586";
            this._nativeNode = GameSDK.createNative(nativeId);
            if (!this._nativeNode)
                return;
            this._nativeNode.onError(function (e) {
                console.log("=========>oppo 原生广告加载失败", e);
                self.displayObject.event("LoadFailNativeBanner");
                if (NativeBanner1.nativeInfo) {
                    if (NativeBanner1.showCount >= GameSDK.Nativecache) {
                        console.log("showNative Error------------------ bb : " + NativeBanner1.showCount);
                        this.initNatveView(NativeBanner1.nativeInfo);
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                    else {
                        console.log("showNative Error------------------ cc : " + NativeBanner1.showCount);
                        this.initNatveView(NativeBanner1.nativeInfo);
                        this.displayObject.event("LoadSuccessNativeBanner");
                    }
                }
            });
            this._nativeNode.onLoad(function (res) {
                console.log("=========>oppo 原生广告加载成功", res);
                if (res && res.adList) {
                    let nativeInfo = res.adList[res.adList.length - 1];
                    console.log("原生广告数据：", nativeInfo);
                    NativeBanner1.nativeInfo = nativeInfo;
                    NativeBanner1.showCount = 0;
                    let time = Math.floor(GameSDK.data["YS_AUTO"]);
                    console.log("自动跳转时间---- ", time);
                    if (!GameSDK.isOffCitys()) {
                        if (GameSDK.data["YS_AUTO"] != 0 && !GameSDK.isCurrentVersion) {
                            if (LogicData.instance.isAuto) {
                                LogicData.instance.isAuto = false;
                                Laya.timer.loop(time * 1000, this, () => {
                                    self.AutoreportAdClick();
                                });
                            }
                        }
                    }
                    self.initNatveView(nativeInfo);
                    self.displayObject.event("LoadSuccessNativeBanner");
                }
            });
        }
        AutoreportAdClick() {
            console.log("自动跳转。。。。");
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdClick({ adId: this._useNtAdId.toString() });
        }
        initNatveView(nativeInfo) {
            console.log("initNatveView: " + NativeBanner1.showCount + " , " + NativeBanner1.nativeInfo);
            if (nativeInfo.imgUrlList && nativeInfo.imgUrlList.length > 0) {
                this._iconLoader.url = nativeInfo.imgUrlList[0];
            }
            else if (nativeInfo.iconUrlList && nativeInfo.iconUrlList.length > 0) {
                this._iconLoader.url = nativeInfo.iconUrlList[0];
            }
            else {
                this.removeView();
                return;
            }
            this._txt.text = nativeInfo.desc;
            NativeBanner1.showCount += 1;
            this._useNtAdId = nativeInfo.adId;
            this.reportAdShow();
        }
        reportAdClick() {
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdClick({ adId: this._useNtAdId.toString() });
        }
        reportAdShow() {
            if (this._useNtAdId != null && this._nativeNode)
                this._nativeNode.reportAdShow({ adId: this._useNtAdId.toString() });
        }
        removeView() {
            this.displayObject.event("CloseNativeBanner");
        }
    }
    NativeBanner1.nativeInfo = null;
    NativeBanner1.showCount = 0;
    NativeBanner1.index = 0;

    class GameNative1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.ServerConfigKey = GameNative1.ServerConfigKey;
        }
        onCreate() {
            this._showNative = this.getChild("n0");
        }
        showNativeView(avdBtn, continueBtn, compete, loadSucces, loadFail, plevel) {
            this._showNativeBtn = avdBtn;
            this._continueBtn = continueBtn;
            this._showNativeBtn.onClick(this, this.onShowNativeBannerHandler);
            if (this._continueBtn)
                this._continueBtn.onClick(this, this.onContinueHandler);
            this._cometeHandler = compete;
            this._loadFail = loadFail;
            this._loadSucces = loadSucces;
            this._showNative.displayObject.on("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.on("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.on("LoadSuccessNativeBanner", this, this.onLoadSuccessHandler);
            this._level = plevel;
            this._showNative.showView();
        }
        onShowNativeBannerHandler() {
            this._showNative.clickNativeBannerView();
        }
        onContinueHandler() {
            if (!GameSDK.isOffCitys()) {
                if (!GameSDK.isCurrentVersion) {
                    let ErrorNum = GameSDK.data["YS_QT"][0] / 100;
                    let prop = Math.random();
                    console.log(prop, " === 误点概率 NO Banner === ", ErrorNum);
                    if (prop <= ErrorNum) {
                        this._showNative.clickNativeBannerView();
                    }
                    else {
                        this.onCloseHandler();
                    }
                }
                else {
                    this.onCloseHandler();
                }
            }
            else {
                this.onCloseHandler();
            }
        }
        onCloseHandler() {
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._cometeHandler) {
                this._cometeHandler();
            }
        }
        onLoadFailHandler() {
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("CloseNativeBanner", this, this.onCloseHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._loadFail) {
                this._loadFail();
            }
        }
        onLoadSuccessHandler() {
            console.log("原生广告成功回调：", this._loadSucces);
            this._showNative.displayObject.off("LoadFailNativeBanner", this, this.onLoadFailHandler);
            this._showNative.displayObject.off("LoadSuccessNativeBanner", this, this.onCloseHandler);
            if (this._loadSucces) {
                this._loadSucces();
            }
        }
    }
    GameNative1.ServerConfigKey = "is_GameNative";
    GameNative1.IntervalDisplayAD = new IntervalDisplayAD(GameNative1.ServerConfigKey);

    class SDKViewMgr {
        static init(path = "res/fgui/", cb = null) {
            this._registfguiClass("moreBtn", MoreGameBtn);
            this._registfguiClass("FloatAd", AvdFloat);
            this._registfguiClass("EndListAd", AvdList);
            this._registfguiClass("boxItemBig", AvdCell);
            this._registfguiClass("boxItemSmall", AvdCell);
            this._registfguiClass("btn_small", AvdCellTTSmall);
            this._registfguiClass("comp_iconzhanshi", AvdCellTTItem);
            this._registfguiClass("com_screen_big", PropSceneUI);
            this._registfguiClass("com_screen_small", PropSceneUI);
            this._registfguiClass("com_clickgift", ClickGift);
            this._registfguiClass("comp_douyinhudao", MoreGameTT);
            this._registfguiClass("NativeAdBanner", NativeBanner);
            this._registfguiClass("Native", GameNative);
            this._registfguiClass("addDesk", AddDesk);
            this._registfguiClass("Native(1)", GameNative1);
            this._registfguiClass("NativeAdBanner(1)", NativeBanner1);
            fgui.UIPackage.loadPackage(path + this.packageName, Laya.Handler.create(this, cb));
        }
        static _registfguiClass(resName, type) {
            fgui.UIObjectFactory.setExtension("ui://" + this.packageName + "/" + resName, type);
        }
        static createObject(resName) {
            return fairygui.UIPackage.createObject(this.packageName, resName);
        }
        static popUpView(type, back = undefined, level = Number.MAX_SAFE_INTEGER) {
            if (type == PropType.BigItem && !PropSceneUI.IntervalDisplayAD.has()) {
                if (back)
                    back();
                return;
            }
            let view = this.createObject(type == PropType.BigItem ? "com_screen_big" : "com_screen_small");
            view.setCallback(level, back);
            view.makeFullScreen();
            fairygui.GRoot.inst.addChild(view);
        }
        static clickgift(callback = null) {
            let view = this.createObject("com_clickgift");
            view.makeFullScreen();
            view.callback = callback;
            fairygui.GRoot.inst.addChild(view);
        }
        static moreView(back = undefined) {
            if (!MoreGameTT.IntervalDisplayAD.has()) {
                if (back)
                    back();
                return;
            }
            if (GameSDK.type == PlatType.TOUTIAO) {
                let systemInfo = window["tt"].getSystemInfoSync();
                var isDouyin = systemInfo.appName === "Douyin";
                if (!isDouyin)
                    return;
            }
            let view = this.createObject("comp_douyinhudao");
            view.callback = back;
            view.makeFullScreen();
            fairygui.GRoot.inst.addChild(view);
        }
        static showNativeUI(node, ad_comp_name, btn_look, btn_continue, level, cb, su, fa) {
            let native = node.getChild(ad_comp_name);
            console.log("注册原生广告事件成功 level:", level);
            if (native.showNativeView) {
                native.showNativeView(node.getChild(btn_look).asButton, node.getChild(btn_continue).asButton, () => {
                    console.log("广告-点击继续");
                    if (cb)
                        cb();
                }, () => {
                    if (su)
                        su();
                }, () => {
                    if (fa)
                        fa();
                }, level);
            }
            else {
                console.log("没有注册原生广告 直接回调");
                if (cb)
                    cb();
            }
        }
    }
    SDKViewMgr.packageName = "gamesdk";

    class Momoyu extends BaseSDK {
        constructor() {
            super();
            this._requestList = [];
            this._isRequest = false;
            this._version = SDKConfig.MOMOYU_VERSION;
            this._bridge = ToolSDK.getBridge("demo.JSBridge");
            this.configURL = `https://hallcq.jpsdk.com/static/${SDKConfig.GAMEID}/momoyu/api.json`;
        }
        showADVideo(caller, onComplete, reason, args) {
            if (this._bridge == undefined) {
                return;
            }
            this._bridge.callWithBack(function (value) {
                var obj = JSON.parse(value);
                if (obj.code == 0) {
                    onComplete.call(caller, true);
                }
                else {
                    onComplete.call(caller, false);
                    console.log(obj.message);
                }
            }, "showADVideo", "");
        }
        createBanner() {
            if (this._bridge == undefined) {
                return;
            }
            this._bridge.callWithBack(function (value) {
                var obj = JSON.parse(value);
                if (obj.code == 0) ;
                else {
                    console.log(obj.message);
                }
            }, "createBanner", "");
        }
        showBanner() {
            if (this._bridge == undefined) {
                return;
            }
            this._isBannerShowing = true;
            this._bridge.callWithBack(function (value) {
                var obj = JSON.parse(value);
                if (obj.code == 0) ;
                else {
                    console.log(obj.message);
                }
            }, "showBanner", "");
        }
        hideBanner() {
            if (this._bridge == undefined) {
                return;
            }
            this._isBannerShowing = false;
            this._bridge.callWithBack(function (value) {
                var obj = JSON.parse(value);
                if (obj.code == 0) ;
                else {
                    console.log(obj.message);
                }
            }, "hideBanner", "");
        }
        onConfigLoad() {
            this._bridge.callWithBack((res) => {
                console.log("初始SDK成功");
            }, "initSdk", JSON.stringify(this.data));
        }
        request(value) {
            console.log("Momoyu.request", value);
            this._requestList.push(value);
            this.htmlRequest();
        }
        htmlRequest() {
            if (this._requestList.length <= 0 || this._isRequest) {
                return;
            }
            if (this._bridge == undefined) {
                return;
            }
            let value = this._requestList[0];
            var url = value.url;
            if (value.data) {
                let params = Object.keys(value.data).map(function (key) {
                    return encodeURIComponent(key) + "=" + encodeURIComponent(value.data[key]);
                }).join("&");
                url += "?" + params;
            }
            this._bridge.callWithBack(function (data) {
                var jsonData = JSON.parse(data);
                value.success({ code: 200, data: jsonData });
                this._requestList.splice(0, 1);
                this.htmlRequest();
            }.bind(this), "htmlRequest", url);
        }
    }

    var PlatType;
    (function (PlatType) {
        PlatType[PlatType["AUTO"] = -2] = "AUTO";
        PlatType[PlatType["TEST"] = -1] = "TEST";
        PlatType[PlatType["WEB"] = 0] = "WEB";
        PlatType[PlatType["TOUTIAO"] = 1] = "TOUTIAO";
        PlatType[PlatType["VIVO"] = 2] = "VIVO";
        PlatType[PlatType["OPPO"] = 3] = "OPPO";
        PlatType[PlatType["WECHAT"] = 5] = "WECHAT";
        PlatType[PlatType["HBS"] = 8] = "HBS";
        PlatType[PlatType["GAME233"] = 9] = "GAME233";
        PlatType[PlatType["GAMEUC"] = 10] = "GAMEUC";
        PlatType[PlatType["KUAIGAME"] = 11] = "KUAIGAME";
        PlatType[PlatType["MOMOYU"] = 13] = "MOMOYU";
        PlatType[PlatType["OPOPOAPP"] = 14] = "OPOPOAPP";
        PlatType[PlatType["MEIZU"] = 15] = "MEIZU";
        PlatType[PlatType["QQ"] = 20] = "QQ";
    })(PlatType || (PlatType = {}));
    var PropType;
    (function (PropType) {
        PropType[PropType["BigItem"] = 0] = "BigItem";
        PropType[PropType["SmallItem"] = 1] = "SmallItem";
    })(PropType || (PropType = {}));
    var ClickType;
    (function (ClickType) {
        ClickType[ClickType["NativeAd"] = 0] = "NativeAd";
        ClickType[ClickType["PlayGame"] = 1] = "PlayGame";
        ClickType[ClickType["WaterFall"] = 2] = "WaterFall";
        ClickType[ClickType["EnterGame"] = 3] = "EnterGame";
    })(ClickType || (ClickType = {}));
    class GameSDK {
        static get isNewPlayer() {
            let first = LocalCache$1.get("LogickData._isNewPlayer" + SDKConfig.GAMEID, true);
            if (first) {
                let now = Date.now();
                if (!!!this._createTime) {
                    this._createTime = LocalCache$1.get("LogicData._createTime" + SDKConfig.GAMEID, now);
                    if (this._createTime == now) {
                        LocalCache$1.set("LogicData._createTime" + SDKConfig.GAMEID, now + "");
                    }
                }
                if (now > new Date(new Date(this._createTime).toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000 - 1) {
                    first = false;
                    LocalCache$1.set("LogickData._isNewPlayer" + SDKConfig.GAMEID, first + "");
                }
            }
            return first;
        }
        static hideCustomAd(type) {
        }
        static ctor(value) {
            this.ctorData = value;
            for (let key in value)
                if (value[key] != undefined && SDKConfig[key] != undefined)
                    SDKConfig[key] = value[key];
            if (value.PlatType == PlatType.AUTO)
                value.PlatType = ToolSDK.GET_PLT();
            GameSDK.type = value.PlatType;
            SxyGame.instance.init();
            this.startGameTime = Date.now();
            let js = Web;
            switch (GameSDK.type) {
                case PlatType.TEST:
                    js = Web;
                    break;
                case PlatType.WEB:
                    js = Web;
                    break;
                case PlatType.KUAIGAME:
                    js = KuaiGame;
                    break;
                case PlatType.OPPO:
                    js = Oppo;
                    break;
                case PlatType.TOUTIAO:
                    js = Toutiao;
                    break;
                case PlatType.VIVO:
                    js = Vivo;
                    break;
                case PlatType.HBS:
                    js = Hbs;
                    break;
                case PlatType.GAME233:
                    js = Game233;
                    break;
                case PlatType.GAMEUC:
                    js = GameUC;
                    break;
                case PlatType.MOMOYU:
                    js = Momoyu;
                    break;
            }
            this.sdk = new js();
            if (value.PltDefaultConfig) {
                let defaultConfig = value.PltDefaultConfig.filter(v => v.key == this.type);
                if (defaultConfig.length > 0)
                    this.sdk.data = defaultConfig[0].value;
            }
        }
        static initConfig(cb) {
            this.sdk.initConfig(() => {
                SDKViewMgr.init(this.ctorData.fgui_sdk_path || this.ctorData.sdk_res_path, cb);
            });
        }
        static init(type = PlatType.TEST, callBack = null, fgui_sdk_path = "/resfgui/") {
            this.ctor({
                PlatType: type,
                callBack,
                fgui_sdk_path,
            });
        }
        static get data() {
            return this.sdk.data;
        }
        static playerLevel(level) {
            this.level = level;
            console.log("sdk玩家等级：" + level);
        }
        static get isShow() {
            if (this.isCurrentVersion)
                return false;
            return true;
        }
        static get isCurrentVersion() {
            return this.sdk.isCurrentVersion();
        }
        static sendVideo(data) {
            this.sdk.sendVideo(data);
        }
        static stageOnStart(data) {
            this.sdk.stageOnStart(data);
        }
        static statgeOnRunning(data) {
            this.sdk.statgeOnRunning(data);
        }
        static stageOnEnd(data) {
            this.sdk.stageOnEnd(data);
        }
        static sendEvent(name, params = "") {
            this.sdk.sendEvent(name, params);
        }
        static get Nativecache() {
            if (this.sdk.data.Nativecache) {
                return this.sdk.data.Nativecache;
            }
            return 2;
        }
        static canClick(data, type) {
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0)
                return true;
            if (!this.isSupportErrorClick(data, type)) {
                return false;
            }
            if (type == ClickType.NativeAd) {
                var prop = Math.random();
                if (prop <= this.sdk.avdErrorProp()) {
                    this.updateErrorCount(ErrorCountType.NATIVE);
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (type == ClickType.PlayGame) {
                var prop = Math.random();
                if (prop <= this.sdk.playGameErrorProp()) {
                    this.updateErrorCount(ErrorCountType.VIDEO);
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (type == ClickType.WaterFall) {
                var prop = Math.random();
                if (prop <= this.sdk.waterFallErrorProp()) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (type == ClickType.EnterGame) {
                var prop = Math.random();
                if (prop <= this.sdk.enterGameVideoProp()) {
                    this.updateErrorCount(ErrorCountType.VIDEO);
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        static updateErrorCount(type) {
            let cCount = this.sdk.errorCount(type);
            this.sdk.updataAvdErrorCount(cCount + 1, type);
            console.log("更新最大次数", cCount + 1);
        }
        static showNativeUI(node, ad_comp_name, btn_look, btn_continue, level, cb, su, fa) {
            SDKViewMgr.showNativeUI(node, ad_comp_name, btn_look, btn_continue, level, cb, su, fa);
        }
        static baseChek() {
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0)
                return true;
            if (this.sdk.playerFlag == PlayerFlag.NO_AD) {
                console.log("标记未无广告用户-屏蔽");
                return false;
            }
            if (this.isOffCitys()) {
                return false;
            }
            if (this.isCurrentVersion) {
                return false;
            }
            return true;
        }
        static isSupportErrorClick(data, type) {
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0)
                return true;
            if (!this.baseChek()) {
                return false;
            }
            if (type == ClickType.NativeAd) {
                if (this.sdk.errorMaxCount(ErrorCountType.NATIVE) == 0) {
                    console.warn("isSupportErrorClick-误点未配置-屏蔽");
                    return false;
                }
                let cCount = this.sdk.errorCount(ErrorCountType.NATIVE);
                if (this.sdk.errorMaxCount(ErrorCountType.NATIVE) <= cCount) {
                    console.warn("isSupportErrorClick-误点上限-屏蔽");
                    return false;
                }
                if (this.sdk.avdErrorLevel() == 0) {
                    console.warn("isSupportErrorClick-avdErrorLevel误点未配置-屏蔽");
                    return false;
                }
                if (this.sdk.avdErrorProp() == 0)
                    return false;
                if (data.level < this.sdk.avdErrorLevel()) {
                    console.warn("isSupportErrorClick-误点等级-屏蔽");
                    return false;
                }
            }
            else if (type == ClickType.PlayGame) {
                if (this.sdk.errorMaxCount(ErrorCountType.VIDEO) == 0) {
                    console.warn("isSupportErrorClick-误点未配置-屏蔽");
                    return false;
                }
                let cCount = this.sdk.errorCount(ErrorCountType.VIDEO);
                if (this.sdk.errorMaxCount(ErrorCountType.VIDEO) <= cCount) {
                    console.warn("isSupportErrorClick-误点上限-屏蔽");
                    return false;
                }
                if (this.sdk.playGameLevel() == 0) {
                    console.warn("isSupportErrorClick-playGameLevel误点未配置-屏蔽");
                    return false;
                }
                if (this.sdk.playGameErrorProp() == 0)
                    return false;
                if (data.level < this.sdk.playGameLevel()) {
                    console.warn("isSupportErrorClick-误点等级-屏蔽");
                    return false;
                }
            }
            else if (type == ClickType.WaterFall) {
                if (this.sdk.errorMaxCount(ErrorCountType.BANNER) == 0) {
                    console.warn("isSupportErrorClick-误点未配置-屏蔽");
                    return false;
                }
                let cCount = this.sdk.errorCount(ErrorCountType.BANNER);
                if (this.sdk.errorMaxCount(ErrorCountType.BANNER) <= cCount) {
                    console.warn("isSupportErrorClick-误点上限-屏蔽");
                    return false;
                }
                if (this.sdk.waterFallErrorProp() == 0)
                    return false;
            }
            else if (type == ClickType.EnterGame) {
                if (this.sdk.errorMaxCount(ErrorCountType.VIDEO) == 0) {
                    console.warn("isSupportErrorClick-误点未配置-屏蔽");
                    return false;
                }
                let cCount = this.sdk.errorCount(ErrorCountType.VIDEO);
                if (this.sdk.errorMaxCount(ErrorCountType.VIDEO) <= cCount) {
                    console.warn("isSupportErrorClick-误点上限-屏蔽");
                    return false;
                }
                if (this.sdk.enterGameVideoProp() == 0)
                    return false;
            }
            return true;
        }
        static openMoreGameView(level) {
            if (this.isCurrentVersion)
                return false;
            if (!this.sdk.data)
                return false;
            if (!this.sdk.data.VideoJumpStartLevel)
                return false;
            if (!this.sdk.data.VideoJumpInterval)
                return false;
            if (level < parseInt(this.sdk.data.VideoJumpStartLevel))
                return false;
            if ((level % parseInt(this.sdk.data.VideoJumpInterval)) != 0)
                return false;
            SDKViewMgr.moreView(null);
            return true;
        }
        static EnterGame(level, back) {
            if (!this.baseChek())
                return false;
            if (!this.newenter) {
                if (back)
                    back();
                return false;
            }
            this.newenter = false;
            if (!GameSDK.canClick({ "level": level }, ClickType.EnterGame)) {
                if (back)
                    back();
                return false;
            }
            if (this.sdk.data.Channel0Rule == undefined) {
                this.sdk.data.Channel0Rule = "1";
            }
            var Channel0Rule = parseInt(this.sdk.data.Channel0Rule);
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0) {
                console.log("渠道0用户", "渠道规则", Channel0Rule);
                if (Channel0Rule == 1) {
                    this.showADVideo(this, (state) => {
                        this.popUpClickGift(level, back);
                    }, "主动弹出广告");
                }
                else {
                    this.popUpClickGift(level, () => {
                        this.showADVideo(this, (state) => {
                            if (back)
                                back(state);
                        }, "主动弹出广告");
                    });
                }
            }
            else if (this.sdk.playerFlag == PlayerFlag.NOMAL_HAS_AD) {
                console.warn("EnterAd show");
                GameSDK.showADVideo(this, (state) => {
                    if (back)
                        back(state);
                }, "主动弹出广告");
                return true;
            }
            else {
                if (back)
                    back();
            }
        }
        static PlayGameAd(level, back) {
            if (!this.baseChek()) {
                if (back)
                    back();
                return false;
            }
            if (this.sdk.data.PlayGameAd == undefined) {
                console.warn("PlayGameAd-PlayGameAd-屏蔽");
                if (back)
                    back();
                return false;
            }
            var limitLevel = parseInt(this.sdk.data.PlayGameAd);
            if (limitLevel <= 0) {
                console.warn("PlayGameAd-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (level < limitLevel) {
                console.warn("PlayGameAd-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (!this.canClick({ level }, ClickType.PlayGame)) {
                if (back)
                    back();
                return false;
            }
            console.warn("EnterAd show");
            GameSDK.showADVideo(this, (state) => {
                if (back)
                    back(state);
            }, "点击开始游戏");
            return true;
        }
        static popUpClickGift(level, back) {
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0) {
                SDKViewMgr.clickgift(back);
                return true;
            }
            if (!this.baseChek()) {
                if (back)
                    back();
                return false;
            }
            let cCount = this.sdk.errorCount(ErrorCountType.BANNER);
            if (this.sdk.errorMaxCount(ErrorCountType.BANNER) <= cCount) {
                console.warn("isSupportErrorClick-误点上限-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (this.sdk.data.ClickGift == undefined) {
                console.warn("popUpClickGift-ClickGift-屏蔽");
                if (back)
                    back();
                return false;
            }
            var limitLevel = parseInt(this.sdk.data.ClickGift);
            if (limitLevel <= 0) {
                console.warn("popUpClickGift-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (level < limitLevel) {
                console.warn("popUpClickGift-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            SDKViewMgr.clickgift(back);
            return true;
        }
        static popUPFullScreen(fullData, back) {
            console.log("popUPFullScreen");
            if (this.sdk.playerFlag == PlayerFlag.CHANNEL0) {
                if (fullData.proptype == PropType.BigItem) {
                    console.log("创建大界面");
                    SDKViewMgr.popUpView(PropType.BigItem, () => {
                        console.log("大界面关闭创建小界面");
                        SDKViewMgr.popUpView(PropType.SmallItem, back, fullData.level);
                    }, fullData.level);
                }
                else {
                    console.log("创建小界面");
                    SDKViewMgr.popUpView(PropType.SmallItem, back, fullData.level);
                }
                return true;
            }
            if (this.sdk.playerFlag == PlayerFlag.NO_AD) {
                console.log("标记未无广告用户-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (this.isOffCitys()) {
                console.warn("popUPFullScreen-城市屏蔽");
                if (back)
                    back();
                return false;
            }
            if (this.isCurrentVersion) {
                console.warn("popUPFullScreen-版本屏蔽");
                if (back)
                    back();
                return false;
            }
            if (this.sdk.data.WaterfallAd == undefined) {
                console.warn("popUPFullScreen-WaterfallAd-屏蔽");
                if (back)
                    back();
                return false;
            }
            var limitLevel = parseInt(this.sdk.data.WaterfallAd);
            if (limitLevel <= 0) {
                console.warn("popUPFullScreen-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (fullData.level < limitLevel) {
                console.warn("popUPFullScreen-limitLevel-屏蔽");
                if (back)
                    back();
                return false;
            }
            if (fullData.proptype == PropType.BigItem) {
                console.log("创建大界面");
                SDKViewMgr.popUpView(PropType.BigItem, () => {
                    console.log("大界面关闭创建小界面");
                    SDKViewMgr.popUpView(PropType.SmallItem, back, fullData.level);
                }, fullData.level);
            }
            else {
                console.log("创建小界面");
                SDKViewMgr.popUpView(PropType.SmallItem, back, fullData.level);
            }
            return true;
        }
        static getControlValue(key, _default) {
            if (this.sdk.data)
                return this.sdk.data[key] || _default;
            else
                return _default;
        }
        static getShowTriggerVideo() {
            let showVideo = false;
            this._showTriggerInt = this.getControlValue("ShowTriggerInt", 500);
            if (this._showTriggerInt > 0) {
                let now = Date.now();
                if (!this.isLimit() && now - this._lastShowTriggerTime >= this._showTriggerInt * 1000) {
                    this._lastShowTriggerTime = now;
                    showVideo = true;
                }
            }
            return showVideo;
        }
        static addelay() {
            let time = 0;
            if (this.sdk.data && this.sdk.data.BtnTime)
                time = this.sdk.data.BtnTime * 1000;
            if (this.isCurrentVersion)
                time = 0;
            return time;
        }
        static get isShortCutInstalled() {
            return this.sdk.isShortCutInstalled;
        }
        static isOffCitys() {
            if (!this.sdk.cityData.loc)
                return false;
            var len = this.sdk.cityData.loc.length;
            var list = this.data.Offcitys || [];
            for (var i = 0; i < len; i += 1) {
                if (list.indexOf(this.sdk.cityData.loc[i]) >= 0) {
                    return true;
                }
            }
            return false;
        }
        static isOpenCitys() {
            if (!this.sdk.cityData.loc)
                return false;
            var len = this.sdk.cityData.loc.length;
            var list = this.data.OPLISTS || [];
            for (var i = 0; i < len; i += 1) {
                if (list.indexOf(this.sdk.cityData.loc[i]) >= 0) {
                    return true;
                }
            }
            return false;
        }
        static getHours() {
            let nowtime = this.sdk.cityData.nowtime;
            var date = new Date(nowtime);
            return date.getHours();
        }
        static getNavigateList() {
            let list = this.sdk.getNavigateList();
            return list;
        }
        static isAderrormaxcount() {
            if (this.sdk.data.aderrormaxcount == undefined) {
                return false;
            }
            if (this.sdk.data.aderrormaxcount <= 0 || this.level <= 0) {
                return false;
            }
            return this.sdk.data.aderrormaxcount <= this.level;
        }
        static OpenAutoFN() {
            this.sdk.OpenAutoFN();
        }
        static navigateToMiniGame(msg) {
            this.sdk.navigateToMiniGame(msg);
            console.log(msg);
        }
        static showBanner() {
            this.sdk.showBanner();
        }
        static hideBanner() {
            this.sdk.hideBanner();
        }
        static isBannerShow() {
            return this.sdk._isBannerShowing;
        }
        static showADVideo(caller, onComplete, reason, args) {
            this.ADVing = true;
            AudioMgr$1.instance.pause_music();
            this.sdk.mousedowntime = Date.now() + 30 * 1000;
            this.sdk.showADVideo(caller, (b) => {
                this.ADVing = false;
                AudioMgr$1.instance.resume_music();
                onComplete(b);
            }, reason, args);
        }
        static startVideoRecord(time, callback) {
            this.sdk.startVideoRecord(time, callback);
        }
        static pauseVideoRecord() {
            this.sdk.pauseVideoRecord();
        }
        static resumeVideoRecord() {
            this.sdk.resumeVideoRecord();
        }
        static stopVideoRecord() {
            this.sdk.stopVideoRecord();
        }
        static shareVideoRecord(callback) {
            this.sdk.shareVideoRecord(callback);
        }
        static isSupportShareVideo() {
            return this.sdk.isSupportShareVideo();
        }
        static vibrateShort(type) {
            this.sdk.vibrateShort(type);
        }
        static vibrateLong() {
            this.sdk.vibrateLong();
        }
        static checkFollowState(callback) {
            this.sdk.checkFollowState(callback);
        }
        static openUserProfile(callback) {
            this.sdk.openUserProfile(callback);
        }
        static isConfigUIModel(key) {
            if (!key)
                return true;
            if (!GameSDK.sdk.data)
                return true;
            let value = GameSDK.sdk.data[key];
            if (value && value.state) {
                if (value.state == "1")
                    return true;
                else if (value.state == "0")
                    return false;
                else
                    return true;
            }
            return true;
        }
        static getConfigUIModelInterval(key) {
            if (!key)
                return 0;
            if (!GameSDK.sdk.data)
                return 0;
            let value = GameSDK.sdk.data[key];
            if (value && value.interval) {
                if (typeof value.interval == "string")
                    return Number(value.interval);
                else
                    return value.interval;
            }
            return 0;
        }
        static shortCutInstalled(callback) {
            this.sdk.shortCutInstalled(callback);
        }
        static checkShortcut(callback) {
            this.sdk.checkShortcut(callback);
        }
        static getLogicScene(callback) {
            this.sdk.getLogicScene(callback);
        }
        static VIDEOID() {
            console.log("----------------VIDEOID");
            if (this.sdk.data.VIDEOID == undefined) {
                return "";
            }
            console.log("----------------VIDEOID : " + this.sdk.data.VIDEOID);
            return this.sdk.data.VIDEOID;
        }
        static JUMP_OPS() {
            console.log("----------------JUMP_OPS");
            if (this.sdk.data.JUMP_OPS == undefined) {
                return 3;
            }
            console.log("----------------JUMP_OPS : " + this.sdk.data.JUMP_OPS);
            return this.sdk.data.JUMP_OPS;
        }
        static Click_Paroba() {
            if (this.sdk.data.Click_Proba == undefined) {
                return false;
            }
            console.log("----------------Click_Proba : " + this.sdk.data.Click_Proba);
            return Math.random() < this.sdk.data.Click_Proba;
        }
        static toClickGift(level, Frequency) {
            console.log("----------------Click_Control : " + this.sdk.data.Click_Control);
            console.log("----------------Click_City : " + this.sdk.data.Click_City);
            console.log("----------------Click_Frequency : " + this.sdk.data.Click_Frequency);
            console.log("----------------Click_Level : " + this.sdk.data.Click_Level);
            console.log("----------------Click_Times : " + this.sdk.data.Click_Times);
            if (this.sdk.data.Click_Control == undefined || this.sdk.data.Click_Control == 0) {
                return false;
            }
            if (this.sdk.data.Click_Level != undefined && this.sdk.data.Click_Level > level) {
                return false;
            }
            if (this.sdk.data.Click_Frequency != undefined && this.sdk.data.Click_Frequency <= Frequency) {
                return false;
            }
            if (this.sdk.data.Click_City != undefined && this.sdk.cityData && this.sdk.cityData.loc) {
                console.log("city : " + this.sdk.cityData.loc.join(","));
                if (this.sdk.cityData.loc.indexOf(this.sdk.data.Click_City) < 0) {
                    return false;
                }
            }
            if (this.sdk.data.Click_Times != undefined && this.sdk.cityData && this.sdk.cityData.nowtime) {
                var Click_Times = this.sdk.data.Click_Times;
                let nowtime = this.sdk.cityData.nowtime;
                var date = new Date(nowtime);
                var hour = date.getHours();
                var isOk = false;
                for (var i = 0; i < Click_Times.length; i += 2) {
                    if (i + 1 < Click_Times.length && hour >= Click_Times[i] && hour < Click_Times[i + 1]) {
                        isOk = true;
                    }
                }
                if (isOk == false) {
                    return false;
                }
            }
            return true;
        }
        static createNative(value) {
            return this.sdk.createNative(value);
        }
        static isOutAdSwitch() {
            if (this.isOffCitys()) {
                return false;
            }
            else {
                return this.sdk.data.isAdvert == 1;
            }
        }
        static openDanger() {
            if (this.isCurrentVersion) {
                return false;
            }
            if (this.isOffCitys()) {
                return false;
            }
            else {
                return this.sdk.data.openDanger == 1;
            }
        }
        static showToast(str, time = 1500) {
            this.sdk.showToast(str, time);
        }
        static needShowNative() {
            return this.type == PlatType.TEST || this.type == PlatType.OPPO || this.type == PlatType.VIVO;
        }
        static loadSubpackage(pack, zipFileName, topath, comlete, progress) {
            this.sdk.loadSubpackage(pack, zipFileName, topath, comlete, progress);
        }
        static isShowTime() {
            let newTime = Date.now();
            if (this.sdk.data.IntervalAdTime == null || this.sdk.data.IntervalAdTime == undefined)
                return false;
            if (newTime - this.startGameTime > this.sdk.data.IntervalAdTime * 1000) {
                return true;
            }
            return false;
        }
        static isOpenBanner() {
            if (!this.isShowTime())
                return false;
            return true;
        }
        static showADInsert() {
            this.sdk.showADInsert();
        }
        static shareMsg(caller, onComplete, reason, args) {
            this.sdk.shareMsg(caller, onComplete, reason, args);
        }
        static showCustomAd(isPaster) {
            this.sdk.showCustomAd(isPaster);
        }
        static closeCustomAd() {
            this.sdk.closeCustomAd();
        }
        static showGamePortal() {
            this.sdk.showGamePortal();
        }
        static showGameBanner() {
            this.sdk.showGameBanner();
        }
        static closeBoxBanner() {
        }
        static hideGameBanner() {
            this.sdk.hideGameBanner();
        }
        static closeBoxPortalAd() {
        }
        static compareVersion(curVersion, compareVersion) {
            let v1 = curVersion;
            if (!v1 || !v1.split)
                return 0;
            let v2 = compareVersion;
            if (!v2 || !v2.split)
                return 0;
            let v1Arr = v1.split('.');
            let v2Arr = v2.split('.');
            const len = Math.max(v1Arr.length, v2Arr.length);
            while (v1Arr.length < len) {
                v1Arr.push('0');
            }
            while (v2Arr.length < len) {
                v2Arr.push('0');
            }
            for (let i = 0; i < len; i++) {
                const num1 = parseInt(v1Arr[i]);
                const num2 = parseInt(v2Arr[i]);
                if (num1 > num2) {
                    return 1;
                }
                else if (num1 < num2) {
                    return -1;
                }
            }
            return 0;
        }
        static isLimit() {
            return this.isCurrentVersion || this.isOffCitys();
        }
        static isAdUser() {
            return false;
        }
        static isWhiteScene(scene) {
            if (!!this.data && +this.data.OpenWhiteScene == 1) {
                if (!!this.data && this.data.WhiteScene != undefined) {
                    let strs = this.data.WhiteScene.split(",");
                    for (let i of strs) {
                        if (+i == scene) {
                            return true;
                        }
                    }
                    return false;
                }
                return false;
            }
            return true;
        }
        static autoShowGrid9() {
            this._showGrid9Int = this.getControlValue("ShowGrid9Int", 300);
            let now = Date.now();
            if (!!!this._lastShowGrid9Time) {
                this._lastShowGrid9Time = now;
            }
            if (this._showGrid9Int > 0) {
                if (this.isAdUser() && now - this._lastShowGrid9Time >= this._showGrid9Int * 1000) {
                    this._lastShowGrid9Time = now;
                }
            }
        }
    }
    GameSDK.type = PlatType.TEST;
    GameSDK.startGameTime = 0;
    GameSDK.level = 1;
    GameSDK.banner = new BannerMgr();
    GameSDK.ctorData = null;
    GameSDK.isDebug = false;
    GameSDK.isDecode = false;
    GameSDK.newenter = true;
    GameSDK._lastShowTriggerTime = 0;
    GameSDK._showTriggerInt = 500;
    GameSDK.ADVing = false;
    GameSDK._lastShowInsertTime = 0;
    GameSDK._showGrid9Int = 500;
    let golab = window;
    golab.GameSDK = GameSDK;
    golab.PlatType = PlatType;
    golab.PropType = PropType;
    const SDKEventName = {
        LONG_TIME_NO_OPERATION: "LONG_TIME_NO_OPERATION",
        OpenAutoFN: "OpenAutoFN",
    };
    class SDKEventMgr {
        constructor() {
            this._eventMap = [];
            this.m_events = new Map();
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new SDKEventMgr;
            }
            return this._Int;
        }
        on(name, callBack, caller) {
            if (!callBack || !caller)
                return;
            let event = this.m_events.get(name);
            if (!event) {
                event = [];
                this.m_events.set(name, event);
            }
            event.push({ callBack, caller });
        }
        emit(name, ...param) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    value.callBack.call(value.caller, ...param);
            }
        }
        off(name, callBack, caller) {
            let events = this.m_events.get(name);
            if (!events)
                return;
            for (let i = 0; i < events.length; i++) {
                let value = events[i];
                if (value)
                    if (value.callBack == callBack && value.caller == caller) {
                        events.splice(i, 1);
                        return;
                    }
            }
        }
        offAll(name) {
            let events = this.m_events.get(name);
            if (!events) {
                return;
            }
            events.length = 0;
        }
    }

    class BaseScript3D extends Laya.Script3D {
        findNodeByPath(path) {
            let listName = path.split("/");
            let node = this.owner;
            for (let i = 0; i < listName.length; i += 1) {
                node = node.getChildByName(listName[i]);
            }
            return node;
        }
        static findNodeByPath(owner, path) {
            let listName = path.split("/");
            let node = owner;
            for (let i = 0; i < listName.length; i += 1) {
                node = node.getChildByName(listName[i]);
            }
            return node;
        }
        get node() {
            if (!this._node) {
                this._node = this.owner;
            }
            return this._node;
        }
        setComData(data) {
            this._comData = data;
        }
        getComData() {
            return this._comData;
        }
        get ComData() {
            return this._comData;
        }
    }

    class Collider extends BaseScript3D {
        onStart() {
            this._colloder = this.owner.getComponent(Laya.PhysicsCollider);
            if (this._colloder == undefined) {
                this._colloder = this.owner.getComponent(Laya.Rigidbody3D);
            }
            if (this._colloder == undefined) {
                return;
            }
            this._colloder.isTrigger = false;
            this._colloder.collisionGroup = this._comData.Group;
            this._colloder.canCollideWith = this._comData.With;
        }
        setComData(data) {
            this._comData = data;
            this._type = this._comData.type;
        }
        get type() {
            return this._type;
        }
    }

    class Dictionary {
        constructor() {
            this._keys = null;
            this._values = null;
            this._keys = new Array();
            this._values = new Array();
        }
        destroy() {
        }
        setValue(key, value) {
            var index = this.indexOf(key);
            if (index >= 0) {
                this._values[index] = value;
                return;
            }
            this._keys.push(key);
            this._values.push(value);
        }
        containsKey(key) {
            return this._keys.indexOf(key) != -1;
        }
        forEach(callback) {
            var len = this._keys.length;
            for (let index = 0; index < len; ++index) {
                const key = this._keys[index];
                const value = this._values[index];
                const ret = callback(key, value);
                if (ret === false) {
                    return;
                }
            }
        }
        indexOf(key) {
            return this._keys.indexOf(key);
        }
        isExist(key) {
            return this.indexOf(key) != -1;
        }
        getValue(key) {
            var index = this.indexOf(key);
            return index < 0 ? null : this._values[index];
        }
        remove(key) {
            var index = this.indexOf(key);
            if (index >= 0) {
                this._keys.splice(index, 1);
                this._values.splice(index, 1);
                return true;
            }
            return false;
        }
        clear() {
            this._values.splice(0, this._values.length);
            this._keys.splice(0, this._keys.length);
        }
        get values() {
            return this._values;
        }
        get keys() {
            return this._keys;
        }
        get length() {
            return this._values.length;
        }
        isEmpty() {
            return this._values.length <= 0;
        }
    }

    class AstarNode extends Laya.Vector2 {
        constructor(x = 0, y = 0) {
            super(x, y);
            this.isWalk = true;
            this.StepWH = 1;
            this.xzOffset = 100;
            this._F = 0;
            this.G = 0;
            this.H = 0;
            this.parentNode = null;
            this.status = AstarNode.IN_NULL;
            this.aroundNodes = [];
            this._position = null;
            this.index = 0;
        }
        get F() {
            return this.G + this.H;
        }
        set F(value) {
            this._F = value;
        }
        get position() {
            if (this._position == null) {
                this._position = new Laya.Vector3(this.x * this.StepWH - this.xzOffset, 0, this.y * this.StepWH - this.xzOffset);
            }
            return this._position;
        }
    }
    AstarNode.IN_NULL = 0;
    AstarNode.IN_CLOSELIST = 1;
    AstarNode.IN_OPENLIST = 2;
    AstarNode.CORSS_EVALUATE = 10;
    AstarNode.OBLIQUE_EVALUATE = 14;

    class AstarMapHitTester {
        constructor() {
            this.nodeDic = new Dictionary();
            this.mapPath = [];
            this._aStarPointList = new Array();
        }
        getAroundNodes(node) {
            var retArray = new Array();
            retArray[0] = new Array();
            retArray[1] = new Array();
            if (node.aroundNodes.length <= 0) {
                this.findAllAroundNodes(node);
            }
            for (var i = 0; i < node.aroundNodes.length; i++) {
                var tempNode = node.aroundNodes[i];
                if (tempNode.isWalk) {
                    if (tempNode.status == AstarNode.IN_NULL)
                        retArray[0].push(tempNode);
                    else if (tempNode.status == AstarNode.IN_OPENLIST)
                        retArray[1].push(tempNode);
                }
            }
            return retArray;
        }
        getCurrentNode(point) {
            return null;
        }
        getWalkNodeByAroundNode(pIndex) {
            return 0;
        }
        findAllAroundNodes(node) {
        }
        destroy() {
        }
    }
    AstarMapHitTester.STEP_WIDTH = 10;
    AstarMapHitTester.STEP_HEIGHT = 10;

    class AstarSearcherPath {
        constructor() {
            this._closeList = new Array();
            this._openList = new Array();
        }
        searchMinAroundNode(fromNode, endNode, hittest) {
            this._clearList();
            this._fromNode = fromNode;
            this._endNode = endNode;
            var aroundNodes = hittest.getAroundNodes(fromNode);
            var in_null_nodes = aroundNodes[0];
            for (var i = 0; i < in_null_nodes.length; i++) {
                in_null_nodes[i].status = AstarNode.IN_OPENLIST;
                in_null_nodes[i].parentNode = fromNode;
                this.setEvaluate(in_null_nodes[i]);
                this._openList.push(in_null_nodes[i]);
            }
            if (this._openList.length == 0) {
                return null;
            }
            else {
                var nextNode = this.getNodeByMinFInOpenList2();
                return nextNode;
            }
        }
        search(from, end, hittest) {
            this._fromNode = from;
            this._endNode = end;
            if (!this._fromNode || !this._endNode) {
                return [];
            }
            this._clearList();
            var status = this.searchPath(this._fromNode, this._endNode, hittest);
            if (status) {
                return this.createPathArray(this._endNode);
            }
            else {
                return [from, end];
            }
        }
        searchPath(fromNode, endNode, hittest) {
            while (true) {
                fromNode.status = AstarNode.IN_CLOSELIST;
                this._closeList.push(fromNode);
                if (fromNode == endNode)
                    return true;
                var aroundNodes = hittest.getAroundNodes(fromNode);
                var in_null_nodes = aroundNodes[0];
                var in_open_nodes = aroundNodes[1];
                for (var i = 0; i < in_null_nodes.length; i++) {
                    in_null_nodes[i].status = AstarNode.IN_OPENLIST;
                    in_null_nodes[i].parentNode = fromNode;
                    this.setEvaluate(in_null_nodes[i]);
                    this._openList.push(in_null_nodes[i]);
                }
                for (var j = 0; j < in_open_nodes.length; j++) {
                    if (in_open_nodes[j].G > fromNode.G + this.getEvaluateG(fromNode, in_open_nodes[j])) {
                        in_open_nodes[j].parentNode = fromNode;
                        this.setEvaluate(in_open_nodes[j]);
                    }
                }
                if (this._openList.length == 0)
                    return false;
                fromNode = this.getNodeByMinFInOpenList();
            }
        }
        setEvaluate(node) {
            node.G = this.getEvaluateG(node, node.parentNode) + node.parentNode.G;
            node.H = (Math.abs(this._endNode.x - node.x) + Math.abs(this._endNode.y - node.y)) * AstarNode.CORSS_EVALUATE;
            node.F = node.G + node.H;
        }
        getEvaluateG(fromNode, endNode) {
            if (fromNode.x == endNode.x || fromNode.y == endNode.y)
                return AstarNode.CORSS_EVALUATE;
            else
                return AstarNode.OBLIQUE_EVALUATE;
        }
        getNodeByMinFInOpenList() {
            this._openList.sort(this.compare);
            return this._openList.shift();
        }
        getNodeByMinFInOpenList2() {
            this._openList.sort(this.compare);
            return this._openList[0];
        }
        compare(prevNode, nextNode) {
            if (prevNode.F > nextNode.F)
                return 1;
            else
                return -1;
        }
        createPathArray(endNode) {
            var pathArray = new Array();
            while (endNode != null) {
                pathArray.unshift(endNode);
                endNode = endNode.parentNode;
            }
            return pathArray;
        }
        _clearList() {
            for (var i = 0; i < this._closeList.length; i++) {
                this._closeList[i].parentNode = null;
                this._closeList[i].status = AstarNode.IN_NULL;
                this._closeList[i].G = 0;
                this._closeList[i].H = 0;
            }
            for (var i = 0; i < this._openList.length; i++) {
                this._openList[i].parentNode = null;
                this._openList[i].status = AstarNode.IN_NULL;
                this._openList[i].G = 0;
                this._openList[i].H = 0;
            }
            this._closeList.splice(0, this._closeList.length);
            this._openList.splice(0, this._openList.length);
        }
    }
    AstarSearcherPath.AROUNDLIST = [
        new Laya.Vector2(1, 0),
        new Laya.Vector2(0, 1),
        new Laya.Vector2(-1, 0),
        new Laya.Vector2(0, -1)
    ];

    class ObjectDic {
        constructor() {
            this._data = new Object();
        }
        setValue(key, value) {
            this._data[key] = value;
        }
        containsKey(key) {
            return this._data[key] != undefined;
        }
        getValue(key) {
            return this._data[key];
        }
        remove(key) {
            delete this._data[key];
        }
        get data() {
            return this._data;
        }
        clear() {
            this._data = new Object();
        }
    }

    class RoomMapHitTester extends AstarMapHitTester {
        constructor() {
            super();
            this.aStarDic = new ObjectDic();
            this.isReady = false;
            this.noRoads = [];
            this.shpere = null;
            this.spDic = new Dictionary();
        }
        createNode2(index) {
            let line = index % RoomMapHitTester.STEP;
            let corss = Math.floor(index / RoomMapHitTester.STEP);
            return this.createNode(line, corss);
        }
        createNode(line, cross) {
            let node = new AstarNode(line, cross);
            node.StepWH = RoomMapHitTester.STEP_WIDTH;
            node.xzOffset = RoomMapHitTester.XZOFFSET;
            node.index = cross * RoomMapHitTester.STEP + line;
            this.aStarDic.setValue(node.index, node);
            return node;
        }
        initMap(map) {
            this.shpere = new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(0.5, 16, 16));
            var mat = new Laya.UnlitMaterial();
            mat.albedoColor = new Laya.Vector4(1, 0, 0, 1);
            this.shpere.meshRenderer.material = mat;
        }
        addNoRoadPoints(index, sp2 = null) {
            this.noRoads.push(index);
        }
        addNoRoadPointsByPos2(pos) {
            let index = this.toPositionIndex(pos);
            this.addNoRoadPoints(index, null);
        }
        addNoRoadPointsByCube(cube) {
            var pos = cube.transform.position;
            var scale = cube.transform.localScale;
            var corss1 = this.toCorss(pos.z - scale.z / 2);
            var line1 = this.toLine(pos.x - scale.x / 2);
            var corss2 = this.toCorss(pos.z + scale.z / 2);
            var line2 = this.toLine(pos.x + scale.x / 2);
            for (var i = corss1; i <= corss2; i++) {
                for (var j = line1; j <= line2; j++) {
                    this.addNoRoadPoints(i * RoomMapHitTester.STEP + j, null);
                }
            }
        }
        addNoRoadPointsByPos(pos, scale) {
            var corss1 = this.toCorss(pos.z - scale.z / 2);
            var line1 = this.toLine(pos.x - scale.x / 2);
            var corss2 = this.toCorss(pos.z + scale.z / 2);
            var line2 = this.toLine(pos.x + scale.x / 2);
            for (var i = corss1; i <= corss2; i++) {
                for (var j = line1; j <= line2; j++) {
                    this.addNoRoadPoints(i * RoomMapHitTester.STEP + j, null);
                }
            }
        }
        toCorss(z) {
            return Math.round((z + RoomMapHitTester.XZOFFSET) / RoomMapHitTester.STEP_HEIGHT);
        }
        toLine(x) {
            return Math.round((x + RoomMapHitTester.XZOFFSET) / RoomMapHitTester.STEP_WIDTH);
        }
        toPositionIndex(pos) {
            return this.toCorss(pos.z) * RoomMapHitTester.STEP + this.toLine(pos.x);
        }
        findAllAroundNodes(node) {
            var i_b = (node.x - 1) <= 0 ? 0 : node.x - 1;
            var i_e = node.x + 1;
            var j_e = node.y + 1;
            for (; i_b <= i_e; i_b++) {
                var j_b = (node.y - 1) <= 0 ? 0 : node.y - 1;
                for (; j_b <= j_e; j_b++) {
                    let index = j_b * RoomMapHitTester.STEP + i_b;
                    var tempNode = this.aStarDic.getValue(index);
                    if (this.noRoads.indexOf(index) < 0 && (tempNode == undefined || tempNode == null)) {
                        tempNode = this.createNode(i_b, j_b);
                    }
                    if (tempNode != null && tempNode != node) {
                        node.aroundNodes.push(tempNode);
                    }
                }
            }
        }
        getWalkNodeByAroundNode(pIndex) {
            var distance = 100;
            let line = pIndex % RoomMapHitTester.STEP;
            let corss = Math.floor(pIndex / RoomMapHitTester.STEP);
            for (var g = 1; g < distance; g++) {
                var b_x = line - g;
                var b_y = corss - g;
                for (var ar = 0; ar < AstarSearcherPath.AROUNDLIST.length; ar++) {
                    for (var w = 0; w < 2 * g; w++) {
                        b_x += AstarSearcherPath.AROUNDLIST[ar].x;
                        b_y += AstarSearcherPath.AROUNDLIST[ar].y;
                        let index = b_y * RoomMapHitTester.STEP + b_x;
                        if ((b_x >= 0 && b_y >= 0) && this.noRoads.indexOf(index) < 0) {
                            return index;
                        }
                    }
                }
            }
            return 0;
        }
        getCurrentNode(point) {
            let index = this.toPositionIndex(point);
            if (this.noRoads.indexOf(index) >= 0) {
                index = this.getWalkNodeByAroundNode(index);
            }
            if (this.aStarDic.containsKey(index)) {
                return this.aStarDic.getValue(index);
            }
            else {
                return this.createNode2(index);
            }
        }
    }
    RoomMapHitTester.STEP_WIDTH = 0.5;
    RoomMapHitTester.STEP_HEIGHT = 0.5;
    RoomMapHitTester.STEP = 10000;
    RoomMapHitTester.XZOFFSET = 0;

    class RoomSearcher {
        constructor() {
            this.roomHit = null;
            this._pathSearcher = new AstarSearcherPath();
        }
        initRoomTester(map) {
            var hit = new RoomMapHitTester();
            hit.initMap(map);
            this.roomHit = hit;
        }
        addNoRoadPoints(index) {
            if (this.roomHit) {
                this.roomHit.addNoRoadPoints(index);
            }
        }
        addNoRoadPointsByCube(cube) {
            if (this.roomHit) {
                this.roomHit.addNoRoadPointsByCube(cube);
            }
        }
        addNoRoadPointsByPos(pos, scale) {
            if (this.roomHit) {
                this.roomHit.addNoRoadPointsByPos(pos, scale);
            }
        }
        addNoRoadPointsByPos2(pos) {
            if (this.roomHit) {
                this.roomHit.addNoRoadPointsByPos2(pos);
            }
        }
        getAstarNode(pos) {
            if (this.roomHit) {
                return this.roomHit.getCurrentNode(pos);
            }
        }
        searchPath(fromNode, endNode) {
            return this._pathSearcher.search(fromNode, endNode, this.roomHit);
        }
        searchPathForPos(fromNode, endNode) {
            let list = this.searchPath(fromNode, endNode);
            if (list.length > 0) {
                let retList = [];
                for (var i = 0; i < list.length; i++) {
                    retList.push(list[i].position);
                }
                return retList;
            }
            else {
                return [];
            }
        }
        searchMinAroundNode(fromNode, endNode) {
            return this._pathSearcher.searchMinAroundNode(fromNode, endNode, this.roomHit);
        }
        static get instance() {
            if (this._instance == null) {
                this._instance = new RoomSearcher();
            }
            return this._instance;
        }
    }
    RoomSearcher._instance = null;

    class AStarNoRoad extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.wPos = null;
            this.pos = null;
        }
        onStart() {
            this.wPos = this.node.transform.position.clone();
            this.pos = this.node.transform.localPosition.clone();
            this.initNoRoad(this._comData.zoneId, this._comData.map);
        }
        initNoRoad(Id, map) {
            let point = new Laya.Vector3(0, 0, 0);
            let maps = map.split(",");
            for (var i = 0; i < maps.length; i++) {
                let ps = maps[i].split("_");
                point.x = this.wPos.x + Number(ps[0]) * RoomMapHitTester.STEP_WIDTH;
                point.z = this.wPos.z + Number(ps[1]) * RoomMapHitTester.STEP_WIDTH;
                RoomSearcher.instance.addNoRoadPointsByPos2(point);
            }
        }
    }

    var ColliderType;
    (function (ColliderType) {
        ColliderType[ColliderType["NULL"] = 0] = "NULL";
        ColliderType[ColliderType["Player"] = 1] = "Player";
        ColliderType[ColliderType["End"] = 2] = "End";
        ColliderType[ColliderType["Diamon"] = 3] = "Diamon";
        ColliderType[ColliderType["Wall"] = 4] = "Wall";
    })(ColliderType || (ColliderType = {}));
    var NType;
    (function (NType) {
        NType[NType["NULL"] = 0] = "NULL";
        NType[NType["Diamond"] = 1] = "Diamond";
        NType[NType["AStar"] = 2] = "AStar";
        NType[NType["LobbyDesk01"] = 3] = "LobbyDesk01";
        NType[NType["Storage"] = 4] = "Storage";
        NType[NType["Parking"] = 5] = "Parking";
        NType[NType["PlayerUpgrade"] = 6] = "PlayerUpgrade";
        NType[NType["Elevator"] = 7] = "Elevator";
        NType[NType["TrashBin"] = 8] = "TrashBin";
        NType[NType["CleanerBase"] = 9] = "CleanerBase";
        NType[NType["Room_left"] = 10] = "Room_left";
        NType[NType["Room_right"] = 11] = "Room_right";
        NType[NType["Room_down"] = 12] = "Room_down";
        NType[NType["ToiletSmall_left"] = 13] = "ToiletSmall_left";
        NType[NType["ToiletSmall_right"] = 14] = "ToiletSmall_right";
        NType[NType["ToiletSmall_down"] = 15] = "ToiletSmall_down";
        NType[NType["Zone_1_1"] = 16] = "Zone_1_1";
        NType[NType["Zone_1_2"] = 17] = "Zone_1_2";
        NType[NType["Zone_1_3"] = 18] = "Zone_1_3";
        NType[NType["Zone_2_1"] = 19] = "Zone_2_1";
        NType[NType["Zone_2_2"] = 20] = "Zone_2_2";
        NType[NType["Zone_2_3"] = 21] = "Zone_2_3";
        NType[NType["Zone_2_4"] = 22] = "Zone_2_4";
        NType[NType["Zone_2_5"] = 23] = "Zone_2_5";
        NType[NType["Zone_2_6"] = 24] = "Zone_2_6";
        NType[NType["Zone_2_7"] = 25] = "Zone_2_7";
        NType[NType["Zone_2_8"] = 26] = "Zone_2_8";
        NType[NType["yinshuiji"] = 27] = "yinshuiji";
        NType[NType["Room_Big"] = 28] = "Room_Big";
        NType[NType["Walls"] = 29] = "Walls";
        NType[NType["Restaurant"] = 30] = "Restaurant";
        NType[NType["SwimmingPool"] = 31] = "SwimmingPool";
        NType[NType["zawujian_2"] = 32] = "zawujian_2";
        NType[NType["renwushengji_2"] = 33] = "renwushengji_2";
    })(NType || (NType = {}));

    class LogicRoom {
        constructor() {
            this.roomdataDic = new Dictionary();
            this.sideScript = new Dictionary();
            this.roomScripts = [];
            this.toilentScripts = [];
            this.yinShuiJianScripts = [];
            this.restaurant = null;
            this.swimPool = null;
            this.playerUpgrade = null;
            this.LobbyDesk = null;
            this.propPosList = [];
            this.VipPaths = [];
            this.pathDic = new Dictionary();
        }
        static registCompent() {
        }
        static registCompentWithName(name, clas) {
            this._name2Compent[name] = clas;
        }
        static getClassByName(name) {
            return this._name2Compent[name];
        }
        initData() {
            LogicRoom.registCompent();
        }
        getRoomData(id) {
            return this.roomdataDic.getValue(id);
        }
        get unlocks() {
            return LocalCache$1.get("LogicRoom._unlocks", [0]);
        }
        get unlockside() {
            return LocalCache$1.get("LogicRoom._unlockside", [0]);
        }
        has(id) {
            return Sets$1.has(this.unlocks, id);
        }
        haside(id) {
            return Sets$1.has(this.unlockside, id);
        }
        get guessStep() {
            return LocalCache$1.get("LogicRoom._guessStep", 0);
        }
        set guessStep(value) {
            LocalCache$1.set("LogicRoom._guessStep", value);
        }
        get star() {
            return LocalCache$1.get("LogicRoom._star_" + LogicData.instance.roomId, 0);
        }
        set star(value) {
            LocalCache$1.set("LogicRoom._star_" + LogicData.instance.roomId, value);
            EventMgr.Int.emit(EventType.StarChange);
        }
        openZone(zoneId, isEvn = true) {
            let arr = this.unlocks;
            arr.push(zoneId);
            LocalCache$1.set("LogicRoom._unlocks", arr);
            if (isEvn)
                EventMgr.Int.emit(EventType.OPEN_SIDE);
        }
        openSide(index, isEvn = true) {
            let arr = this.unlockside;
            arr.push(index);
            LocalCache$1.set("LogicRoom._unlockside", arr);
            if (isEvn)
                EventMgr.Int.emit(EventType.OPEN_SIDE, index);
        }
        updateOpenStep(isEvn = true) {
            let curStep = this.getStep(LogicData.instance.roomId);
            let isGoNext = true;
            for (var i = 0; i < this.sideScript.values.length; i++) {
                let obj = this.sideScript.values[i].sideObj;
                if (obj.openStep == curStep || obj.upgradeSteps.indexOf(curStep) >= 0) {
                    isGoNext = false;
                }
            }
            if (isGoNext) {
                this.setStep(LogicData.instance.roomId, curStep + 1, isEvn);
                EventMgr.Int.emit(EventType.STEP_MOVE_CAMERA, curStep + 1);
            }
            else {
                if (isEvn)
                    EventMgr.Int.emit(EventType.OPEN_SIDE);
            }
        }
        getSideObj(index, openStep, upgradeSteps) {
            return LocalCache$1.get("LogicRoom._side_" + index, { index: index, money: 0, level: 1, openStep: openStep, upgradeSteps: upgradeSteps, clean: [] });
        }
        setSideObj(obj) {
            LocalCache$1.set("LogicRoom._side_" + obj.index, { index: obj.index, money: obj.money, level: obj.level, openStep: obj.openStep, upgradeSteps: obj.upgradeSteps, clean: obj.clean });
        }
        getStep(roomId) {
            return LocalCache$1.get("LogicRoom._Step_" + roomId, 2);
        }
        setStep(roomId, step, isEvn = true) {
            LocalCache$1.set("LogicRoom._Step_" + roomId, step);
            if (isEvn)
                EventMgr.Int.emit(EventType.OPEN_SIDE);
        }
        clearAll() {
            this.sideScript.clear();
            this.roomScripts = [];
            this.toilentScripts = [];
            this.yinShuiJianScripts = [];
            this.propPosList = [];
            this.VipPaths = [];
            this.restaurant = null;
            this.swimPool = null;
            this.playerUpgrade = null;
            this.LobbyDesk = null;
        }
        addSideScript(index, script) {
            this.sideScript.setValue(index, script);
            switch (script.c_type) {
                case NType.Room_down:
                case NType.Room_right:
                case NType.Room_left:
                case NType.Room_Big:
                    this.roomScripts.push(script);
                    this.roomScripts.sort((a, b) => { return a.c_index < b.c_index ? -1 : 1; });
                    break;
                case NType.ToiletSmall_down:
                case NType.ToiletSmall_right:
                case NType.ToiletSmall_left:
                    this.toilentScripts.push(script);
                    break;
                case NType.yinshuiji:
                    this.yinShuiJianScripts.push(script);
                    break;
                case NType.Restaurant:
                    this.restaurant = script;
                    break;
                case NType.SwimmingPool:
                    this.swimPool = script;
                    break;
                case NType.PlayerUpgrade:
                    this.playerUpgrade = script;
                    break;
                case NType.LobbyDesk01:
                    this.LobbyDesk = script;
                    break;
            }
        }
        getReataruant() {
            if (this.restaurant && this.restaurant.isReady) {
                return this.restaurant;
            }
            else {
                return null;
            }
        }
        getSwimPool() {
            if (this.swimPool && this.swimPool.isReady) {
                return this.swimPool;
            }
            else {
                return null;
            }
        }
        getRoomInRead() {
            for (var i = 0; i < this.roomScripts.length; i++) {
                if (this.roomScripts[i].isReady) {
                    return this.roomScripts[i];
                }
            }
            return null;
        }
        getRoomInClean(zoneId) {
            for (var i = 0; i < this.roomScripts.length; i++) {
                if (this.roomScripts[i].c_zoneId == zoneId && this.roomScripts[i].isClean) {
                    return this.roomScripts[i];
                }
            }
            return null;
        }
        getOpenRooms() {
            let list = [];
            for (var i = 0; i < this.roomScripts.length; i++) {
                if (this.roomScripts[i].isOpening) {
                    list.push(this.roomScripts[i]);
                }
            }
            return list;
        }
        getToilentByZoneId(zoneId) {
            for (var i = 0; i < this.toilentScripts.length; i++) {
                if (this.toilentScripts[i].c_zoneId == zoneId && this.toilentScripts[i].isNull) {
                    return this.toilentScripts[i];
                }
            }
            return null;
        }
        getToiletZhiNull() {
            for (var i = 0; i < this.toilentScripts.length; i++) {
                if (this.toilentScripts[i].isZhiNull()) {
                    return this.toilentScripts[i];
                }
            }
            return null;
        }
        getYinShuiJianByZoneId(zoneId) {
            for (var i = 0; i < this.yinShuiJianScripts.length; i++) {
                if (this.yinShuiJianScripts[i].c_zoneId == zoneId && this.yinShuiJianScripts[i].isNull) {
                    return this.yinShuiJianScripts[i];
                }
            }
            return null;
        }
        getYinShuiJianZhiNull() {
            for (var i = 0; i < this.yinShuiJianScripts.length; i++) {
                if (this.yinShuiJianScripts[i].isZhiNull()) {
                    return this.yinShuiJianScripts[i];
                }
            }
            return null;
        }
        getPoolNeedMaojin() {
            if (this.swimPool.isNeedMaojin()) {
                return this.swimPool;
            }
            else {
                return null;
            }
        }
        getOpenZoneList() {
            let list = [];
            for (var i = 0; i < this.sideScript.values.length; i++) {
                if ((this.sideScript.values[i].c_type == NType.Zone_1_1 ||
                    this.sideScript.values[i].c_type == NType.Zone_1_2 ||
                    this.sideScript.values[i].c_type == NType.Zone_1_3 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_1 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_2 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_3 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_4 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_5 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_6 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_7 ||
                    this.sideScript.values[i].c_type == NType.Zone_2_8) && this.has(this.sideScript.values[i].c_zoneId)) {
                    list.push(this.sideScript.values[i]);
                }
            }
            return list;
        }
        getSideScript(index) {
            if (this.sideScript.containsKey(index)) {
                return this.sideScript.getValue(index);
            }
            else {
                return null;
            }
        }
        removeSideScript(index) {
            if (this.sideScript.containsKey(index)) {
                this.sideScript.remove(index);
            }
        }
        clearSideScript() {
            this.sideScript.clear();
        }
        getPathNode(index) {
            return this.pathDic.getValue(index);
        }
        getPathList(bIndex, eIndex) {
            let list = [];
            let curPath = null;
            let bPath = this.pathDic.getValue(bIndex);
            let ePath = this.pathDic.getValue(eIndex);
            let isNull = false;
            if (eIndex > bIndex) {
                curPath = ePath;
                do {
                    list.unshift(curPath.node.transform.position);
                    curPath = curPath.pNode;
                    if (curPath == null) {
                        isNull = true;
                        break;
                    }
                } while (curPath.index != bPath.index);
                list.unshift(bPath.node.transform.position);
            }
            else {
                curPath = bPath;
                do {
                    list.push(curPath.node.transform.position);
                    curPath = curPath.pNode;
                    if (curPath == null) {
                        isNull = true;
                        break;
                    }
                } while (curPath.index != ePath.index);
                list.push(ePath.node.transform.position);
            }
            if (isNull) {
                list = [];
                let eList = [];
                let bList = [];
                let someBListIndex = 0;
                curPath = bPath;
                do {
                    bList.push(curPath.index);
                    curPath = curPath.pNode;
                } while (curPath.index != 1);
                curPath = ePath;
                do {
                    eList.push(curPath.index);
                    someBListIndex = bList.indexOf(curPath.index);
                    if (someBListIndex >= 0) {
                        break;
                    }
                    curPath = curPath.pNode;
                } while (curPath.index != 1);
                let indexs = [];
                for (var i = 0; i < bList.length && i < someBListIndex; i++) {
                    indexs.push(bList[i]);
                }
                for (var i = eList.length - 1; i >= 0; i--) {
                    indexs.push(eList[i]);
                }
                for (var i = 0; i < indexs.length; i++) {
                    list.push(this.getPathNode(indexs[i]).node.transform.position);
                }
            }
            return list;
        }
    }
    LogicRoom.instance = new LogicRoom();
    LogicRoom._name2Compent = {};

    var SideType;
    (function (SideType) {
        SideType[SideType["NULL"] = 0] = "NULL";
        SideType[SideType["Open_Zone"] = 1] = "Open_Zone";
        SideType[SideType["Open_ROOM"] = 2] = "Open_ROOM";
        SideType[SideType["Open_CleanBase"] = 3] = "Open_CleanBase";
        SideType[SideType["Open_Toilent"] = 4] = "Open_Toilent";
        SideType[SideType["Open_Storage"] = 5] = "Open_Storage";
        SideType[SideType["Upgrade_LobbyDesk"] = 6] = "Upgrade_LobbyDesk";
        SideType[SideType["Open_Parking"] = 7] = "Open_Parking";
        SideType[SideType["Open_Elevator"] = 8] = "Open_Elevator";
        SideType[SideType["Check_Lobby"] = 9] = "Check_Lobby";
        SideType[SideType["GET_LobbyMoney"] = 10] = "GET_LobbyMoney";
        SideType[SideType["CLEAN_ROOM"] = 11] = "CLEAN_ROOM";
        SideType[SideType["Toilet_PUT"] = 12] = "Toilet_PUT";
        SideType[SideType["GET_Toilet"] = 13] = "GET_Toilet";
        SideType[SideType["GET_PARKING"] = 14] = "GET_PARKING";
        SideType[SideType["PARKING_CAR"] = 15] = "PARKING_CAR";
        SideType[SideType["GET_ToiletPaper"] = 16] = "GET_ToiletPaper";
        SideType[SideType["Prop_Box"] = 17] = "Prop_Box";
        SideType[SideType["TRASHBING"] = 18] = "TRASHBING";
        SideType[SideType["GET_Maojing"] = 19] = "GET_Maojing";
        SideType[SideType["GET_Yingliao"] = 20] = "GET_Yingliao";
        SideType[SideType["YinShuiJian_PUT"] = 21] = "YinShuiJian_PUT";
        SideType[SideType["UPGRADE_PLAYER"] = 22] = "UPGRADE_PLAYER";
        SideType[SideType["DIANTI"] = 23] = "DIANTI";
        SideType[SideType["GET_ROU"] = 24] = "GET_ROU";
        SideType[SideType["GET_ShuCai"] = 25] = "GET_ShuCai";
        SideType[SideType["PUT_FOOD_TABLE"] = 26] = "PUT_FOOD_TABLE";
        SideType[SideType["PUT_MAOJIN"] = 27] = "PUT_MAOJIN";
        SideType[SideType["Open_SUNBED"] = 28] = "Open_SUNBED";
        SideType[SideType["CLEAN_SunBed"] = 29] = "CLEAN_SunBed";
        SideType[SideType["Upgrade_WORKER"] = 30] = "Upgrade_WORKER";
        SideType[SideType["Upgrade_ROOM"] = 31] = "Upgrade_ROOM";
    })(SideType || (SideType = {}));
    class I_SideHandler {
        constructor() {
            this.caller = null;
            this.inStandCB = null;
            this.outStandCB = null;
            this.inWalkCB = null;
            this.outWalkCB = null;
        }
        init(caller, inStandCB, outStandCB, inWalkCB, outWalkCB) {
            this.caller = caller;
            this.inStandCB = inStandCB;
            this.outStandCB = outStandCB;
            this.inWalkCB = inWalkCB;
            this.outWalkCB = outWalkCB;
            return this;
        }
    }
    class SidePointData {
        constructor() {
            this.sideInPointDic = new ObjectDic();
            this.m_callbacks = new Map();
            this.inSideType = 0;
            this.inSideId = 0;
            this.walkSideType = 0;
            this.walkSideId = 0;
        }
        addCB(sideType, caller, inStandCB, outStandCB, inWalkCB, outWalkCB) {
            if (sideType == SideType.NULL || !caller)
                return;
            let handler = this.m_callbacks.get(sideType);
            if (handler) {
                this.m_callbacks.delete(sideType);
            }
            handler = new I_SideHandler().init(caller, inStandCB, outStandCB, inWalkCB, outWalkCB);
            this.m_callbacks.set(sideType, handler);
        }
        checkSideType(index) {
            if (this.sideInPointDic.containsKey(index)) {
                let value = this.sideInPointDic.getValue(index);
                let type = Math.floor(value / 10000);
                let sideId = Math.floor(value % 10000);
                return [type, sideId];
            }
            else {
                return [0, 0];
            }
        }
        runInStandCB(type, sideId) {
            let handler = this.m_callbacks.get(type);
            if (handler && handler.inStandCB) {
                handler.inStandCB.call(handler.caller, sideId);
            }
        }
        runOutStandCB(type, sideId) {
            let handler = this.m_callbacks.get(type);
            if (handler && handler.outStandCB) {
                handler.outStandCB.call(handler.caller, sideId);
            }
        }
        runInWalkCB(type, sideId) {
            let handler = this.m_callbacks.get(type);
            if (handler && handler.inWalkCB) {
                handler.inWalkCB.call(handler.caller, sideId);
            }
        }
        runOutWalkCB(type, sideId) {
            let handler = this.m_callbacks.get(type);
            if (handler && handler.outWalkCB) {
                handler.outWalkCB.call(handler.caller, sideId);
            }
        }
        checkSideTypeForStand(index) {
            let values = this.checkSideType(index);
            let type = values[0];
            let sideId = values[1];
            if (type > 0 && sideId > 0 && this.inSideType != type && this.inSideId != sideId) {
                this.inSideType = type;
                this.inSideId = sideId;
                this.runInStandCB(type, sideId);
            }
            if (this.inSideType != 0 && this.inSideId != 0) {
                if (type == 0 || sideId == 0) {
                    this.runOutStandCB(this.inSideType, this.inSideId);
                    this.inSideType = 0;
                    this.inSideId = 0;
                }
            }
        }
        checkSideTypeForWalk(index) {
            let values = this.checkSideType(index);
            let type = values[0];
            let sideId = values[1];
            if (this.inSideType != 0 && this.inSideId != 0) {
                if (type == 0 || sideId == 0 || type != this.inSideType || sideId != this.inSideId) {
                    this.runOutStandCB(this.inSideType, this.inSideId);
                    this.inSideType = 0;
                    this.inSideId = 0;
                }
            }
            if (type > 0 && sideId > 0) {
                if (this.walkSideType != type || this.walkSideId != sideId) {
                    if (this.walkSideType > 0 || this.walkSideId > 0) {
                        this.runOutWalkCB(this.walkSideType, this.walkSideId);
                    }
                    this.runInWalkCB(type, sideId);
                }
            }
            else {
                if (this.walkSideType > 0 && this.walkSideId > 0) {
                    this.runOutWalkCB(this.walkSideType, this.walkSideId);
                }
            }
            this.walkSideType = type;
            this.walkSideId = sideId;
        }
        addSideToPoint(pos, scale, type, sideId) {
            var corss1 = this.toCorss(pos.z - scale.z / 2);
            var line1 = this.toLine(pos.x - scale.x / 2);
            var corss2 = this.toCorss(pos.z + scale.z / 2);
            var line2 = this.toLine(pos.x + scale.x / 2);
            var list = [];
            for (var i = corss1; i <= corss2; i++) {
                for (var j = line1; j <= line2; j++) {
                    let index = i * MoveManager.MAX + j;
                    this.sideInPointDic.setValue(index, type * 10000 + sideId);
                    list.push(index);
                }
            }
            return list;
        }
        addSideToPointCube(cube, type, sideId) {
            var pos = cube.transform.position;
            var scale = cube.transform.localScale;
            var corss1 = this.toCorss(pos.z - scale.z / 2);
            var line1 = this.toLine(pos.x - scale.x / 2);
            var corss2 = this.toCorss(pos.z + scale.z / 2);
            var line2 = this.toLine(pos.x + scale.x / 2);
            var list = [];
            for (var i = corss1; i <= corss2; i++) {
                for (var j = line1; j <= line2; j++) {
                    let index = i * MoveManager.MAX + j;
                    this.sideInPointDic.setValue(index, type * 10000 + sideId);
                    list.push(index);
                }
            }
            return list;
        }
        removeSide(list) {
            if (!!list && list.length > 0) {
                for (var i = 0; i < list.length; i++) {
                    this.sideInPointDic.remove(list[i]);
                }
            }
        }
        clearAll() {
            this.sideInPointDic.clear();
        }
        toCorss(z) {
            return Math.floor(z / MoveManager.STEP_HEIGHT);
        }
        toLine(x) {
            return Math.floor(x + 100 / MoveManager.STEP_WIDTH);
        }
    }
    class MoveManager {
        constructor() {
            this.sideInPointDic = new ObjectDic();
            this.daojuInPointDic = new ObjectDic();
            this.sidePointData = new SidePointData();
            this.rotate = 0;
            this.dis = 0;
            this.F_Size = 2;
            this.bitPosIndexDic = new ObjectDic();
            this.E_Size = 1;
            this.energyPosIndexDic = new ObjectDic();
        }
        clearAll() {
            this.sidePointData.clearAll();
            this.daojuInPointDic.clear();
            this.clearEnergyPoints();
        }
        addSideCB(sideType, caller, inStandCB, outStandCB, inWalkCB, outWalkCB) {
            this.sidePointData.addCB(sideType, caller, inStandCB, outStandCB, inWalkCB, outWalkCB);
        }
        addSideToPoint(pos, scale, type, sideId) {
            return this.sidePointData.addSideToPoint(pos, scale, type, sideId);
        }
        addSideToPointCube(cube, type, sideId) {
            return this.sidePointData.addSideToPointCube(cube, type, sideId);
        }
        removeSide(list) {
            this.sidePointData.removeSide(list);
        }
        checkSideTypeForStand(index) {
            this.sidePointData.checkSideTypeForStand(index);
        }
        checkSideTypeForWalk(index) {
            this.sidePointData.checkSideTypeForWalk(index);
        }
        addDaojuToPoint(pos, scale, type, propId) {
            var corss1 = this.toCorss(pos.z - scale.z / 2);
            var line1 = this.toLine(pos.x - scale.x / 2);
            var corss2 = this.toCorss(pos.z + scale.z / 2);
            var line2 = this.toLine(pos.x + scale.x / 2);
            var list = [];
            for (var i = corss1; i <= corss2; i++) {
                for (var j = line1; j <= line2; j++) {
                    let index = i * MoveManager.MAX + j;
                    this.daojuInPointDic.setValue(index, type * 100000000 + propId);
                    list.push(index);
                }
            }
            return list;
        }
        removeDaoju(list) {
            for (var i = 0; i < list.length; i++) {
                this.daojuInPointDic.remove(list[i]);
            }
        }
        checkDaojuTypeOnWalk(index) {
            if (this.daojuInPointDic.containsKey(index)) {
                let value = this.daojuInPointDic.getValue(index);
                let type = Math.floor(value / 100000000);
                let propId = Math.floor(value % 100000000);
                return [type, propId];
            }
            else {
                return [0, 0];
            }
        }
        toCorss(z) {
            return Math.floor(z / MoveManager.STEP_HEIGHT);
        }
        toLine(x) {
            return Math.floor(x + 100 / MoveManager.STEP_WIDTH);
        }
        toPositionIndex(pos) {
            return this.toCorss(pos.z) * MoveManager.MAX + this.toLine(pos.x);
        }
        lookAt(eye, target, up) {
            var m_quaternion = new Laya.Quaternion();
            Laya.Quaternion.lookAt(new Laya.Vector3(eye.x, 0, eye.z * -1), new Laya.Vector3(target.x, 0, target.z * -1), up, m_quaternion);
            return m_quaternion;
        }
        randR(r) {
            return (Math.random() * r) * (Math.random() * 2 < 1 ? 1 : -1);
        }
        clearBitPoints() {
            this.bitPosIndexDic.clear();
        }
        toCorssF(z) {
            return Math.round((z + 100) / this.F_Size);
        }
        toLineF(x) {
            return Math.round((x + 100) / this.F_Size);
        }
        toPositionIndexF(pos) {
            return this.toCorssF(pos.z) * 1000 + this.toLineF(pos.x);
        }
        updateBitPosIndex(pos, posIndex, bitIndex, bitNode) {
            let index = this.toPositionIndexF(pos);
            if (posIndex != index) {
                let list = this.bitPosIndexDic.getValue(posIndex);
                if (list) {
                    list.remove(bitIndex);
                }
                let list2 = this.bitPosIndexDic.getValue(index);
                if (!list2) {
                    list2 = new ObjectDic();
                    this.bitPosIndexDic.setValue(index, list2);
                }
                list2.setValue(bitIndex, bitNode);
            }
            return index;
        }
        removeBitPosIndex(posIndex, bitIndex) {
            let list = this.bitPosIndexDic.getValue(posIndex);
            if (list) {
                list.remove(bitIndex);
            }
        }
        getBitObjectDic(posIndex) {
            return this.bitPosIndexDic.getValue(posIndex);
        }
        clearEnergyPoints() {
            this.energyPosIndexDic.clear();
        }
        toCorssE(z) {
            return Math.round((z + 100) / this.E_Size);
        }
        toLineE(x) {
            return Math.round((x + 100) / this.E_Size);
        }
        toPositionIndexE(pos) {
            return this.toCorssE(pos.z) * 1000 + this.toLineE(pos.x);
        }
        setEnergyPosIndex(pos, propId) {
            let index = this.toPositionIndexE(pos);
            let list2 = this.energyPosIndexDic.getValue(index);
            if (!list2) {
                list2 = new ObjectDic();
                this.energyPosIndexDic.setValue(index, list2);
            }
            list2.setValue(propId, propId);
            return index;
        }
        removeEnergyPosIndex(posIndex, propId) {
            let list = this.energyPosIndexDic.getValue(posIndex);
            if (list) {
                list.remove(propId);
            }
        }
        getEnergyObjectDic(posIndex) {
            return this.energyPosIndexDic.getValue(posIndex);
        }
        static get instance() {
            if (this._instance == null) {
                this._instance = new MoveManager();
            }
            return this._instance;
        }
    }
    MoveManager._instance = null;
    MoveManager.STEP_WIDTH = 0.2;
    MoveManager.STEP_HEIGHT = 0.2;
    MoveManager.MAX = 1000;

    class State extends Laya.AnimatorStateScript {
        constructor() {
            super();
            this.relation = {};
            this.isPlaying = false;
        }
        onStateEnter() {
            this.isPlaying = true;
        }
        onStateUpdate() {
        }
        onStateExit() {
            this.isPlaying = false;
            if (this.nameNextTemp) {
                this.player.playAnimator(this.nameNextTemp, 0, 0);
                this.nameNextTemp = null;
            }
            else if (this.nameNext) {
                this.player.playAnimator(this.nameNext, 0, 0);
            }
            if (this.handlerExit) {
                this.handlerExit.run();
            }
        }
        checkRelation(name) {
            return this.relation[name];
        }
    }
    class Animator extends Laya.Script3D {
        constructor() {
            super();
            this.speedBase = 1;
            this.state2speed = {};
            this._callbackAnimPlay = null;
        }
        set speed(speed) {
            this.speedBase = speed;
            this.animator.speed = speed * this.getStateSpeed(this.animator.getCurrentAnimatorPlayState().animatorState.name);
        }
        get speed() {
            return this.speedBase;
        }
        showEffectHandler() {
            this.eventCall && this.eventCall.run();
        }
        get animator() {
            if (!this._animator) {
                this._animator = this.owner.getComponent(Laya.Animator);
            }
            return this._animator;
        }
        get currentState() {
            let state = this.getCurrentPlayState();
            return state.name;
        }
        onAwake() {
        }
        onStart() {
        }
        setStateSpeed(name, speed) {
            this.state2speed[name] = speed;
        }
        getStateSpeed(name) {
            return this.state2speed[name] || 1;
        }
        setOnAnimPlayCallback(callback) {
            this._callbackAnimPlay = callback;
        }
        addScriptPlayState(layerIndex, name, nameNext, relation, onPlayComplete) {
            let state = this.animator.getControllerLayer(layerIndex).getAnimatorState(name);
            if (state) {
                let script = state.addScript(State);
                script.player = this;
                script.name = name;
                script.nameNext = nameNext;
                script.handlerExit = onPlayComplete;
                if (relation) {
                    for (let i = 0; i < relation.length; i++) {
                        script.relation[relation[i]] = true;
                    }
                }
            }
        }
        getScriptPlayState(layerIndex, name) {
            let state = this.animator.getControllerLayer(layerIndex).getAnimatorState(name);
            if (state) {
                return state.getScript(State);
            }
            return null;
        }
        getCurrentPlayState() {
            let state = this.animator.getCurrentAnimatorPlayState().animatorState;
            if (state) {
                return state.getScript(State);
            }
            return null;
        }
        play(name, layerIndex, normalizedTime) {
            if (name == "")
                return;
            let state = this.getCurrentPlayState();
            if (state) {
                if (state.nameNext == name) {
                    return;
                }
                let stateNew = this.getScriptPlayState(layerIndex, name);
                if (stateNew && state.checkRelation(stateNew.nameNext)) {
                    state.nameNextTemp = stateNew.nameNext;
                    return;
                }
            }
            this.playAnimator(name, layerIndex, normalizedTime);
        }
        playAnimator(name, layerIndex, normalizedTime) {
            this.animator.play(name, layerIndex, normalizedTime);
            this.lastName = name;
            this.speed = this.speedBase;
            if (this._callbackAnimPlay)
                this._callbackAnimPlay(name);
        }
        playCrossFade(name, transitionDuration, layerIndex, normalizedTime) {
            this.animator.crossFade(name, transitionDuration, layerIndex, normalizedTime);
            this.lastName = name;
        }
        isAnimatorFinish() {
            let animState = this.animator.getCurrentAnimatorPlayState();
            if (animState.normalizedTime >= 1) {
                return true;
            }
            else {
                return false;
            }
        }
        isAnimatorFinishPercent(percent) {
            let animState = this.animator.getCurrentAnimatorPlayState();
            if (animState.normalizedTime >= percent) {
                return true;
            }
            else {
                return false;
            }
        }
        getAnimDuration(layerIndex, name) {
            let animatorState = this.animator.getControllerLayer(layerIndex).getAnimatorState(name);
            let clipDuration = animatorState.clip.duration() * (animatorState.clipEnd - animatorState.clipStart);
            return clipDuration;
        }
        set aniSpeed(value) {
            this._animator.speed = value;
        }
        get aniSpeed() {
            return this._animator.speed;
        }
    }

    class MovePath extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.transfrom = null;
            this.path = null;
            this.speed = 0;
            this.callBack = null;
            this.isMove = false;
            this.index = 0;
            this.time = 0;
            this.all = 0;
            this.out = new Laya.Vector3(0, 0, 0);
        }
        onAwake() {
            this.transfrom = this.node.transform;
        }
        onUpdate() {
            if (this.isMove) {
                if (this.time <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.time / this.all, this.out);
                    this.transfrom.position = this.out;
                }
                else {
                    this.gotoMove();
                }
                this.time++;
            }
        }
        movePath(path, speed, callback) {
            this.path = path;
            this.speed = speed;
            this.callBack = callback;
            this.isMove = true;
            this.index = -1;
            this.gotoMove();
        }
        gotoMove() {
            this.index++;
            if (this.index < this.path.length - 1) {
                this.bPos = this.path[this.index];
                this.ePos = this.path[this.index + 1];
                this.time = 0;
                this.all = Math.max(1, Math.floor(Laya.Vector3.distance(this.bPos, this.ePos) * ((1 - (this.speed - 100) / 100) * 20)));
                this.transfrom.rotation = MoveManager.instance.lookAt(this.bPos, this.ePos, new Laya.Vector3(0, 1, 0));
            }
            else {
                this.isMove = false;
                this.callBack.run();
            }
        }
    }

    var AnimState$8;
    (function (AnimState) {
        AnimState["Idle"] = "BoredIdle";
        AnimState["Run"] = "CatWalk";
        AnimState["Work"] = "CleanerWorking";
    })(AnimState$8 || (AnimState$8 = {}));
    class CleanerAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$8.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$8.Idle);
            this.animator.addScriptPlayState(0, AnimState$8.Run);
            this.animator.addScriptPlayState(0, AnimState$8.Work);
        }
        playIdle() {
            this.play(AnimState$8.Idle);
        }
        playRun() {
            this.play(AnimState$8.Run);
        }
        playWork() {
            this.play(AnimState$8.Work);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class CleanerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.zoneId = 0;
            this.loadPrefabsName = "";
            this.speed = 0;
            this.transform = null;
            this.movePath = null;
            this.fristPos = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.toRoom = null;
            this.curCleanId = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.fristPos = this.transform.position.clone();
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == CleanerNode.MOVE_WAITE) {
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.checkRoom();
                    this.t = 0;
                }
            }
            else if (this.state == CleanerNode.MOVE_CLEAN) {
                this.t += Laya.timer.delta;
                if (this.t >= this.all) {
                    this.onCleanComplete();
                }
            }
        }
        toWaite() {
            this.state = CleanerNode.MOVE_WAITE;
            this.t = 0;
            this.all = 1000;
            this.playIdle();
        }
        checkRoom() {
            let room = LogicRoom.instance.getRoomInClean(this.zoneId);
            if (room) {
                this.toRoom = room;
                this.moveToRoomMen();
            }
        }
        moveToRoomMen() {
            this.state = CleanerNode.MOVE_TO_ROOM;
            this.curCleanId = 0;
            let path = [this.transform.position.clone()];
            let pathNode = LogicRoom.instance.getPathNode(this.toRoom.c_mainPathIndex);
            path.push(pathNode.node.transform.position);
            path.push(this.toRoom.getCleanMenPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToRoomMenComplete));
            this.playRun();
        }
        onMoveToRoomMenComplete() {
            let cleanId = this.toRoom.getCanCleanId();
            if (cleanId > 0) {
                this.moveToCleanPoint(cleanId);
            }
            else {
                this.onBackToMenComplete();
            }
        }
        moveToCleanPoint(cleanId) {
            this.state = CleanerNode.MOVE_TO_CLEAN;
            let path = this.toRoom.getCleanerPath(this.curCleanId, cleanId);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToCleanPointComplete));
            this.playRun();
            this.curCleanId = cleanId;
        }
        onMoveToCleanPointComplete() {
            this.state = CleanerNode.MOVE_CLEAN;
            this.t = 0;
            this.all = 1000;
            this.playWork();
        }
        onCleanComplete() {
            this.toRoom.updateCleanTime(this.curCleanId, 100, true);
            this.findOtherCleanId();
        }
        findOtherCleanId() {
            this.state = CleanerNode.MOVE_FIND_CLEAN;
            let cleanId = this.toRoom.getCanCleanId();
            if (cleanId > 0) {
                this.moveToCleanPoint(cleanId);
            }
            else {
                this.backToMen();
            }
        }
        backToMen() {
            this.state = CleanerNode.MOVE_BACK_MEN;
            let path = this.toRoom.getCleanerPath(this.curCleanId, 0);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onBackToMenComplete));
            this.playRun();
        }
        onBackToMenComplete() {
            let path = [this.transform.position.clone()];
            let pathNode = LogicRoom.instance.getPathNode(this.toRoom.c_mainPathIndex);
            path.push(pathNode.node.transform.position);
            path.push(this.fristPos);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onBackToCheComplete));
        }
        onBackToCheComplete() {
            this.toWaite();
        }
        changeChar() {
            this.isLoading = true;
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.character) {
                        this.character.destroy();
                        this.character = null;
                    }
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(CleanerAnim);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
        playWork() {
            if (this._anim) {
                this._anim.playWork();
            }
        }
    }
    CleanerNode.MOVE_NULL = 0;
    CleanerNode.MOVE_WAITE = 1;
    CleanerNode.MOVE_TO_ROOM = 2;
    CleanerNode.MOVE_TO_CLEAN = 3;
    CleanerNode.MOVE_CLEAN = 4;
    CleanerNode.MOVE_FIND_CLEAN = 5;
    CleanerNode.MOVE_BACK_MEN = 6;

    class LockedZone extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._sheets = "0123456789/?+-x÷.:a";
            this.nums = [];
            this.names = [];
            this.count = 0;
            this.max = 0;
            this.Jianju = 0.5;
        }
        onAwake() {
            let money = this.findNodeByPath("Money");
            for (var i = 0; i < money.numChildren; i++) {
                this.nums.push(money.getChildAt(i));
            }
        }
        onStart() {
            this.showStar();
        }
        init(count, max) {
            this.count = count;
            this.max = max;
        }
        changeStar(count) {
            this.count = count;
            this.showStar();
        }
        clear() {
            this.node.destroy();
        }
        showStar() {
            this.showText(this.count + "/" + this.max + "a");
        }
        showText(text) {
            var str = text.toString();
            let b = (str.length * this.Jianju) / 2;
            for (var i = 0; i < this.nums.length; i++) {
                if (i < str.length) {
                    this.nums[i].active = true;
                    if(!this.nums[i])return;
                    this.nums[i].transform.localPosition = new Laya.Vector3(b - this.Jianju / 2, 0, 0);
                    b -= this.Jianju;
                    let mat = this.nums[i].meshRenderer.material;
                    Laya.loader.create(RescoureData.getNums(this._sheets.indexOf(str.charAt(i))), Laya.Handler.create(this, (tex) => {
                        mat.albedoTexture = tex;
                    }));
                }
                else {
                    this.nums[i].active = false;
                }
            }
        }
    }

    class PriceBorder extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._sheets = "0123456789/?+-x÷.:";
            this._sheets2 = "0123456789abcdefghijklmnopqrstuvwxyz";
            this.Icon = null;
            this.nums = [];
            this.namesps = [];
            this.indexList1 = [];
            this.index = 0;
            this.sideType = null;
            this.money = 0;
            this.names = "";
            this.iconUrl = "";
            this.Jianju = 0.5;
            this.Jianju2 = 0.5;
        }
        onAwake() {
            this.Icon = this.findNodeByPath("Icon");
            let money = this.findNodeByPath("Money");
            for (var i = 0; i < money.numChildren; i++) {
                this.nums.push(money.getChildAt(i));
            }
            let NameText = this.findNodeByPath("NameText");
            for (var i = 0; i < NameText.numChildren; i++) {
                this.namesps.push(NameText.getChildAt(i));
            }
        }
        onStart() {
            this.addSide();
            this.initIcon();
            this.showNames();
            this.showMoneys(this.money);
        }
        init(index, sideType, money, names, iconUrl) {
            this.index = index;
            this.sideType = sideType;
            this.money = money;
            this.names = names;
            this.iconUrl = iconUrl;
        }
        clear() {
            MoveManager.instance.removeSide(this.indexList1);
            this.node.destroy();
        }
        addSide() {
            this.indexList1 = MoveManager.instance.addSideToPoint(this.node.transform.position, new Laya.Vector3(2, 0, 2), this.sideType, this.index);
        }
        initIcon() {
            let mat = this.Icon.meshRenderer.material;
            Laya.loader.create(RescoureData.getIcon(this.iconUrl), Laya.Handler.create(this, (tex) => {
                mat.albedoTexture = tex;
            }));
        }
        showNames() {
            this.showName(this.names);
        }
        showMoneys(money) {
            this.money = money;
            this.showText(this.money + "");
        }
        showText(text) {
            var str = text.toString();
            let b = (str.length * this.Jianju) / 2;
            for (var i = 0; i < this.nums.length; i++) {
                if (i < str.length) {
                    this.nums[i].active = true;
                    this.nums[i].transform.localPosition = new Laya.Vector3(b - this.Jianju / 2, 0, 0);
                    b -= this.Jianju;
                    let mat = this.nums[i].meshRenderer.material;
                    Laya.loader.create(RescoureData.getNums(this._sheets.indexOf(str.charAt(i))), Laya.Handler.create(this, (tex) => {
                        mat.albedoTexture = tex;
                    }));
                }
                else {
                    this.nums[i].active = false;
                }
            }
        }
        showName(text) {
            var str = text.toString();
            let b = (str.length * this.Jianju2) / 2;
            for (var i = 0; i < this.namesps.length; i++) {
                if (i < str.length) {
                    this.namesps[i].active = true;
                    this.namesps[i].transform.localPosition = new Laya.Vector3(b - this.Jianju2 / 2, 0, 0);
                    b -= this.Jianju2;
                    let mat = this.namesps[i].meshRenderer.material;
                    Laya.loader.create(RescoureData.getNums("n_" + this._sheets2.indexOf(str.charAt(i))), Laya.Handler.create(this, (tex) => {
                        mat.albedoTexture = tex;
                    }));
                    this.namesps[i].active = false;
                }
                else {
                    this.namesps[i].active = false;
                }
            }
        }
    }

    class PropEnergy extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.propType = 0;
            this.eggId = 0;
            this.count = 1;
            this.propId = 0;
            this._state = 0;
            this.posIndex = 0;
            this.bPos = null;
            this.ePos = new Laya.Vector3(0, 0, 0);
            this.out = new Laya.Vector3();
            this.t = 0;
            this.all = 0;
            this.delay = 0;
            this.toTransform = null;
            this.offsetPos = null;
            this.callBack = null;
        }
        onAwake() {
        }
        onUpdate() {
            if (this._state == PropEnergy.MOVE_TO_ADD) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.out.y = numberOnCubicBezier2(this.bPos.y, Math.max(this.bPos.y, this.ePos.y) + 5, this.ePos.y, this.t / this.all);
                    this.node.transform.position = this.out;
                }
                else {
                    this.node.transform.localRotationEuler = new Laya.Vector3(0, Math.random() * 360, 0);
                    this._state = PropEnergy.MOVE_NULL;
                    this.onAddComplete();
                }
                this.t++;
            }
            else if (this._state == PropEnergy.MOVE_TO_ADD2) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.out.y = numberOnCubicBezier2(this.bPos.y, Math.max(this.bPos.y, this.ePos.y) + 5, this.ePos.y, this.t / this.all);
                    this.node.transform.localPosition = this.out;
                }
                else {
                    this._state = PropEnergy.MOVE_NULL;
                }
                this.t++;
            }
            else if (this._state == PropEnergy.MOVE_WAITE_DESTROY) {
                this.t += Laya.timer.delta;
                if (this.t >= this.all) {
                    this.destroyEnergy();
                }
            }
            else if (this._state == PropEnergy.MOVE_TO_PLAYER) {
                this.delay--;
                if (this.delay < 0) {
                    if (this.t <= this.all) {
                        Laya.Vector3.add(this.toTransform.position, this.offsetPos, this.ePos);
                        Laya.Vector3.lerp(this.node.transform.position, this.ePos, this.t / this.all, this.out);
                        this.node.transform.position = this.out.clone();
                    }
                    else {
                        this._state = PropEnergy.MOVE_NULL;
                        this.onToPlayerComplete();
                    }
                    this.t++;
                }
            }
            else if (this._state == PropEnergy.MOVE_TO_TARGET) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.out.y = numberOnCubicBezier2(this.bPos.y, Math.max(this.bPos.y, this.ePos.y) + 2, this.ePos.y, this.t / this.all);
                    this.node.transform.localPosition = this.out;
                }
                else {
                    this._state = PropEnergy.MOVE_NULL;
                    if (this.callBack) {
                        this.callBack.runWith(this.count);
                    }
                    this.node.destroy();
                }
                this.t++;
            }
        }
        toAdd(bPos, ePos) {
            this._state = PropEnergy.MOVE_TO_ADD;
            this.bPos = bPos;
            this.ePos = ePos;
            this.t = 0;
            this.all = 15;
        }
        toAdd2(bPos, ePos) {
            this._state = PropEnergy.MOVE_TO_ADD2;
            this.bPos = bPos;
            this.ePos = ePos;
            this.t = 0;
            this.all = 15;
        }
        toTarget(bPos, ePos, callback) {
            this._state = PropEnergy.MOVE_TO_TARGET;
            this.callBack = callback;
            this.bPos = bPos;
            this.ePos = ePos;
            this.t = 0;
            this.all = 15;
        }
        toPlayer(toTransform, delay, offset = new Laya.Vector3(0, 0, 0)) {
            MoveManager.instance.removeEnergyPosIndex(this.posIndex, this.propId);
            this.toTransform = toTransform;
            this.offsetPos = offset;
            this.delay = delay;
            this._state = PropEnergy.MOVE_TO_PLAYER;
            this.t = 0;
            this.all = 10;
        }
        toWaiteDestory() {
            this._state = PropEnergy.MOVE_WAITE_DESTROY;
            this.t = 0;
            this.all = 10 * 1000;
        }
        onAddComplete() {
            this.posIndex = MoveManager.instance.setEnergyPosIndex(this.node.transform.position, this.propId);
        }
        onToPlayerComplete() {
            PropEnergy.play10();
            LogicProp$1.instance.add(this.propType, this.count, false);
            this.node.destroy();
        }
        destroyEnergy() {
            MoveManager.instance.removeEnergyPosIndex(this.posIndex, this.propId);
            this.node.destroy();
        }
        static play10() {
            let t = new Date().getTime();
            if (t - PropEnergy.t > 200) {
                AudioMgr$1.instance.play_sound(10);
                PropEnergy.t = t;
            }
        }
    }
    PropEnergy.MOVE_NULL = 0;
    PropEnergy.MOVE_TO_ADD = 1;
    PropEnergy.MOVE_TO_PLAYER = 2;
    PropEnergy.MOVE_TO_TARGET = 3;
    PropEnergy.MOVE_WAITE_DESTROY = 4;
    PropEnergy.MOVE_TO_ADD2 = 5;
    PropEnergy.t = 0;

    class Aside extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._sideObj = null;
            this.isCanBuy = true;
            this.preCount = 0;
            this.cCount = 0;
            this.priceScript = null;
            this.starScript = null;
            this._max = 0;
            this.isHasStarZone = false;
            this._c_upgradeSteps = [];
            this._c_upgradeMoveCamera = [];
            this._c_moneyLvs = [];
            this._c_speeds = [];
            this._c_stars = [];
        }
        onAwake() {
            EventMgr.Int.on(EventType.OPEN_SIDE, this.onChangeSideShow, this);
            EventMgr.Int.on(EventType.STEP_MOVE_CAMERA, this.onCheckStepForMoveCamera, this);
        }
        onDestroy() {
            EventMgr.Int.off(EventType.OPEN_SIDE, this.onChangeSideShow, this);
            EventMgr.Int.off(EventType.STEP_MOVE_CAMERA, this.onCheckStepForMoveCamera, this);
        }
        onStart() {
            this.sideObj = LogicRoom.instance.getSideObj(this.c_index, this.c_openStep, this.c_upgradeSteps);
            LogicRoom.instance.addSideScript(this.c_index, this);
        }
        onChangeSideShow() {
        }
        onCheckStepForMoveCamera(step) {
            if (this.c_openStep == step) {
                if (this.c_isMoveCamera)
                    this.moveCameraForOpen();
            }
            else {
                let upgradeSteps = this._sideObj.upgradeSteps;
                let sIndex = upgradeSteps.indexOf(step);
                if (sIndex >= 0) {
                    if (sIndex < this.c_upgradeMoveCamera.length) {
                        if (this.c_upgradeMoveCamera[sIndex]) {
                            this.moveCameraForUpgrade();
                        }
                    }
                }
            }
        }
        moveCameraForOpen() {
        }
        moveCameraForUpgrade() {
        }
        addMoney(fromPos, count) {
        }
        getAllMoney() {
        }
        updateCleanTime(cleanId, progress, isComplete) {
        }
        get isOpening() {
            return false;
        }
        get openStep() {
            return LogicRoom.instance.getStep(LogicData.instance.roomId);
        }
        get GuessPos() {
            return this.node.transform.position;
        }
        set sideObj(value) {
            this._sideObj = value;
            this.cCount = this.preCount = this._sideObj.money;
        }
        get sideObj() {
            return this._sideObj;
        }
        saveSideObj() {
            this._sideObj.money = this.cCount;
        }
        get max() {
            return this._max;
        }
        get needCount() {
            return this._max - this.cCount;
        }
        get needPreCount() {
            return this.max - this.preCount;
        }
        addOpenStar() {
            if (this.c_addStar > 0) {
                LogicRoom.instance.star += this.c_addStar;
                EventMgr.Int.emit(EventType.FLY_STAR, EPropNameById$1.star, SceneMgr.Int.playerController.playerNode.position, this.c_addStar);
            }
        }
        createGold(count, bPos, ePos, callback) {
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("DollarRoot"), (node) => {
                if (node) {
                    bPos.y += 1.5;
                    let sp = Laya.Sprite3D.instantiate(node);
                    sp.transform.position = bPos.clone();
                    let script = sp.addComponent(PropEnergy);
                    script.count = count;
                    script.toTarget(bPos, ePos, callback);
                    this.node.addChild(sp);
                }
            });
            this.player19();
        }
        createPrice(parent, index, sideType, money, names, iconUrl) {
            if (this.priceScript == null) {
                ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("PriceBorder"), (node) => {
                    if (node) {
                        let sp = Laya.Sprite3D.instantiate(node);
                        sp.transform.position = v3_zeor;
                        this.priceScript = sp.addComponent(PriceBorder);
                        this.priceScript.init(index, sideType, money, names, iconUrl);
                        parent.addChild(sp);
                    }
                });
            }
        }
        createStar(parent, count, max) {
            if (this.isHasStarZone)
                return;
            this.isHasStarZone = true;
            if (this.starScript == null) {
                ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("LockedZone"), (node) => {
                    if (node) {
                        let sp = Laya.Sprite3D.instantiate(node);
                        sp.transform.position = v3_zeor;
                        this.starScript = sp.addComponent(LockedZone);
                        this.starScript.init(count, max);
                        parent.addChild(sp);
                    }
                });
            }
        }
        destoryPrice() {
            if (this.priceScript) {
                this.priceScript.clear();
                this.priceScript = null;
            }
        }
        destoryStar() {
            if (this.starScript) {
                this.starScript.clear();
                this.starScript = null;
                this.isHasStarZone = false;
            }
        }
        player19() {
            let t = new Date().getTime();
            if (t - Aside.tt > 500) {
                Aside.tt = t;
                AudioMgr$1.instance.play_sound(6);
            }
        }
        get c_type() {
            return this._comData.type;
        }
        get c_zoneId() {
            return this._comData.zoneId;
        }
        get c_index() {
            return this._comData.index;
        }
        get c_addStar() {
            return this._comData.addStar;
        }
        get c_isOpen() {
            return this._comData.isOpen == 1;
        }
        get c_isShowLockRoot() {
            return this._comData.isShowLockRoot == 1;
        }
        get c_openStep() {
            return this._comData.openStep;
        }
        get c_isMoveCamera() {
            return this._comData.isMoveCamera == 1;
        }
        get c_upgradeSteps() {
            if (this._comData.upgradeSteps && this._c_upgradeSteps.length <= 0) {
                let upgradeSteps = this._comData.upgradeSteps.split(",");
                for (var i = 0; i < upgradeSteps.length; i++) {
                    this._c_upgradeSteps.push(Number(upgradeSteps[i]));
                }
            }
            return this._c_upgradeSteps;
        }
        get c_upgradeMoveCamera() {
            if (this._comData.upgradeMoveCamera && this._c_upgradeMoveCamera.length <= 0) {
                let upgradeSteps = this._comData.upgradeMoveCamera.split(",");
                for (var i = 0; i < upgradeSteps.length; i++) {
                    this._c_upgradeMoveCamera.push(Number(upgradeSteps[i]) == 1);
                }
            }
            return this._c_upgradeMoveCamera;
        }
        get c_moneyLvs() {
            if (this._comData.moneyLvs && this._c_moneyLvs.length <= 0) {
                let upgradeSteps = this._comData.moneyLvs.split(",");
                for (var i = 0; i < upgradeSteps.length; i++) {
                    this._c_moneyLvs.push(Number(upgradeSteps[i]));
                }
            }
            return this._c_moneyLvs;
        }
        get c_speeds() {
            if (this._comData.speeds && this._c_speeds.length <= 0) {
                let upgradeSteps = this._comData.speeds.split(",");
                for (var i = 0; i < upgradeSteps.length; i++) {
                    this._c_speeds.push(Number(upgradeSteps[i]));
                }
            }
            return this._c_speeds;
        }
        get c_stars() {
            if (this._comData.stars && this._c_stars.length <= 0) {
                let upgradeSteps = this._comData.stars.split(",");
                for (var i = 0; i < upgradeSteps.length; i++) {
                    this._c_stars.push(Number(upgradeSteps[i]));
                }
            }
            return this._c_stars;
        }
        get c_moneyOpen() {
            return this._comData.moneyOpen;
        }
        get c_time() {
            return this._comData.time;
        }
        get c_moneyRen() {
            return this._comData.moneyRen;
        }
        get c_money() {
            return this._comData.money;
        }
        get c_needStar() {
            return this._comData.needStar;
        }
        get c_goLevelId() {
            return this._comData.goLevelId;
        }
        get c_showForIndex() {
            return this._comData.showForIndex;
        }
        get c_inPathIndex() {
            return this._comData.inPathIndex;
        }
        get c_outPathIndex() {
            return this._comData.outPathIndex;
        }
        get c_mainPathIndex() {
            return this._comData.mainPathIndex;
        }
        get c_rouMoney() {
            return this._comData.rouMoney;
        }
        get c_shuCaiMoney() {
            return this._comData.shuCaiMoney;
        }
    }
    Aside.tt = 0;

    class CleanerBase extends Aside {
        constructor() {
            super(...arguments);
            this.PriceBorder = null;
            this.WaitPoint = null;
            this.ClearingTrolley01 = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this.cleanerNode = null;
            this.moneyType = 1;
        }
        onAwake() {
            super.onAwake();
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.WaitPoint = this.findNodeByPath("WaitPoint");
            this.ClearingTrolley01 = this.findNodeByPath("ClearingTrolley01");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
        }
        onLateUpdate() {
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.ClearingTrolley01.active = true;
                    this.isOpen = true;
                    this.checkUpgrade();
                }
                else {
                    if (this.c_openStep == this.openStep) {
                        this.ClearingTrolley01.active = true;
                        this._max = this.c_moneyOpen;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_CleanBase, this.needCount, "567", "CleanerIcon");
                    }
                    else {
                        this.ClearingTrolley01.active = false;
                    }
                }
            }
            else {
                this.ClearingTrolley01.active = false;
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        moveCameraForUpgrade() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getPlayerName();
            this.initCleaner(prefabsName);
        }
        checkUpgrade() {
            let upgradeSteps = this._sideObj.upgradeSteps;
            let sIndex = upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0) {
                this._max = this.getUpgradeMax();
                this.moneyType = 2;
                this.isCanBuy = true;
                this.createPrice(this.PriceBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "hi", "CleanerSpeedIcon");
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openCleanbase();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeCleanbase();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openCleanbase() {
            this.destoryPrice();
            this.ClearingTrolley01.active = true;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
            if (this.c_zoneId == 1)
                GameSDK.sendEvent("解锁清洁工" + this.c_zoneId);
        }
        upgradeCleanbase() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            let sIndex = this._sideObj.upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0)
                this._sideObj.upgradeSteps[sIndex] = 0;
            LogicRoom.instance.updateOpenStep();
            this.changeCleaner();
            AudioMgr$1.instance.play_sound(13);
        }
        getUpgradeMax() {
            if (this._sideObj.level == 1) {
                return this.c_moneyLvs[1];
            }
            else if (this._sideObj.level == 2) {
                return this.c_moneyLvs[2];
            }
            else if (this._sideObj.level == 3) {
                return this.c_moneyLvs[3];
            }
        }
        initCleaner(loadPrefabsName) {
            let sp = new Laya.Sprite3D();
            sp.name = "cleaner";
            sp.transform.localPosition = this.WaitPoint.transform.localPosition.clone();
            this.cleanerNode = sp.addComponent(CleanerNode);
            this.cleanerNode.loadPrefabsName = loadPrefabsName;
            this.cleanerNode.speed = this.getPlayerSpeed();
            this.cleanerNode.zoneId = this.c_zoneId;
            this.node.addChild(sp);
        }
        changeCleaner() {
            if (this.cleanerNode) {
                this.cleanerNode.loadPrefabsName = this.getPlayerName();
                this.cleanerNode.speed = this.getPlayerSpeed();
                this.cleanerNode.changeChar();
            }
        }
        getPlayerName() {
            if (this._sideObj.level == 1) {
                return "CharacterCleaner1";
            }
            else if (this._sideObj.level == 2) {
                return "CharacterCleaner2";
            }
            else if (this._sideObj.level == 3) {
                return "CharacterCleaner3";
            }
            else if (this._sideObj.level == 4) {
                return "CharacterCleaner4";
            }
        }
        getPlayerSpeed() {
            if (this._sideObj.level == 1) {
                return this.c_speeds[0];
            }
            else if (this._sideObj.level == 2) {
                return this.c_speeds[1];
            }
            else if (this._sideObj.level == 3) {
                return this.c_speeds[2];
            }
            else if (this._sideObj.level == 4) {
                return this.c_speeds[3];
            }
        }
    }

    class Elevator extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedZone = null;
            this.LockedRoot = null;
            this.ElevatorDoorL = null;
            this.ElevatorDoorR = null;
            this.Dianti = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this._isCanOpen = false;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Elevator");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedZone = this.findNodeByPath("LockedZone");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.ElevatorDoorL = this.findNodeByPath("Elevator/ElevatorDoorL");
            this.ElevatorDoorR = this.findNodeByPath("Elevator/ElevatorDoorR");
            this.Dianti = this.findNodeByPath("Elevator/Dianti");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
            this.updatePorpCount();
            EventMgr.Int.on(EventType.StarChange, this.updatePorpCount, this);
        }
        onDestroy() {
            super.onDestroy();
            EventMgr.Int.on(EventType.StarChange, this.updatePorpCount, this);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId) || LogicData.instance.isDianTi == 1) {
                if (LogicRoom.instance.haside(this.c_index) || LogicData.instance.isDianTi == 1) {
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    if (this.isOpen == false) {
                        this.isOpen = true;
                        this.addSide();
                    }
                }
                else {
                    this.Opened.active = true;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep && LogicRoom.instance.star >= this.c_needStar) {
                        this.destoryStar();
                        this._isCanOpen = true;
                        this._max = this.c_moneyOpen;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Elevator, this.needCount, "cd4", "Lift");
                    }
                    else {
                        this.createStar(this.LockedZone, LogicRoom.instance.star, this.c_needStar);
                    }
                }
            }
            else {
                this.Opened.active = this.LockedRoot.active = false;
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        get isCanOpen() {
            return this._isCanOpen;
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        updatePorpCount() {
            if (this.starScript) {
                this.starScript.changeStar(LogicRoom.instance.star);
                if (LogicRoom.instance.star >= this.c_needStar) {
                    this.onChangeSideShow();
                }
            }
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        addSide() {
            this.ElevatorDoorL.transform.localPosition = new Laya.Vector3(-1.1, this.ElevatorDoorL.transform.localPosition.y, this.ElevatorDoorL.transform.localPosition.z);
            this.ElevatorDoorR.transform.localPosition = new Laya.Vector3(1.1, this.ElevatorDoorR.transform.localPosition.y, this.ElevatorDoorR.transform.localPosition.z);
            MoveManager.instance.addSideToPoint(this.Dianti.transform.position, new Laya.Vector3(6, 0, 3), SideType.DIANTI, this.c_index);
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openElevator();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openElevator() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this.addSide();
            this._sideObj.openStep = 0;
            LogicData.instance.isDianTi = 1;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
    }

    var AnimState$7;
    (function (AnimState) {
        AnimState["Idle"] = "Idle_0";
        AnimState["Run"] = "MainCharacterMaleWalking_0";
        AnimState["LyingDownSunbedClip"] = "LyingDownSunbedClip";
        AnimState["WalkingPee"] = "WalkingPee_0";
        AnimState["IdlePee"] = "IdlePee_0";
        AnimState["TypingKeyboard"] = "TypingKeyboard";
    })(AnimState$7 || (AnimState$7 = {}));
    class CustomerAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$7.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$7.Idle);
            this.animator.addScriptPlayState(0, AnimState$7.Run);
            this.animator.addScriptPlayState(0, AnimState$7.LyingDownSunbedClip);
            this.animator.addScriptPlayState(0, AnimState$7.WalkingPee);
            this.animator.addScriptPlayState(0, AnimState$7.IdlePee);
            this.animator.addScriptPlayState(0, AnimState$7.TypingKeyboard);
        }
        playIdle() {
            this.play(AnimState$7.Idle);
        }
        playRun() {
            this.play(AnimState$7.Run);
        }
        playLyingDownSunbedClip() {
            this.play(AnimState$7.LyingDownSunbedClip);
        }
        playWalkingPee() {
            this.play(AnimState$7.WalkingPee);
        }
        playIdlePee() {
            this.play(AnimState$7.IdlePee);
        }
        playerTypingKeyboard() {
            this.play(AnimState$7.TypingKeyboard);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class CustomerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.playerId = 0;
            this.prefabsNameUrl = "";
            this.checkCompleteCB = null;
            this.startCheckCB = null;
            this.updateProgressCB = null;
            this.standPos = null;
            this.isStand = false;
            this.isWaitePlayer = true;
            this.LobbyInPathIndex = 0;
            this.LobbyOutPathIndex = 0;
            this.transform = null;
            this.isLoaded = false;
            this._anim = null;
            this.movePath = null;
            this._state = 0;
            this.t = 0;
            this.all = 0;
            this.out = new Laya.Vector3(0, 0, 0);
            this.CheckTime = 3 * 1000;
            this.toRoom = null;
            this.standIndex = -1;
            this.toToilet = null;
            this.isIntoToilet = false;
            this.sitIndex = -1;
            this.toYinShuijian = null;
            this.isIntoYinShuijian = false;
            this.toRestaurant = null;
            this.isIntoRest = false;
            this.toTableId = 0;
            this.toSwimPool = null;
            this.isIntoPool = false;
            this.toBedId = 0;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.movePath = this.node.addComponent(MovePath);
            this.loadNode();
        }
        onStart() {
            this.toStand();
        }
        onLateUpdate() {
            if (this.isLoaded == false)
                return;
            if (this._state == CustomerNode.MOVE_TO_STAND) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.transform.position = this.out;
                    this.playRun();
                }
                else {
                    this.toStandComplete();
                }
                this.t++;
            }
            else if (this._state == CustomerNode.MOVE_TO_CHECK) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.transform.position = this.out;
                }
                else {
                    this.moveToCheckComplete();
                }
                this.t++;
            }
            else if (this._state == CustomerNode.MOVE_CHECK_WAITE) {
                this.checkRoomAndPlayer();
            }
            else if (this._state == CustomerNode.MOVE_CHECK_TIME) {
                this.t += Laya.timer.delta;
                this.updateProgressCB.runWith([this.standIndex, Math.min(100, 100 * (this.t / this.CheckTime))]);
                if (this.t > this.CheckTime) {
                    this.onCheckComplete();
                }
            }
            else if (this._state == CustomerNode.MOVE_CHECK_TIME_RESTAUIANT) {
                this.t += Laya.timer.delta;
                this.updateProgressCB.runWith([this.standIndex, Math.min(100, 100 * (this.t / this.CheckTime))]);
                if (this.t > this.CheckTime) {
                    this.onCheckResturantComplete();
                }
            }
            else if (this._state == CustomerNode.MOVE_CHECK_TIME_POOL) {
                this.t += Laya.timer.delta;
                this.updateProgressCB.runWith([this.standIndex, Math.min(100, 100 * (this.t / this.CheckTime))]);
                if (this.t > this.CheckTime) {
                    this.onCheckPoolComplete();
                }
            }
            else if (this._state == CustomerNode.MOVE_IN_ROOM) {
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.onSleepComplete();
                }
            }
            else if (this._state == CustomerNode.MVOE_TOTLET_WAITE) {
                if (this.isIntoToilet) {
                    this.checkToilet();
                }
            }
            else if (this._state == CustomerNode.MVOE_TOTLET_LA) {
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.onToiletLaComplete();
                }
            }
            else if (this._state == CustomerNode.MVOE_YINSHUIJIAN_WAITE) {
                if (this.isIntoYinShuijian) {
                    this.checkYinShuijian();
                }
            }
            else if (this._state == CustomerNode.MVOE_YINSHUI_HE) {
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.onYinShuiComplete();
                }
            }
            else if (this._state == CustomerNode.MVOE_RESTAURANT_WAITE) {
                if (this.isIntoRest) {
                    this.checkResturantNullTable();
                }
            }
            else if (this._state == CustomerNode.MVOE_POOL_WAITE) {
                if (this.isIntoPool) {
                    this.checkPoolComin();
                }
            }
        }
        checkRoomAndPlayer() {
            if(!SceneMgr.Int.playerController.playerNode)return;
            if (this.isWaitePlayer && SceneMgr.Int.playerController.playerNode.isIntoCheck == false)
                return;
            let swimPool = LogicRoom.instance.getSwimPool();
            let restaurant = LogicRoom.instance.getReataruant();
            let room = LogicRoom.instance.getRoomInRead();
            if (swimPool) {
                this.onStartCheckPool(swimPool);
            }
            else if (restaurant) {
                this.onStartCheckRestaurant(restaurant);
            }
            else if (room) {
                this.onStartCheck(room);
            }
        }
        toStand() {
            this._state = CustomerNode.MOVE_TO_STAND;
            this.isStand = false;
            this.bPos = this.node.transform.position.clone();
            this.ePos = this.standPos;
            this.t = 0;
            this.all = Math.max(1, Math.floor(Laya.Vector3.distance(this.bPos, this.ePos) * ((1 - (this.speed - 100) / 100) * 20)));
            this.node.transform.rotation = MoveManager.instance.lookAt(this.bPos, this.ePos, new Laya.Vector3(0, 1, 0));
        }
        moveToStand(ePos) {
            this.standPos = ePos;
            this.toStand();
        }
        toStandComplete() {
            this._state = CustomerNode.MOVE_STAND_WAITE;
            this.isStand = true;
            this.t = 0;
            this.playIdle();
        }
        moveToCheck(index, ePos) {
            this._state = CustomerNode.MOVE_TO_CHECK;
            this.standIndex = index;
            this.bPos = this.node.transform.position.clone();
            this.ePos = ePos;
            this.t = 0;
            this.all = Math.max(1, Math.floor(Laya.Vector3.distance(this.bPos, this.ePos) * ((1 - (this.speed - 100) / 100) * 20)));
            this.node.transform.rotation = MoveManager.instance.lookAt(this.bPos, this.ePos, new Laya.Vector3(0, 1, 0));
            this.playRun();
        }
        moveToCheckComplete() {
            this._state = CustomerNode.MOVE_CHECK_WAITE;
            this.playIdle();
            this.transform.localRotationEuler = new Laya.Vector3(0, -90, 0);
            this.startCheckCB.runWith([this.standIndex, this]);
        }
        onStartCheck(room) {
            this._state = CustomerNode.MOVE_CHECK_TIME;
            this.toRoom = room;
            this.toRoom.setCustomerComin(this);
            this.t = 0;
        }
        onStartCheckRestaurant(restaurant) {
            this._state = CustomerNode.MOVE_CHECK_TIME_RESTAUIANT;
            this.toRestaurant = restaurant;
            this.toRestaurant.addCustomerCount();
            this.t = 0;
        }
        onStartCheckPool(pool) {
            this._state = CustomerNode.MOVE_CHECK_TIME_POOL;
            this.toSwimPool = pool;
            this.toSwimPool.addCustomerCount();
            this.t = 0;
        }
        onCheckComplete() {
            this._state = CustomerNode.MOVE_TO_ROOM;
            this.checkCompleteCB.runWith([this.standIndex, this.transform.position.clone(), this.playerId, this.toRoom.getCheckMoney()]);
            this.standIndex = -1;
            let path = LogicRoom.instance.getPathList(this.LobbyInPathIndex, this.toRoom.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.toRoom.getCustomerToBedPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToRoomComplete));
            this.playRun();
        }
        onCheckResturantComplete() {
            this._state = CustomerNode.MOVE_TO_RESTAURANT;
            this.checkCompleteCB.runWith([this.standIndex, this.transform.position.clone(), this.playerId, 5]);
            this.standIndex = -1;
            this.moveToRestaurant();
        }
        onCheckPoolComplete() {
            this._state = CustomerNode.MOVE_TO_POOL;
            this.checkCompleteCB.runWith([this.standIndex, this.transform.position.clone(), this.playerId, 5]);
            this.standIndex = -1;
            this.moveToPool();
        }
        onMoveToRoomComplete() {
            this._state = CustomerNode.MOVE_IN_ROOM;
            this.transform.rotation = this.toRoom.getCustomerToBedRot().clone();
            this.playLyingDownSunbedClip();
            this.toRoom.setCustomerInRoom();
            this.t = 0;
            this.all = 8 * 1000;
        }
        onSleepComplete() {
            this.toRoom.setCustomerOutRoom();
            let toilet = LogicRoom.instance.getToilentByZoneId(this.toRoom.c_zoneId);
            let yinShuijian = LogicRoom.instance.getYinShuiJianByZoneId(this.toRoom.c_zoneId);
            this.addXiaoFei();
            if (toilet) {
                this.toToilet = toilet;
                this.moveToToiletLastWaitePos();
            }
            else if (yinShuijian) {
                this.toYinShuijian = yinShuijian;
                this.moveToYinshuijianLastWaitePos();
            }
            else {
                this.moveToOutFromRoom();
            }
        }
        addXiaoFei() {
            let bpos = this.transform.position.clone();
            bpos.y += 1;
            for (var i = 0; i < 3; i++) {
                let r = (Math.random() * 360) * Math.PI / 180;
                let len = Math.random() * 0.1 + 0.1;
                let epos = new Laya.Vector3(bpos.x + len * Math.sin(r), 0.1, bpos.z + +len * Math.cos(r));
                SceneMgr.Int.playerController.addMoney(this.transform.position, epos, 1);
            }
        }
        destroyCustomerOnRoomUpgrade() {
            this._state = CustomerNode.MOVE_NULL;
            if (this.standIndex >= 0) {
                this.checkCompleteCB.runWith([this.standIndex, null, this.playerId]);
            }
            this.node.destroy();
        }
        moveToOutFromRoom() {
            this._state = CustomerNode.MOVE_TO_OUT;
            let path = LogicRoom.instance.getPathList(this.toRoom.c_mainPathIndex, this.LobbyOutPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onOut));
            this.playRun();
        }
        moveToToiletLastWaitePos() {
            this._state = CustomerNode.MOVE_TO_TOILET;
            this.toToilet.addCustomerCount();
            let path = [];
            if (this.toRoom.c_mainPathIndex == this.toToilet.c_mainPathIndex) {
                path.push(LogicRoom.instance.getPathNode(this.toToilet.c_mainPathIndex).node.transform.position);
            }
            else {
                path = LogicRoom.instance.getPathList(this.toRoom.c_mainPathIndex, this.toToilet.c_mainPathIndex);
            }
            path.unshift(this.transform.position.clone());
            path.push(this.toToilet.getLastWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletLastWaitePosComplete));
            this.playWalkingPee();
        }
        onMoveToToiletLastWaitePosComplete() {
            this._state = CustomerNode.MVOE_TOTLET_WAITE;
            this.toToilet.addCustomerInLastWaitePos(this);
            this.playIdlePee();
        }
        moveToToiletWaitePos(pos, isIntoToilet) {
            this.isIntoToilet = isIntoToilet;
            if (Laya.Vector3.distance(this.transform.position, pos) > 0.6) {
                this._state = CustomerNode.MOVE_TOILET_WIATE_POS;
                let path = [this.transform.position.clone(), pos];
                this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToToiletWaitePosComplete));
                this.playWalkingPee();
            }
        }
        onmoveToToiletWaitePosComplete() {
            this._state = CustomerNode.MVOE_TOTLET_WAITE;
            this.playIdlePee();
        }
        checkToilet() {
            let sitIndex = this.toToilet.getCanIntoIndex();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.toToilet.setIntoSitIndex(sitIndex);
                this.toToilet.removeCustomerWaite(this);
                this.toToilet.addGolds(this.transform.position.clone());
                this.moveToToiletIntoPos();
            }
        }
        moveToToiletIntoPos() {
            this._state = CustomerNode.MVOE_TOTLET_INTOPOS;
            let pos = this.toToilet.getIntoPos(this.sitIndex);
            let path = [this.transform.position.clone(), pos];
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToToiletIntoPosComplete));
            this.playWalkingPee();
        }
        onmoveToToiletIntoPosComplete() {
            this._state = CustomerNode.MVOE_TOTLET_SITPOS;
            this.toToilet.openMen(this.sitIndex);
            let pos = this.toToilet.getSitPos(this.sitIndex);
            let path = [this.transform.position.clone(), pos];
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToToiletSitPosComplete));
            this.playWalkingPee();
        }
        onmoveToToiletSitPosComplete() {
            this._state = CustomerNode.MVOE_TOTLET_LA;
            this.t = 0;
            this.all = 5 * 1000;
            this.toToilet.closeMen(this.sitIndex);
            this.playIdlePee();
        }
        onToiletLaComplete() {
            this._state = CustomerNode.BACK_TOTLET_INTOPOS;
            this.toToilet.openMen(this.sitIndex);
            let pos = this.toToilet.getIntoPos(this.sitIndex);
            let path = [this.transform.position.clone(), pos];
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onbackToToiletIntoPosComplete));
            this.playRun();
        }
        onbackToToiletIntoPosComplete() {
            this.toToilet.closeMen(this.sitIndex);
            this.toToilet.onLaComplete(this.sitIndex);
            this.moveToPutFromToilet();
        }
        moveToPutFromToilet() {
            this._state = CustomerNode.MOVE_TO_OUT;
            let path = LogicRoom.instance.getPathList(this.toToilet.c_mainPathIndex, this.LobbyOutPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onOut));
            this.playRun();
        }
        moveToYinshuijianLastWaitePos() {
            this._state = CustomerNode.MOVE_TO_YINSHUIJIAN;
            let path = [];
            if (this.toRoom.c_mainPathIndex == this.toYinShuijian.c_mainPathIndex) {
                path.push(LogicRoom.instance.getPathNode(this.toYinShuijian.c_mainPathIndex).node.transform.position);
            }
            else {
                path = LogicRoom.instance.getPathList(this.toRoom.c_mainPathIndex, this.toYinShuijian.c_mainPathIndex);
            }
            path.unshift(this.transform.position.clone());
            path.push(this.toYinShuijian.getLastWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToYinshuijianLastWaitePosComplete));
            this.playRun();
        }
        moveToYinshuijianWaitePos(pos, isIntoToilet) {
            this.isIntoYinShuijian = isIntoToilet;
            if (Laya.Vector3.distance(this.transform.position, pos) > 0.6) {
                this._state = CustomerNode.MOVE_YINSHUI_WIATE_POS;
                let path = [this.transform.position.clone(), pos];
                this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToYinshuijianWaitePosComplete));
                this.playRun();
            }
        }
        onmoveToYinshuijianWaitePosComplete() {
            this._state = CustomerNode.MVOE_YINSHUIJIAN_WAITE;
            this.playIdle();
        }
        onMoveToYinshuijianLastWaitePosComplete() {
            this._state = CustomerNode.MVOE_YINSHUIJIAN_WAITE;
            this.toYinShuijian.addCustomerInLastWaitePos(this);
            this.playIdle();
        }
        checkYinShuijian() {
            let sitIndex = this.toYinShuijian.getCanIntoIndex();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.toYinShuijian.setIntoSitIndex(sitIndex);
                this.toYinShuijian.removeCustomerWaite(this);
                this.toYinShuijian.addGolds(this.transform.position.clone());
                this.moveToYinShuiIntoPos();
            }
        }
        moveToYinShuiIntoPos() {
            this._state = CustomerNode.MVOE_YINSHUI_SITPOS;
            let pos = this.toYinShuijian.getSitPos(this.sitIndex);
            let path = [this.transform.position.clone(), pos];
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToYinshuiSitPosComplete));
            this.playIdle();
        }
        onmoveToYinshuiSitPosComplete() {
            this._state = CustomerNode.MVOE_YINSHUI_HE;
            this.t = 0;
            this.all = 5 * 1000;
            this.playIdle();
        }
        onYinShuiComplete() {
            this._state = CustomerNode.BACK_TOTLET_INTOPOS;
            this.toYinShuijian.onLaComplete(this.sitIndex);
            let path = LogicRoom.instance.getPathList(this.toYinShuijian.c_mainPathIndex, this.LobbyOutPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onOut));
            this.playRun();
        }
        moveToRestaurant() {
            let path = LogicRoom.instance.getPathList(this.LobbyInPathIndex, this.toRestaurant.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToRestaurantComplete));
            this.playRun();
        }
        onMoveToRestaurantComplete() {
            this._state = CustomerNode.MOVE_WAITE_RESTAURANT;
            this.toRestaurant.addWaiteCustomer(this);
        }
        moveToRestaurantWaitePos(pos, isIntoToilet) {
            this.isIntoRest = isIntoToilet;
            if (Laya.Vector3.distance(this.transform.position, pos) > 0.6) {
                this._state = CustomerNode.MOVE_RESTURANT_WIATE_POS;
                let path = [this.transform.position.clone(), pos];
                this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToResturantWaitePosComplete));
                this.playRun();
            }
            else {
                this.onmoveToResturantWaitePosComplete();
            }
        }
        onmoveToResturantWaitePosComplete() {
            this._state = CustomerNode.MVOE_RESTAURANT_WAITE;
            this.playIdle();
        }
        checkResturantNullTable() {
            let tableId = this.toRestaurant.getNullTable();
            if (tableId > 0) {
                this.toTableId = tableId;
                this.toRestaurant.removeWaiteCustomer(this);
                this.moveToResturantTable();
            }
        }
        moveToResturantTable() {
            this._state = CustomerNode.MOVE_TO_RESTAURANT_TABLE;
            this.toRestaurant.addCustomerToTable(this.toTableId, this);
            let playerPos = this.toRestaurant.getTablePlayerPos(this.toTableId);
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(playerPos.transform.position);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onMoveToResturantTableComplete));
            this.playRun();
        }
        onMoveToResturantTableComplete() {
            this._state = CustomerNode.MOVE_WATITE_FOOD;
            let playerPos = this.toRestaurant.getTablePlayerPos(this.toTableId);
            this.transform.position = playerPos.transform.position.clone();
            this.transform.rotation = playerPos.transform.rotation.clone();
            this.toRestaurant.addCustomerFood(this.toTableId);
            this.playerTypingKeyboard();
        }
        eatComplete(money) {
            let bpos = this.transform.position.clone();
            bpos.y += 1;
            let oneMoney = Math.floor(money / 5);
            for (var i = 0; i < 5; i++) {
                let r = (Math.random() * 360) * Math.PI / 180;
                let len = Math.random() * 1 + 1;
                let epos = new Laya.Vector3(bpos.x + len * Math.sin(r), 0.1, bpos.z + +len * Math.cos(r));
                SceneMgr.Int.playerController.addMoney(bpos, epos, oneMoney);
            }
            Laya.timer.once(200, this, this.leaveResturantTable);
        }
        leaveResturantTable() {
            this._state = CustomerNode.MOVE_LEAVE_RESTURANT_TABLE;
            this.toRestaurant.removeCustomer(this.toTableId);
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.toRestaurant.getFristWaitePoint());
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onleaveResturantTableComplete));
            this.playRun();
        }
        onleaveResturantTableComplete() {
            let path = LogicRoom.instance.getPathList(this.toRestaurant.c_mainPathIndex, this.LobbyOutPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onOut));
            this.playRun();
        }
        moveToPool() {
            let path = LogicRoom.instance.getPathList(this.LobbyInPathIndex, this.toSwimPool.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToPoolComplete));
            this.playRun();
        }
        onMoveToPoolComplete() {
            this._state = CustomerNode.MOVE_WAITE_POOL;
            this.toSwimPool.addWaiteCustomer(this);
        }
        moveToPoolWaitePos(pos, isIntoToilet) {
            this.isIntoPool = isIntoToilet;
            if (Laya.Vector3.distance(this.transform.position, pos) > 0.6) {
                this._state = CustomerNode.MOVE_POOL_WIATE_POS;
                let path = [this.transform.position.clone(), pos];
                this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToPoolWaitePosComplete));
                this.playRun();
            }
            else {
                this.onmoveToPoolWaitePosComplete();
            }
        }
        onmoveToPoolWaitePosComplete() {
            this._state = CustomerNode.MVOE_POOL_WAITE;
            this.playIdle();
        }
        checkPoolComin() {
            let bedId = this.toSwimPool.getNullBed();
            if (bedId > 0) {
                this.toBedId = bedId;
                this.toSwimPool.setUseSunBed(bedId, this);
                this.toSwimPool.removeWaiteCustomer(this);
                this.moveToGetMaojin();
            }
        }
        moveToGetMaojin() {
            this._state = CustomerNode.MVOE_TO_GET_MAOJIN;
            this.toSwimPool.subMaojinNoUpdate();
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.toSwimPool.getMaojinPos());
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.moveToGetMaojinComplte));
            this.playRun();
        }
        moveToGetMaojinComplte() {
            this.toSwimPool.updateMaojinShow();
            Laya.timer.once(500, this, this.moveToSunBed);
            this.playIdle();
        }
        moveToSunBed() {
            let playerPos = this.toSwimPool.getSunBedPlayerPos(this.toBedId);
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(playerPos.transform.position);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.moveToSunBedComplete));
            this.playRun();
        }
        moveToSunBedComplete() {
            this._state = CustomerNode.MVOE_IN_SUNBED;
            let playerPos = this.toSwimPool.getSunBedPlayerPos(this.toBedId);
            this.transform.position = playerPos.transform.position.clone();
            this.transform.rotation = playerPos.transform.rotation.clone();
            this.playLyingDownSunbedClip();
            Laya.timer.once(10 * 1000, this, this.onInSunBedComplete);
        }
        addMoneyForBed(money) {
            let bpos = this.transform.position.clone();
            bpos.y += 1;
            let oneMoney = Math.floor(money / 5);
            for (var i = 0; i < 5; i++) {
                let r = (Math.random() * 360) * Math.PI / 180;
                let len = Math.random() * 1 + 1;
                let epos = new Laya.Vector3(bpos.x + len * Math.sin(r), 0.1, bpos.z + +len * Math.cos(r));
                SceneMgr.Int.playerController.addMoney(bpos, epos, oneMoney);
            }
        }
        onInSunBedComplete() {
            this._state = CustomerNode.MOVE_LEAVE_POOL;
            this.toSwimPool.removeCustomer(this.toBedId);
            this.addMoneyForBed(this.toSwimPool.c_money);
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.toSwimPool.getFristWaitePoint());
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onleaveSunBedComplete));
            this.playRun();
        }
        onleaveSunBedComplete() {
            let path = LogicRoom.instance.getPathList(this.toSwimPool.c_mainPathIndex, this.LobbyOutPathIndex);
            path.unshift(this.transform.position.clone());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onOut));
            this.playRun();
        }
        onOut() {
            this.node.destroy();
        }
        loadNode() {
            ResourcesMgr$1.instance.load(this.prefabsNameUrl, (node) => {
                if (node) {
                    let character = Laya.Sprite3D.instantiate(node);
                    character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = character.addComponent(CustomerAnim);
                    this.node.addChild(character);
                    this.isLoaded = true;
                }
            });
        }
        get speed() {
            return 100;
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
        playLyingDownSunbedClip() {
            if (this._anim) {
                this._anim.playLyingDownSunbedClip();
            }
        }
        playWalkingPee() {
            if (this._anim) {
                this._anim.playWalkingPee();
            }
        }
        playIdlePee() {
            if (this._anim) {
                this._anim.playIdlePee();
            }
        }
        playerTypingKeyboard() {
            if (this._anim) {
                this._anim.playerTypingKeyboard();
            }
        }
    }
    CustomerNode.MOVE_NULL = 0;
    CustomerNode.MOVE_TO_STAND = 1;
    CustomerNode.MOVE_STAND_WAITE = 2;
    CustomerNode.MOVE_TO_CHECK = 3;
    CustomerNode.MOVE_CHECK_WAITE = 4;
    CustomerNode.MOVE_CHECK_TIME = 5;
    CustomerNode.MOVE_TO_ROOM = 6;
    CustomerNode.MOVE_IN_ROOM = 7;
    CustomerNode.MOVE_TO_OUT = 8;
    CustomerNode.MOVE_TO_TOILET = 9;
    CustomerNode.MVOE_TOTLET_WAITE = 10;
    CustomerNode.MOVE_TOILET_WIATE_POS = 11;
    CustomerNode.MVOE_TOTLET_INTOPOS = 12;
    CustomerNode.MVOE_TOTLET_SITPOS = 13;
    CustomerNode.MVOE_TOTLET_LA = 14;
    CustomerNode.BACK_TOTLET_INTOPOS = 15;
    CustomerNode.MOVE_TO_YINSHUIJIAN = 16;
    CustomerNode.MVOE_YINSHUIJIAN_WAITE = 17;
    CustomerNode.MOVE_YINSHUI_WIATE_POS = 18;
    CustomerNode.MVOE_YINSHUI_SITPOS = 19;
    CustomerNode.MVOE_YINSHUI_HE = 20;
    CustomerNode.MOVE_CHECK_TIME_RESTAUIANT = 21;
    CustomerNode.MOVE_TO_RESTAURANT = 22;
    CustomerNode.MOVE_WAITE_RESTAURANT = 23;
    CustomerNode.MOVE_RESTURANT_WIATE_POS = 24;
    CustomerNode.MVOE_RESTAURANT_WAITE = 26;
    CustomerNode.MOVE_TO_RESTAURANT_TABLE = 27;
    CustomerNode.MOVE_WATITE_FOOD = 28;
    CustomerNode.MOVE_LEAVE_RESTURANT_TABLE = 29;
    CustomerNode.MOVE_CHECK_TIME_POOL = 30;
    CustomerNode.MOVE_TO_POOL = 31;
    CustomerNode.MOVE_WAITE_POOL = 32;
    CustomerNode.MOVE_POOL_WIATE_POS = 33;
    CustomerNode.MVOE_POOL_WAITE = 34;
    CustomerNode.MVOE_TO_GET_MAOJIN = 35;
    CustomerNode.MVOE_IN_SUNBED = 36;
    CustomerNode.MOVE_LEAVE_POOL = 37;

    var NFood;
    (function (NFood) {
        NFood[NFood["NULL"] = 0] = "NULL";
        NFood[NFood["Paper"] = 1] = "Paper";
        NFood[NFood["Can"] = 2] = "Can";
        NFood[NFood["Towel"] = 3] = "Towel";
        NFood[NFood["Rou"] = 4] = "Rou";
        NFood[NFood["Shucai"] = 5] = "Shucai";
    })(NFood || (NFood = {}));
    class PropFood extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.type = NFood.NULL;
            this.eatTime = 0;
        }
        onAwake() {
        }
        onStart() {
            this.loadNode();
        }
        loadNode() {
            let prefabname = this.getPrefabname();
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName(prefabname), (node) => {
                if (node) {
                    let prop = Laya.Sprite3D.instantiate(node);
                    prop.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this.node.addChild(prop);
                }
            });
        }
        getPrefabname() {
            switch (this.type) {
                case NFood.Paper:
                    return "ToiletPaper_1";
                case NFood.Can:
                    return "Can_1";
                case NFood.Towel:
                    return "Towel_Blue";
                case NFood.Rou:
                    return "Rou1";
                case NFood.Shucai:
                    return "Shucai1";
            }
        }
    }

    var NBox;
    (function (NBox) {
        NBox[NBox["NULL"] = 0] = "NULL";
        NBox[NBox["Diamond"] = 1] = "Diamond";
        NBox[NBox["Money"] = 2] = "Money";
        NBox[NBox["Transport_Carpet"] = 3] = "Transport_Carpet";
        NBox[NBox["Transport_Monocycle"] = 4] = "Transport_Monocycle";
        NBox[NBox["Transport_Suitcase"] = 5] = "Transport_Suitcase";
        NBox[NBox["Transport_Unicorn"] = 6] = "Transport_Unicorn";
        NBox[NBox["VIP_CUSTOMER"] = 7] = "VIP_CUSTOMER";
    })(NBox || (NBox = {}));
    class ABox extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.propId = 0;
            this.propType = NBox.NULL;
            this.count = 1;
            this.propParent = null;
            this.indexList = [];
        }
        onAwake() {
            this.propParent = this.findNodeByPath("Prop");
        }
        onStart() {
            this.loadNode();
            this.indexList = MoveManager.instance.addSideToPoint(this.node.transform.position, new Laya.Vector3(1, 0, 1), SideType.Prop_Box, this.propId);
        }
        onLateUpdate() {
            this.propParent.transform.rotate(new Laya.Vector3(0, 0.05, 0), true);
        }
        cleanAll() {
            MoveManager.instance.removeSide(this.indexList);
            this.node.destroy();
        }
        loadNode() {
            let prefabname = ABox.GetPrefabname(this.propType);
            ResourcesMgr$1.instance.load(prefabname, (node) => {
                if (node) {
                    let box = Laya.Sprite3D.instantiate(node);
                    box.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this.propParent.addChild(box);
                }
            });
        }
        static RandTransportType() {
            if (LogicData.instance.Transport > 0) {
                let index = this.TransportIds.indexOf(LogicData.instance.Transport);
                if (index >= 0) {
                    this.TransportIds.splice(index, 1);
                }
            }
            return this.TransportIds[Math.floor(Math.random() * this.TransportIds.length)];
        }
        static RandBoxType() {
            if (!LogicRoom.instance.playerUpgrade || LogicRoom.instance.playerUpgrade.isOpen == false) {
                return NBox.Money;
            }
            else {
                let rand = Math.random() * 100;
                if (rand < 50) {
                    return NBox.Diamond;
                }
                else {
                    return NBox.Money;
                }
            }
        }
        static GetPrefabname(type) {
            switch (type) {
                case NBox.Diamond:
                    return RescoureData.getPrefabsUrlByName("zuanshi");
                case NBox.Money:
                    return RescoureData.getPrefabsUrlByName("MoneyBox");
                case NBox.Transport_Carpet:
                    return RescoureData.getPlayerUrlByName("Transport_Carpet");
                case NBox.Transport_Monocycle:
                    return RescoureData.getPlayerUrlByName("Transport_Monocycle");
                case NBox.Transport_Suitcase:
                    return RescoureData.getPlayerUrlByName("Transport_Suitcase");
                case NBox.Transport_Unicorn:
                    return RescoureData.getPlayerUrlByName("Transport_Unicorn");
                case NBox.VIP_CUSTOMER:
                    return RescoureData.getPlayerUrlByName("VipCustomer");
            }
        }
        static GetIconName(type) {
            switch (type) {
                case NBox.Transport_Carpet:
                    return "ResultVehicle3";
                case NBox.Transport_Monocycle:
                    return "ResultVehicle2";
                case NBox.Transport_Suitcase:
                    return "ResultVehicle4";
                case NBox.Transport_Unicorn:
                    return "ResultVehicle1";
            }
        }
    }
    ABox.TransportIds = [NBox.Transport_Carpet, NBox.Transport_Monocycle, NBox.Transport_Suitcase, NBox.Transport_Unicorn];

    var AnimState$6;
    (function (AnimState) {
        AnimState["NULL"] = "Dynamic_Idle";
        AnimState["Idle"] = "Idle";
        AnimState["Run"] = "MainCharacterMaleWalking";
        AnimState["CarryingIdle"] = "CarryingIdle";
        AnimState["WalkingWithBox"] = "WalkingWithBox";
        AnimState["CharacterCarpetRIding"] = "CharacterCarpetRIding";
        AnimState["CharacterSuitcaseIdle"] = "CharacterSuitcaseIdle";
        AnimState["CharacterSuitcaseRiding"] = "CharacterSuitcaseRiding";
        AnimState["CharacterSuitcaseRIdingCarrying"] = "CharacterSuitcaseRIdingCarrying";
        AnimState["CharacterSuitcaseRIdingCarryingIdle"] = "CharacterSuitcaseRIdingCarryingIdle";
        AnimState["MocycleIdle"] = "MocycleIdle";
        AnimState["MonocycleRide"] = "MonocycleRide_0";
        AnimState["HorseRiding"] = "HorseRiding";
        AnimState["HorseRidingCarrying"] = "HorseRidingCarrying";
        AnimState["HorseRidingIdle"] = "HorseRidingIdle";
        AnimState["HorseRidingIdleCarrying"] = "HorseRidingIdleCarrying";
    })(AnimState$6 || (AnimState$6 = {}));
    class PlayerAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.attackState = -1;
            this.fristState = AnimState$6.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$6.Idle);
            this.animator.addScriptPlayState(0, AnimState$6.Run);
            this.animator.addScriptPlayState(0, AnimState$6.CarryingIdle);
            this.animator.addScriptPlayState(0, AnimState$6.WalkingWithBox);
            this.animator.addScriptPlayState(0, AnimState$6.CharacterCarpetRIding);
            this.animator.addScriptPlayState(0, AnimState$6.CharacterSuitcaseIdle);
            this.animator.addScriptPlayState(0, AnimState$6.CharacterSuitcaseRiding);
            this.animator.addScriptPlayState(0, AnimState$6.CharacterSuitcaseRIdingCarrying);
            this.animator.addScriptPlayState(0, AnimState$6.CharacterSuitcaseRIdingCarryingIdle);
            this.animator.addScriptPlayState(0, AnimState$6.MocycleIdle);
            this.animator.addScriptPlayState(0, AnimState$6.MonocycleRide);
            this.animator.addScriptPlayState(0, AnimState$6.HorseRiding);
            this.animator.addScriptPlayState(0, AnimState$6.HorseRidingCarrying);
            this.animator.addScriptPlayState(0, AnimState$6.HorseRidingIdle);
            this.animator.addScriptPlayState(0, AnimState$6.HorseRidingIdleCarrying);
        }
        playIdle() {
            this.play(AnimState$6.Idle);
        }
        playRun() {
            this.play(AnimState$6.Run);
        }
        playCarryingIdle() {
            this.play(AnimState$6.CarryingIdle);
        }
        playWalkingWithBox() {
            this.play(AnimState$6.WalkingWithBox);
        }
        playCharacterSuitcaseIdle() {
            this.play(AnimState$6.CharacterSuitcaseIdle);
        }
        playCharacterSuitcaseRiding() {
            this.play(AnimState$6.CharacterSuitcaseRiding);
        }
        playCharacterSuitcaseRIdingCarrying() {
            this.play(AnimState$6.CharacterSuitcaseRIdingCarrying);
        }
        playCharacterSuitcaseRIdingCarryingIdle() {
            this.play(AnimState$6.CharacterSuitcaseRIdingCarryingIdle);
        }
        playMocycleIdle() {
            this.play(AnimState$6.MocycleIdle);
        }
        playMonocycleRide() {
            this.play(AnimState$6.MonocycleRide);
        }
        playHorseRiding() {
            this.play(AnimState$6.HorseRiding);
        }
        playHorseRidingCarrying() {
            this.play(AnimState$6.HorseRidingCarrying);
        }
        playHorseRidingIdle() {
            this.play(AnimState$6.HorseRidingIdle);
        }
        playHorseRidingIdleCarrying() {
            this.play(AnimState$6.HorseRidingIdleCarrying);
        }
        playCharacterCarpetRIding() {
            this.play(AnimState$6.CharacterCarpetRIding);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
        set aniSpeed(value) {
            this.animator.aniSpeed = value;
        }
        get aniSpeed() {
            return this.animator.aniSpeed;
        }
        setNull() {
            this.state = AnimState$6.NULL;
        }
        removeAllComponent() {
            var arr = this.node.getComponents(Animator);
            for (var i = 0; i < arr.length; i++) {
                arr[i].destroy();
            }
        }
    }

    class Player extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._transform = null;
            this._anim = null;
            this.weaponId = 0;
            this._PonyTransportRoot = null;
            this.weaponNode = null;
            this.Default = null;
            this.Head = null;
            this.leftHand = null;
            this.attack = 0;
            this.baoji = 0;
            this.xiXue = 0;
        }
        onAwake() {
            this._transform = this.node.transform;
            this.Default = this.findNodeByPath("BoxesPoints/Default");
            this.Head = this.findNodeByPath("CharacterPlayer/Hips/Spine/Spine1/Spine2/Neck/Head/HeadTop_End/MonocycleBoxesRoot");
            this.leftHand = this.findNodeByPath("CharacterPlayer/Hips/Spine/Spine1/Spine2/LeftShoulder/LeftArm/LeftForeArm/LeftHand/PonyBoxesRoot");
            this._PonyTransportRoot = this.findNodeByPath("CharacterPlayer/Hips/Spine/Spine1/Spine2/RightShoulder/RightArm/RightForeArm/RightHand/PonyTransportRoot");
            this._anim = this.node.addComponent(PlayerAnim);
        }
        onLateUpdate() {
        }
        get PonyTransportRoot() {
            return this._PonyTransportRoot;
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
        playCarryingIdle() {
            if (this._anim) {
                this._anim.playCarryingIdle();
            }
        }
        playWalkingWithBox() {
            if (this._anim) {
                this._anim.playWalkingWithBox();
            }
        }
        playCharacterSuitcaseIdle() {
            if (this._anim) {
                this._anim.playCharacterSuitcaseIdle();
            }
        }
        playCharacterSuitcaseRiding() {
            if (this._anim) {
                this._anim.playCharacterSuitcaseRiding();
            }
        }
        playCharacterSuitcaseRIdingCarrying() {
            if (this._anim) {
                this._anim.playCharacterSuitcaseRIdingCarrying();
            }
        }
        playCharacterSuitcaseRIdingCarryingIdle() {
            if (this._anim) {
                this._anim.playCharacterSuitcaseRIdingCarryingIdle();
            }
        }
        playMocycleIdle() {
            if (this._anim) {
                this._anim.playMocycleIdle();
            }
        }
        playMonocycleRide() {
            if (this._anim) {
                this._anim.playMonocycleRide();
            }
        }
        playHorseRiding() {
            if (this._anim) {
                this._anim.playHorseRiding();
            }
        }
        playHorseRidingCarrying() {
            if (this._anim) {
                this._anim.playHorseRidingCarrying();
            }
        }
        playHorseRidingIdle() {
            if (this._anim) {
                this._anim.playHorseRidingIdle();
            }
        }
        playHorseRidingIdleCarrying() {
            if (this._anim) {
                this._anim.playHorseRidingIdleCarrying();
            }
        }
        playCharacterCarpetRIding() {
            if (this._anim) {
                this._anim.playCharacterCarpetRIding();
            }
        }
    }

    class LogicShock {
        constructor() {
            this._is_open = null;
        }
        initData() {
        }
        is_open() {
            if (this._is_open == null) {
                let _is_open = LocalCache$1.get("LogicShock._is_open");
                if (_is_open == "open") {
                    this._is_open = true;
                }
                else if (_is_open == "close")
                    this._is_open = false;
                else
                    this._is_open = true;
            }
            return this._is_open;
        }
        close() {
            this._is_open = false;
            LocalCache$1.set("LogicShock._is_open", "close");
        }
        open() {
            this._is_open = true;
            LocalCache$1.set("LogicShock._is_open", "open");
        }
    }
    LogicShock.instance = new LogicShock();

    class PlayerTrigger extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.EnterList = [];
            this.ExitList = [];
            this.soundTime = 0;
            this.playerId = 0;
            this.isEnd = false;
        }
        onAwake() {
            super.onAwake();
        }
        onTriggerEnter(other) {
            let collider = other.owner.getComponent(Collider);
            if (!collider)
                return;
            let method = this.EnterList[collider.type];
            if (method == null) {
                console.log("碰撞没有可执行方法");
            }
            else {
                var t = new Date().getTime();
                if (t - PlayerTrigger.shortT >= 300) {
                    if (LogicShock.instance.is_open()) {
                        GameSDK.vibrateShort();
                    }
                    PlayerTrigger.shortT = t;
                }
                method.call(this, other.owner);
            }
        }
        onTriggerExit(other) {
            let collider = other.owner.getComponent(Collider);
            if (!collider)
                return;
            let method = this.ExitList[collider.type];
            if (method == null) {
                console.log("离开没有可执行方法");
            }
            else {
                var t = new Date().getTime();
                if (t - PlayerTrigger.shortT >= 300) {
                    if (LogicShock.instance.is_open()) {
                        GameSDK.vibrateShort();
                    }
                    PlayerTrigger.shortT = t;
                }
                method.call(this, other.owner);
            }
        }
        onEndHandler(other) {
            this.isEnd = true;
        }
        clearn() {
        }
    }
    PlayerTrigger.shortT = 0;

    class PlayerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.index = 0;
            this.playerId = 0;
            this.skinId = 1;
            this.hairId = 0;
            this.rounds = [0, 1, -1, 1000, -1000, 1001, 999, -999, -1001];
            this._level = 1;
            this.data = null;
            this._State = 1;
            this._transform = null;
            this.character = null;
            this._Trigger = null;
            this.propSp = null;
            this._time = 0;
            this.offset = new Laya.Vector3(0, 0, 0);
            this.out = new Laya.Vector3(0, 0, 0);
            this._out1 = new Laya.Vector3(0, 0, 0);
            this.props = [];
            this._followPosition = null;
            this.toSideScript = null;
            this.toBedId = 0;
            this.isIntoCheck = false;
            this.toRoom = null;
            this.cleanId = 0;
            this.cTime = 0;
            this.cMax = 1 * 1000;
            this.toToilet = null;
            this.toYinshui = null;
            this.toSwimPool = null;
            this.toResturant = null;
            this.toTableId = 0;
            this.toPark = null;
            this.transportNode = null;
            this.propType = NBox.NULL;
            this.xz = new Laya.Vector3(0, 0, 0);
            this.isRun = false;
        }
        onAwake() {
            this.data = SceneMgr.Int.playerData;
            this._transform = this.node.transform;
            this.propSp = new Laya.Sprite3D();
            this.propSp.transform.localPosition = new Laya.Vector3(0, 0, 0);
            this.node.addChild(this.propSp);
            this.createCharacterByType(this.skinId, this.hairId);
        }
        loadGuangquan() {
            ResourcesMgr$1.instance.load(RescoureData.FRIST_SCENE + "Guangquan.lh", (node) => {
                let guangquan = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.FRIST_SCENE + "Guangquan.lh"));
                guangquan.transform.localPosition = new Laya.Vector3(0, 1, 0);
                var master_danban1_Rigi2 = guangquan.getComponent(Laya.Rigidbody3D);
                master_danban1_Rigi2.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER3;
                master_danban1_Rigi2.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER4;
                this._Trigger = guangquan.addComponent(PlayerTrigger);
                this.node.addChild(guangquan);
            });
        }
        onLateUpdate() {
            if (this._followPosition) {
                Laya.Vector3.lerp(this._transform.position, this._followPosition, 0.2, this.out);
                this._transform.position = this.out;
            }
            this.updatePropPR();
            this.initTransport();
        }
        setRotate(index, pos, rotate) {
            this.index = index;
            if (this._transform) {
                this._followPosition = pos.clone();
            }
            if (this._transform) {
                this._transform.rotationEuler = new Laya.Vector3(0, rotate, 0);
            }
            this.playRun();
        }
        setPosition(index, pos) {
            this.index = index;
            if (this._transform) {
                this._followPosition = pos.clone();
            }
        }
        setPosition2(index, pos) {
            this.index = index;
            if (this._transform) {
                this._followPosition = pos.clone();
                this._transform.position = pos.clone();
            }
        }
        get speed() {
            let value = PlayerController.MASTER_SPEED * (SceneMgr.Int.playerData.speed / 100);
            switch (this.propType) {
                case NBox.Transport_Carpet:
                case NBox.Transport_Monocycle:
                case NBox.Transport_Suitcase:
                case NBox.Transport_Unicorn:
                    value *= 1.5;
                    break;
            }
            return value;
        }
        onStartPutMoney(script) {
            this.toSideScript = script;
            this.putGoldToSide();
        }
        onStopPutMoney() {
            Laya.timer.clear(this, this.putGoldToSide);
        }
        putGoldToSide() {
            // console.log("this.toSideScript==>",this.toSideScript)
            // console.log("this.toSideScript.isCanBuy==>",this.toSideScript.isCanBuy)
            if (this.toSideScript && this.toSideScript.isCanBuy) {
                let step = Math.min(Math.floor(this.toSideScript.needPreCount / 20) + 1, Math.floor(LogicProp$1.instance.get(EPropNameById$1.diamonds) / 20 + 1));
                let count = Math.min(LogicProp$1.instance.get(EPropNameById$1.diamonds), step);
                count = Math.max(count, 1);
                if (LogicProp$1.instance.has(EPropNameById$1.diamonds, count)) {
                    LogicProp$1.instance.add(EPropNameById$1.diamonds, count * -1);
                    this.toSideScript.addMoney(this.position.clone(), count);
                    PlayerNode.play11();
                }
            }
            Laya.timer.once(50, this, this.putGoldToSide);
        }
        onStartOpenSunBed(room, bedId) {
            this.toSwimPool = room;
            this.toBedId = bedId;
            this.putGoldToSunBed();
        }
        putGoldToSunBed() {
            if (this.toSwimPool) {
                let sunBed = this.toSwimPool.getSunBed(this.toBedId);
                if (sunBed) {
                    if (sunBed.isCanBuy) {
                        let step = Math.min(Math.floor(sunBed.needPreCount / 20) + 1, Math.floor(LogicProp$1.instance.get(EPropNameById$1.diamonds) / 20 + 1));
                        let count = Math.min(LogicProp$1.instance.get(EPropNameById$1.diamonds), step);
                        count = Math.max(count, 1);
                        if (LogicProp$1.instance.has(EPropNameById$1.diamonds, count)) {
                            LogicProp$1.instance.add(EPropNameById$1.diamonds, count * -1);
                            sunBed.addMoney(this.position.clone(), count);
                            PlayerNode.play11();
                        }
                    }
                    Laya.timer.once(50, this, this.putGoldToSunBed);
                }
            }
        }
        onStopOpenSunBed() {
            Laya.timer.clear(this, this.putGoldToSunBed);
        }
        onStartCheck() {
            this.isIntoCheck = true;
        }
        onStopCheck() {
            this.isIntoCheck = false;
        }
        onStartCleanRoom(room, cleanId) {
            this.toRoom = room;
            this.cleanId = cleanId;
            this.cTime = 0;
            Laya.timer.loop(20, this, this.onCleanRoom);
            AudioMgr$1.instance.play_sound(12);
        }
        onCleanRoom() {
            this.cTime += 20;
            if (this.toRoom) {
                this.toRoom.updateCleanTime(this.cleanId, Math.min(100, this.cTime / this.cMax * 100), this.cTime >= this.cMax);
                if (this.cTime >= this.cMax) {
                    Laya.timer.clear(this, this.onCleanRoom);
                    this.toRoom = null;
                    this.cleanId = 0;
                }
            }
        }
        onStopCleanRoom() {
            Laya.timer.clear(this, this.onCleanRoom);
            if (this.toRoom && this.cleanId > 0) {
                this.toRoom.updateCleanTime(this.cleanId, 0, false);
            }
        }
        onStartCleanSunBed(room, bedId) {
            this.toSwimPool = room;
            this.toBedId = bedId;
            this.cTime = 0;
            Laya.timer.loop(20, this, this.onCleanSunBed);
            AudioMgr$1.instance.play_sound(12);
        }
        onCleanSunBed() {
            this.cTime += 20;
            if (this.toSwimPool) {
                this.toSwimPool.updateCleanTime(this.toBedId, Math.min(100, this.cTime / this.cMax * 100), this.cTime >= this.cMax);
                if (this.cTime >= this.cMax) {
                    Laya.timer.clear(this, this.onCleanSunBed);
                    this.toSwimPool = null;
                    this.toBedId = 0;
                }
            }
        }
        onStopCleanSunBed() {
            Laya.timer.clear(this, this.onCleanSunBed);
            if (this.toSwimPool && this.toBedId > 0) {
                this.toSwimPool.updateCleanTime(this.toBedId, 0, false);
            }
        }
        onStartPutZhi(room, sitIndex) {
            this.toToilet = room;
            if (this.toToilet.getSitNull(sitIndex - 1)) {
                let prop = this.getAndDelOneProp(NFood.Paper);
                if (prop) {
                    this.toToilet.addSitZhi(sitIndex - 1);
                    prop.node.destroy();
                }
            }
        }
        onStopPutZhi() {
        }
        onStartPutCan(room, sitIndex) {
            this.toYinshui = room;
            if (this.toYinshui.getSitNull(sitIndex - 1)) {
                let prop = this.getAndDelOneProp(NFood.Can);
                if (prop) {
                    this.toYinshui.addSitZhi(sitIndex - 1);
                    prop.node.destroy();
                }
            }
        }
        onStopPutCan() {
        }
        onStartPutMaojin(room) {
            this.toSwimPool = room;
            this.putOneMaojinToPool();
        }
        putOneMaojinToPool() {
            if (this.toSwimPool) {
                if (this.toSwimPool.isNeedMaojin()) {
                    let prop = this.getAndDelOneProp(NFood.Towel);
                    if (prop) {
                        prop.node.destroy();
                        this.sortPorp();
                        this.toSwimPool.addMaojin();
                    }
                }
                Laya.timer.once(500, this, this.putOneMaojinToPool);
            }
        }
        onStopPutMaojin() {
            Laya.timer.clear(this, this.putOneMaojinToPool);
        }
        onStartPutFood(room, tableId) {
            this.toResturant = room;
            this.toTableId = tableId;
            this.putOneFoodToTable();
        }
        putOneFoodToTable() {
            if (this.toResturant) {
                let foodIds = this.toResturant.getNeedFoodIds(this.toTableId);
                for (var i = 0; i < foodIds.length; i++) {
                    let prop = this.getAndDelOneProp(foodIds[i]);
                    if (prop) {
                        prop.node.destroy();
                        this.sortPorp();
                        this.toResturant.addFoodToTable(this.toTableId, foodIds[i]);
                        break;
                    }
                }
                Laya.timer.once(500, this, this.putOneFoodToTable);
            }
        }
        onStopPutFood() {
            Laya.timer.clear(this, this.putOneFoodToTable);
        }
        onStartParkingCar(park) {
            this.toPark = park;
            this.toPark.startMoveCarByPlayer();
        }
        onStopParkingCar() {
            this.toPark.stopMoveCarByPlayer();
        }
        onStartGetToiletPaper() {
            this.getOnePaper();
        }
        onStopGetToiletPaper() {
            Laya.timer.clear(this, this.getOnePaper);
        }
        getOnePaper() {
            if (this.checkBag() == false) {
                this.addProp(NFood.Paper);
                Laya.timer.once(1000, this, this.getOnePaper);
            }
        }
        onStartGetYinLiao() {
            this.getOneCan();
        }
        onStopGetYinLiao() {
            Laya.timer.clear(this, this.getOneCan);
        }
        getOneCan() {
            if (this.checkBag() == false) {
                this.addProp(NFood.Can);
                Laya.timer.once(1000, this, this.getOneCan);
            }
        }
        onStartGetMaoJian() {
            this.getOneMaojin();
        }
        onStopGetMaoJian() {
            Laya.timer.clear(this, this.getOneMaojin);
        }
        getOneMaojin() {
            if (this.checkBag() == false) {
                this.addProp(NFood.Towel);
                Laya.timer.once(1000, this, this.getOneMaojin);
            }
        }
        onStartGetRou() {
            this.getOneROU();
        }
        onStopGetRou() {
            Laya.timer.clear(this, this.getOneROU);
        }
        getOneROU() {
            if (this.checkBag() == false) {
                this.addProp(NFood.Rou);
                Laya.timer.once(1000, this, this.getOneROU);
            }
        }
        onStartGetShucai() {
            this.getOneShucai();
        }
        onStopGetShucai() {
            Laya.timer.clear(this, this.getOneShucai);
        }
        getOneShucai() {
            if (this.checkBag() == false) {
                this.addProp(NFood.Shucai);
                Laya.timer.once(1000, this, this.getOneShucai);
            }
        }
        onStartTrash() {
            this.trashOneProp();
        }
        onStopTrash() {
            Laya.timer.clear(this, this.trashOneProp);
        }
        trashOneProp() {
            if (this.props.length > 0) {
                let prop = this.props.pop();
                prop.node.destroy();
                this.sortPorp();
                Laya.timer.once(1000, this, this.trashOneProp);
            }
        }
        static play11() {
            let t = new Date().getTime();
            if (t - PlayerNode.t > 200) {
                AudioMgr$1.instance.play_sound(11);
                PlayerNode.t = t;
            }
        }
        addProp(type) {
            let food = new Laya.Sprite3D();
            let script = food.addComponent(PropFood);
            script.type = type;
            this.props.push(script);
            this.propSp.addChild(food);
            this.sortPorp();
        }
        getAndDelOneProp(type) {
            let prop = null;
            for (var i = this.props.length - 1; i >= 0; i--) {
                if (this.props[i].type == type) {
                    prop = this.props[i];
                    this.props.splice(i, 1);
                    this.sortPorp();
                    break;
                }
            }
            return prop;
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
            this.resetPlay();
            this.checkBag();
        }
        checkBag() {
            return this.data.checkBag(this.props.length);
        }
        get isHas() {
            return this.props.length > 0;
        }
        updatePropPR() {
            if (this.character) {
                let parentSp = this.node;
                switch (this.propType) {
                    case 0:
                        parentSp = this.character.Default;
                        break;
                    case NBox.Transport_Carpet:
                        parentSp = this.character.Head;
                        break;
                    case NBox.Transport_Monocycle:
                        parentSp = this.character.Head;
                        break;
                    case NBox.Transport_Suitcase:
                        parentSp = this.character.Head;
                        break;
                    case NBox.Transport_Unicorn:
                        parentSp = this.character.leftHand;
                        break;
                }
                if (this.propSp.parent != parentSp) {
                    parentSp.addChild(this.propSp);
                    this.propSp.transform.localPosition = new Laya.Vector3(0, 0, 0);
                }
            }
        }
        initTransport() {
            if (RescoureData.isLoadPlayer == false)
                return;
            if (LogicData.instance.Transport <= 0)
                return;
            if (this.propType == NBox.NULL) {
                this.useTransport(LogicData.instance.Transport);
            }
        }
        useTransport(propType) {
            this.propType = propType;
            ResourcesMgr$1.instance.load(ABox.GetPrefabname(propType), (node) => {
                if (node) {
                    if (this.transportNode) {
                        this.transportNode.destroy();
                        this.transportNode = null;
                    }
                    this.transportNode = Laya.Sprite3D.instantiate(node);
                    this.transportNode.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    switch (this.propType) {
                        case NBox.Transport_Carpet:
                            this.node.addChild(this.transportNode);
                            this.character.node.transform.localPosition = new Laya.Vector3(0, 0.15, 0);
                            break;
                        case NBox.Transport_Monocycle:
                            this.node.addChild(this.transportNode);
                            this.character.node.transform.localPosition = new Laya.Vector3(0, 0.4, 0);
                            break;
                        case NBox.Transport_Suitcase:
                            this.node.addChild(this.transportNode);
                            this.character.node.transform.localPosition = new Laya.Vector3(0, 0.23, 0);
                            break;
                        case NBox.Transport_Unicorn:
                            this.character.PonyTransportRoot.addChild(this.transportNode);
                            break;
                    }
                    this.resetPlay();
                }
            });
        }
        removeTransport() {
            if (LogicData.instance.Transport > 0) {
                this.useTransport(LogicData.instance.Transport);
            }
            else {
                this.propType = 0;
                this.transportNode.destroy();
            }
            this.resetPlay();
        }
        createCharacterByType(skinId, hairId) {
            if (this.character) {
                this.character.node.destroy();
                this.character = null;
            }
            var cNode = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPlayerUrlByName("PlayerCharacter")));
            cNode.transform.localPosition = new Laya.Vector3(0, 0, 0);
            this.character = cNode.addComponent(Player);
            this.node.addChild(cNode);
        }
        get posXZ() {
            this.xz.x = this._transform.position.x;
            this.xz.y = 0;
            this.xz.z = this._transform.position.z;
            return this.xz;
        }
        setPosRotBySprite3D(sp) {
            this.node.transform.position = sp.transform.position.clone();
            this.node.transform.rotation = sp.transform.rotation.clone();
        }
        get position() {
            return this._transform.position.clone();
        }
        get rotation() {
            return this._transform.rotation.clone();
        }
        set level(value) {
            this._level = value;
        }
        get level() {
            return this._level;
        }
        playIdle() {
            this.isRun = false;
            if (this.character) {
                switch (this.propType) {
                    case 0:
                        if (this.isHas) {
                            this.character.playCarryingIdle();
                        }
                        else {
                            this.character.playIdle();
                        }
                        break;
                    case NBox.Transport_Carpet:
                        this.character.playCharacterCarpetRIding();
                        break;
                    case NBox.Transport_Monocycle:
                        this.character.playMocycleIdle();
                        break;
                    case NBox.Transport_Suitcase:
                        if (this.isHas) {
                            this.character.playCharacterSuitcaseRIdingCarryingIdle();
                        }
                        else {
                            this.character.playCharacterSuitcaseIdle();
                        }
                        break;
                    case NBox.Transport_Unicorn:
                        if (this.isHas) {
                            this.character.playHorseRidingIdleCarrying();
                        }
                        else {
                            this.character.playHorseRidingIdle();
                        }
                        break;
                }
            }
        }
        resetPlay() {
            if (this.isRun) {
                this.playRun();
            }
            else {
                this.playIdle();
            }
        }
        playRun() {
            this.isRun = true;
            if (this.character) {
                switch (this.propType) {
                    case 0:
                        if (this.isHas) {
                            this.character.playWalkingWithBox();
                        }
                        else {
                            this.character.playRun();
                        }
                        break;
                    case NBox.Transport_Carpet:
                        this.character.playCharacterCarpetRIding();
                        break;
                    case NBox.Transport_Monocycle:
                        this.character.playMonocycleRide();
                        break;
                    case NBox.Transport_Suitcase:
                        if (this.isHas) {
                            this.character.playCharacterSuitcaseRIdingCarrying();
                        }
                        else {
                            this.character.playCharacterSuitcaseRiding();
                        }
                        break;
                    case NBox.Transport_Unicorn:
                        if (this.isHas) {
                            this.character.playHorseRidingCarrying();
                        }
                        else {
                            this.character.playHorseRiding();
                        }
                        break;
                }
            }
        }
    }
    PlayerNode.t = 0;

    class NodeDirectionBase {
        constructor(prop) {
            this.propName = prop;
        }
        updataPosition(postion, time = 0) {
            let value = this.getValue(time);
            postion[this.propName] = value;
            this.lastValue = value;
        }
        getValue(time) {
            return 0;
        }
    }

    class NodeRunRotate extends NodeDirectionBase {
        constructor() {
            super("rotate");
            this._enableMouse = false;
            this._startMouse = new Laya.Point(0, 0);
            this._la = 0;
        }
        set enableMouse(value) {
            this._enableMouse = value;
            if (value) {
                this._startMouse.x = Laya.MouseManager.instance.mouseX;
                this._startMouse.y = Laya.MouseManager.instance.mouseY;
            }
            else {
                this._startMouse.x = 0;
                this._startMouse.y = 0;
            }
        }
        getValue() {
            if (this._enableMouse) {
                var p = new Laya.Point(Laya.MouseManager.instance.mouseX, Laya.MouseManager.instance.mouseY);
                this.lastValue = this.getRotate(this._startMouse, p) * -1;
                return this.lastValue;
            }
            else {
                return this.lastValue;
            }
        }
        getRotate(spos, epos) {
            var atan2 = Math.atan2((epos.y - spos.y), (epos.x - spos.x));
            var rotate = (atan2) * 180 / Math.PI + 90;
            return rotate;
        }
    }

    class JianScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.transform = null;
            this.quadMat = null;
            this.tilingOffset = new Laya.Vector4(1, 1, 0, 0);
            this._scale = new Laya.Vector3(1, 1, 1);
            this.isShow = false;
        }
        onAwake() {
            this.transform = this.node.transform;
            let quad = this.findNodeByPath("Quad");
            this.quadMat = quad.meshRenderer.material;
            this.transform.localScale = this._scale;
        }
        onUpdate() {
            this.quadMat.tilingOffset = this.tilingOffset;
            this.tilingOffset.z += 0.04;
        }
        show(bPos, ePos) {
            this.isShow = true;
            let dis = Laya.Vector3.distance(bPos, ePos);
            this.node.transform.localPosition = bPos;
            this.tilingOffset.x = this._scale.z = dis;
            this.node.transform.localScale = this._scale;
            this.node.transform.rotation = MoveManager.instance.lookAt(bPos, ePos, v3_up);
        }
        hide() {
            if (!this.isShow)
                return;
            this.isShow = false;
            this.node.transform.localPosition = new Laya.Vector3(-200, 0, -200);
        }
    }
    class GuessJiangtouScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.transform = null;
            this.quadMat = null;
            this.tilingOffset = new Laya.Vector4(1, 1, 0, 0);
            this._scale = new Laya.Vector3(1, 1, 1);
            this._out = new Laya.Vector3(0, 0, 0);
            this._state = 0;
            this.guessStep = 0;
            this.player = null;
            this.MenPos = new Laya.Vector3(14, 0, 68);
            this.jianList = [];
            this.isInit = false;
            this.isClean = false;
            this.isPlayerComplete = false;
            this.isNextSideOk = false;
            this.nextSideIndex = 0;
            this.nextNeedEnergy = 0;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.createJian();
        }
        createJian() {
            ResourcesMgr$1.instance.load(RescoureData.FRIST_SCENE + "GuessJiangTou.lh", (node) => {
                for (var i = 0; i < 1; i++) {
                    let jiangtou = Laya.Sprite3D.instantiate(node);
                    jiangtou.transform.localPosition = new Laya.Vector3(-100, 0, -100);
                    let script = jiangtou.addComponent(JianScript);
                    this.jianList.push(script);
                    this.node.addChild(jiangtou);
                    this.isInit = true;
                }
            });
        }
        onStart() {
            this._state = GuessJiangtouScript.STATE_MOVE;
            this.guessStep = LogicRoom.instance.guessStep;
            EventMgr.Int.emit(EventType.GETSTEPPOS);
        }
        onUpdate() {
            if (this.isInit == false)
                return;
            if (this._state == GuessJiangtouScript.STATE_MOVE) {
                let side = null;
                switch (this.guessStep) {
                    case 0:
                        side = LogicRoom.instance.getSideScript(100);
                        this.lookSide(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 1:
                        side = LogicRoom.instance.getSideScript(102);
                        this.lookSide(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 2:
                        side = LogicRoom.instance.getSideScript(103);
                        this.lookSide(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 3:
                        side = LogicRoom.instance.getSideScript(105);
                        this.lookSide(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 4:
                        side = LogicRoom.instance.getSideScript(1);
                        this.lookSide(side);
                        if (side && side.isOpening) {
                            GameSDK.sendEvent("收银台接待顾客");
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 5:
                        this.lookCleanPos();
                        if (this.isClean) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 6:
                        side = LogicRoom.instance.getSideScript(101);
                        this.lookSideCheckMoney(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 7:
                        side = LogicRoom.instance.getSideScript(104);
                        this.lookSideCheckMoney(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 8:
                        side = LogicRoom.instance.getSideScript(2);
                        this.lookSideCheckMoney(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 9:
                        side = LogicRoom.instance.getSideScript(4);
                        this.lookPlayerUpgrade(side);
                        if (this.isPlayerComplete) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 10:
                        side = LogicRoom.instance.getSideScript(200);
                        this.lookZone(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 11:
                        side = LogicRoom.instance.getSideScript(3);
                        this.lookParking(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    case 12:
                        side = LogicRoom.instance.getSideScript(305);
                        this.lookElevator(side);
                        if (side && side.isOpening) {
                            this.gotoNextGuessStep();
                        }
                        break;
                    default:
                        this.hide();
                        break;
                }
            }
        }
        jianToPos(toPos) {
            if (!this.playerPos || !toPos)
                return;
            this.showLine1(toPos);
        }
        showLine1(toPos) {
            this.jianList[0].show(this.playerPos, toPos);
        }
        hide() {
            this.jianList[0].hide();
        }
        lookSide(side) {
            if (side) {
                this.jianToPos(side.GuessPos);
            }
            else {
                this.hide();
            }
        }
        lookCleanPos() {
            let room = LogicRoom.instance.getRoomInClean(1);
            if (room) {
                let cleanId = room.getCanCleanId();
                if (cleanId > 0) {
                    let pos = room.getCleanPos(cleanId);
                    if (pos) {
                        this.jianToPos(pos);
                    }
                    else {
                        this.hide();
                    }
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        lookSideCheckMoney(side) {
            if (side) {
                if (LogicProp$1.instance.has(EPropNameById$1.diamonds, side.needPreCount, false)) {
                    this.jianToPos(side.GuessPos);
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        lookPlayerUpgrade(side) {
            if (side) {
                if (side.isOpening) {
                    this.jianToPos(side.GuessPos);
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        lookZone(side) {
            if (side) {
                if (side.isCanOpen) {
                    if (LogicProp$1.instance.has(EPropNameById$1.diamonds, side.needPreCount, false)) {
                        this.jianToPos(side.GuessPos);
                    }
                    else {
                        this.hide();
                    }
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        lookParking(side) {
            if (side) {
                if (side.isCanOpen) {
                    if (LogicProp$1.instance.has(EPropNameById$1.diamonds, side.needPreCount, false)) {
                        this.jianToPos(side.GuessPos);
                    }
                    else {
                        this.hide();
                    }
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        lookElevator(side) {
            if (side) {
                if (side.isCanOpen) {
                    if (LogicProp$1.instance.has(EPropNameById$1.diamonds, side.needPreCount, false)) {
                        this.jianToPos(side.GuessPos);
                    }
                    else {
                        this.hide();
                    }
                }
                else {
                    this.hide();
                }
            }
            else {
                this.hide();
            }
        }
        setNextSide(index, NeedEnergy) {
            this.isNextSideOk = true;
            this.nextSideIndex = index;
            this.nextNeedEnergy = NeedEnergy;
        }
        get playerPos() {
            this._out.x = this.player.position.x;
            this._out.z = this.player.position.z;
            return this._out;
        }
        setPlayerNode(player) {
            this.player = player;
        }
        gotoNextGuessStep() {
            this.guessStep += 1;
            this.saveGuessStep();
        }
        saveGuessStep() {
            LogicRoom.instance.guessStep = this.guessStep;
        }
        setGuessStep(step) {
            this.guessStep = step;
            LogicRoom.instance.guessStep = this.guessStep;
        }
    }
    GuessJiangtouScript.STATE_NULL = 0;
    GuessJiangtouScript.STATE_MOVE = 1;

    class BoxCharacterScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.character = null;
        }
        onAwake() {
            this.character = this.owner.getComponent(Laya.CharacterController);
        }
        onUpdate() {
        }
        move(dir) {
            this.character.move(dir);
        }
        jump(dir) {
            this.character.jump(dir);
        }
        get position() {
            return this.node.transform.position;
        }
    }

    class PropBagMax extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._transfrom = null;
            this.toTransform = null;
            this.isMove1 = false;
            this.isMove2 = false;
            this.Max = null;
            this.Progress = null;
            this.progressMat = null;
            this.bloodMat = null;
            this.nums = [];
        }
        onAwake() {
            this._transfrom = this.node.transform;
            this.Max = this.findNodeByPath("Max");
            this.Max.active = false;
        }
        onUpdate() {
            if (this.toTransform) {
                this._transfrom.position = this.toTransform.position;
            }
        }
        setFlowTransform(toTransform) {
            this.toTransform = toTransform;
        }
        showMax() {
            this.isMove1 = true;
            this.node.active = true;
            this.Max.active = true;
        }
        hideMax() {
            this.isMove1 = false;
            if (this.Max)
                this.Max.active = false;
        }
    }

    var AnimState$5;
    (function (AnimState) {
        AnimState["Idle"] = "WavingIdle";
        AnimState["Run"] = "WalkingHappy_0";
    })(AnimState$5 || (AnimState$5 = {}));
    class VipCustomerAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$5.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$5.Idle);
            this.animator.addScriptPlayState(0, AnimState$5.Run);
        }
        playIdle() {
            this.play(AnimState$5.Idle);
        }
        playRun() {
            this.play(AnimState$5.Run);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class VipCustomerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.moneyCount = 0;
            this.VipPaths = [];
            this.standPos = null;
            this.transform = null;
            this.isLoaded = false;
            this._anim = null;
            this.movePath = null;
            this._state = 0;
            this.t = 0;
            this.all = 0;
            this.out = new Laya.Vector3(0, 0, 0);
            this.oneCount = 1;
            this.addCount = 1;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.movePath = this.node.addComponent(MovePath);
            this.loadNode();
        }
        onStart() {
            this.toWaite();
        }
        onLateUpdate() {
            if (this.isLoaded == false)
                return;
            if (this._state == VipCustomerNode.MOVE_WAITE) {
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.moveToStand();
                }
            }
            else if (this._state == VipCustomerNode.MVOE_RUN) {
                if (this.addCount > 0) {
                    this.addCount -= 1;
                    let bpos = this.transform.position.clone();
                    bpos.y += 1;
                    let r = (Math.random() * 360) * Math.PI / 180;
                    let len = Math.random() * 0.5 + 0.5;
                    let epos = new Laya.Vector3(bpos.x + len * Math.sin(r), 0.1, bpos.z + +len * Math.cos(r));
                    SceneMgr.Int.playerController.addMoney(bpos, epos, this.oneCount);
                }
            }
        }
        toWaite() {
            this._state = VipCustomerNode.MOVE_WAITE;
            this.t = 0;
            this.all = 1000;
        }
        moveToStand() {
            this._state = VipCustomerNode.MOVE_TO_STAND;
            let path = [this.transform.position.clone()];
            path.push(LogicRoom.instance.LobbyDesk.getStandPosIndex(0));
            path.push(this.standPos);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.moveToStandComplete));
            this.playRun();
        }
        moveToStandComplete() {
            this.toStand();
        }
        toStand() {
            this._state = VipCustomerNode.MOVE_STAND;
            this.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
            SceneMgr.Int.playerController.setVipCustomerReady(this.standPos.clone());
            this.playIdle();
        }
        startVipMove() {
            this._state = VipCustomerNode.MVOE_RUN;
            this.oneCount = Math.floor(this.moneyCount / 500);
            this.addCount = 500;
            let rooms = LogicRoom.instance.getOpenRooms();
            let toRoom = rooms[Math.floor(Math.random() * rooms.length)];
            let path = LogicRoom.instance.getPathList(LogicRoom.instance.LobbyDesk.c_inPathIndex, toRoom.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(toRoom.getCustomerToBedPos());
            path = path.concat(LogicRoom.instance.getPathList(toRoom.c_mainPathIndex, LogicRoom.instance.LobbyDesk.c_outPathIndex));
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onMoveComplete));
            this.playRun();
        }
        onMoveComplete() {
            this._state = VipCustomerNode.MOVE_NULL;
            this.node.destroy();
        }
        loadNode() {
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName("VipCustomer"), (node) => {
                if (node) {
                    let character = Laya.Sprite3D.instantiate(node);
                    character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = character.addComponent(VipCustomerAnim);
                    this.node.addChild(character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
    }
    VipCustomerNode.MOVE_NULL = 0;
    VipCustomerNode.MOVE_STAND = 1;
    VipCustomerNode.MVOE_RUN = 2;
    VipCustomerNode.MOVE_WAITE = 3;
    VipCustomerNode.MOVE_TO_STAND = 4;

    class PropVipCustomer extends ABox {
        constructor() {
            super(...arguments);
            this.Yuan = null;
            this.VipCustomer = null;
            this.VipPaths = [];
        }
        onAwake() {
            this.Yuan = this.findNodeByPath("Yuan");
            this.Yuan.active = false;
        }
        onStart() {
            this.loadNode();
        }
        onLateUpdate() {
        }
        setVipCustomerReady() {
            this.Yuan.active = true;
            this.indexList = MoveManager.instance.addSideToPoint(this.node.transform.position, new Laya.Vector3(1, 0, 1), SideType.Prop_Box, this.propId);
        }
        cleanProp() {
            MoveManager.instance.removeSide(this.indexList);
            this.node.destroy();
        }
        startVipMove() {
            this.VipCustomer.startVipMove();
        }
        cleanAll() {
            MoveManager.instance.removeSide(this.indexList);
            if (this.VipCustomer) {
                this.VipCustomer.node.destroy();
                this.VipCustomer = null;
            }
            this.node.destroy();
        }
        loadNode() {
            let vip = new Laya.Sprite3D();
            vip.name = "VipCustomer";
            this.VipCustomer = vip.addComponent(VipCustomerNode);
            this.VipCustomer.VipPaths = this.VipPaths;
            this.VipCustomer.moneyCount = this.count;
            this.VipCustomer.standPos = this.VipPaths[0].clone();
            SceneMgr.Int.levelNode.addChild(vip);
            vip.transform.position = LogicRoom.instance.getPathNode(1).node.transform.position.clone();
        }
    }

    class PlayerController extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._startMove = false;
            this._isDown = false;
            this._isMoveEnd = false;
            this._nodeRunRotate = null;
            this._endPos = null;
            this._out = new Laya.Vector3();
            this._out1 = new Laya.Vector3();
            this._out2 = new Laya.Vector3();
            this.beginPos = null;
            this.endPos = null;
            this._cameraBegPos = null;
            this._cameraEndPos = null;
            this._moveState = 1;
            this._skinId = 0;
            this._hairId = 0;
            this.CharacterScript = null;
            this.playerNode = null;
            this.bagMax = null;
            this.jiangtouScript = null;
            this.inSideType = 0;
            this.inSideId = 0;
            this.walkSideType = 0;
            this.walkSideId = 0;
            this.inPropId = 0;
            this.bPos = null;
            this.ePos = null;
            this._out3 = new Laya.Vector3(0, 0, 0);
            this._time = 0;
            this._allTime = 30;
            this._score = 1;
            this.startPos = null;
            this.isBox = false;
            this.isEnd = false;
            this.endCount = 0;
            this.transportData = { state: 0, prop: null, type: 0, count: 1, time: 0, showMax: 2 * 60 * 1000, hideMax: 2 * 60 * 1000, useMax: 3 * 60 * 1000 };
            this.BoxData = { state: 0, prop: null, type: 0, count: 1, time: 0, showMax: 2 * 60 * 1000, hideMax: 2 * 60 * 1000, useMax: 0 };
            this.VipData = { state: 0, prop: null, type: 0, count: 1, time: 0, showMax: 3 * 60 * 1000, hideMax: 3 * 60 * 1000, useMax: 0 };
            this._isLoadPropTiped = false;
            this._isLoadPropTiping = false;
            this.energyDic = new Dictionary();
            this.ri = 0;
            this.lookTime = 60;
        }
        get isStart() {
            return this._startMove;
        }
        set skinId(value) {
            this._skinId = value;
        }
        get skinId() {
            return this._skinId;
        }
        set hairId(value) {
            this._hairId = value;
        }
        get hairId() {
            return this._hairId;
        }
        playerPause() {
            this._moveState = PlayerController.MOVE_NULL;
            this._isDown = false;
            this._startMove = false;
            if (this.CharacterScript) {
                this.CharacterScript.move(v3_zeor);
            }
            if (this.playerNode) {
                this.playerNode.playIdle();
            }
        }
        playerResume() {
            this._moveState = PlayerController.MOVE_STAND;
        }
        onAwake() {
            this._nodeRunRotate = new NodeRunRotate();
            this.initEvent();
        }
        initEvent() {
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDownHandler);
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_UP, this, this.onMouseUpHandler);
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_OUT, this, this.onMouseUpHandler);
        }
        initStartPos(startPos = null) {
            this.startPos = startPos;
            this._isMoveEnd = false;
            this._startMove = false;
            this.node.transform.position = startPos;
            SceneMgr.Int.cameraFollow.enabled = true;
            SceneMgr.Int.cameraFollow.onSetPosition(startPos, new Laya.Vector3(0, 0, 0));
            this.initSideCBS();
            this.createPlayerNode();
        }
        initSideCBS() {
            MoveManager.instance.addSideCB(SideType.Open_Zone, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_ROOM, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_CleanBase, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_Toilent, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_Storage, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Upgrade_LobbyDesk, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_Parking, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Open_Elevator, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Upgrade_WORKER, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Upgrade_ROOM, this, this.onStartPutMoney, this.onStopPutMoney, null, null);
            MoveManager.instance.addSideCB(SideType.Check_Lobby, this, this.onStartCheck, this.onStopCheck, null, null);
            MoveManager.instance.addSideCB(SideType.GET_LobbyMoney, this, null, null, this.onGetLobbyMoney, null);
            MoveManager.instance.addSideCB(SideType.CLEAN_ROOM, this, null, null, this.onStartCleanRoom, this.onStopCleanRoom);
            MoveManager.instance.addSideCB(SideType.Toilet_PUT, this, null, null, this.onStartPutZhi, this.onStopPutZhi);
            MoveManager.instance.addSideCB(SideType.PUT_FOOD_TABLE, this, null, null, this.onStartPutFood, this.onStopPutFood);
            MoveManager.instance.addSideCB(SideType.YinShuiJian_PUT, this, null, null, this.onStartPutCan, this.onStopPutCan);
            MoveManager.instance.addSideCB(SideType.GET_Toilet, this, null, null, this.onGetLobbyMoney, null);
            MoveManager.instance.addSideCB(SideType.GET_PARKING, this, null, null, this.onGetLobbyMoney, null);
            MoveManager.instance.addSideCB(SideType.PARKING_CAR, this, this.onStartParkingCar, this.onStopParkingCar, null, null);
            MoveManager.instance.addSideCB(SideType.GET_ToiletPaper, this, this.onStartGetToiletPaper, this.onStopGetToiletPaper, null, null);
            MoveManager.instance.addSideCB(SideType.GET_Maojing, this, this.onStartGetMaoJian, this.onStopGetMaoJian, null, null);
            MoveManager.instance.addSideCB(SideType.GET_Yingliao, this, this.onStartGetYinLiao, this.onStopGetYinLiao, null, null);
            MoveManager.instance.addSideCB(SideType.GET_ROU, this, this.onStartGetRou, this.onStopGetRou, null, null);
            MoveManager.instance.addSideCB(SideType.GET_ShuCai, this, this.onStartGetShucai, this.onStopGetShucai, null, null);
            MoveManager.instance.addSideCB(SideType.Prop_Box, this, null, null, this.onColliderPropBox, null);
            MoveManager.instance.addSideCB(SideType.TRASHBING, this, this.onStartTrash, this.onStopTrash, null, null);
            MoveManager.instance.addSideCB(SideType.UPGRADE_PLAYER, this, this.onUpgradePlayer, null, null, null);
            MoveManager.instance.addSideCB(SideType.DIANTI, this, this.onOpenDianti, null, null, null);
            MoveManager.instance.addSideCB(SideType.PUT_MAOJIN, this, null, null, this.onStartPutMaojin, this.onStopPutMaojin);
            MoveManager.instance.addSideCB(SideType.Open_SUNBED, this, this.onStartOpenSunBed, this.onStopOpenSunBed, null, null);
            MoveManager.instance.addSideCB(SideType.CLEAN_SunBed, this, null, null, this.onStartCleanSunBed, this.onStopCleanSunBed);
        }
        initBox() {
            this.createBoxCharacter(this.node.transform.position);
            this.isBox = true;
        }
        onEndStart(isWin, time = 2000) {
            Laya.timer.clearAll(this);
            Laya.timer.once(time, this, this.onOpenGameOverHandler, [isWin]);
        }
        onOpenGameOverHandler(isWin) {
            EventMgr.Int.emit(EventType.GAME_OVER, isWin, this._score);
        }
        onMouseDownHandler(e) {
            if (!SceneMgr.Int.isStart || this._isMoveEnd || !this.isBox)
                return;
            if ((this._moveState == PlayerController.MOVE_NORMAL ||
                this._moveState == PlayerController.MOVE_STAND)
                && this._isDown == false && !this.isEnd) {
                this._isDown = true;
                this._startMove = true;
                this._nodeRunRotate.enableMouse = true;
                if (this._moveState == PlayerController.MOVE_NORMAL || this._moveState == PlayerController.MOVE_STAND) {
                    this._moveState = PlayerController.MOVE_NORMAL;
                }
            }
        }
        onMouseUpHandler() {
            if (!SceneMgr.Int.isStart || this._isMoveEnd || !this.isBox)
                return;
            if ((this._moveState == PlayerController.MOVE_NORMAL ||
                this._moveState == PlayerController.MOVE_STAND)
                && this._isDown) {
                this._isDown = false;
                this._startMove = false;
                this._nodeRunRotate.enableMouse = false;
                if (this._moveState == PlayerController.MOVE_NORMAL || this._moveState == PlayerController.MOVE_STAND) {
                    this._moveState = PlayerController.MOVE_STAND;
                    if (this.CharacterScript) {
                        this.CharacterScript.move(v3_zeor);
                    }
                    if (this.playerNode) {
                        this.playerNode.playIdle();
                    }
                }
            }
        }
        onLateUpdate() {
            if (this.isEnd)
                return;
            if (!this.playerNode)
                return;
            this.initProps(Laya.timer.delta);
            if (this._moveState == PlayerController.MOVE_NORMAL) {
                if (!this._startMove || this._isMoveEnd || !this.isBox) {
                    return;
                }
                let rotate = this.moveRotate + 180;
                var p = rotate / 180 * Math.PI;
                let speed = this.getSpeed(1);
                this._out1.x = Math.sin(p) * speed;
                this._out1.z = Math.cos(p) * speed;
                this.CharacterScript.move(this._out1);
                let pos = this.CharacterScript.position.clone();
                var index = MoveManager.instance.toPositionIndex(pos);
                this.playerNode.setRotate(index, pos, rotate);
                SceneMgr.Int.cameraFollow.onFollowPosition(pos);
                MoveManager.instance.checkSideTypeForWalk(index);
            }
            else if (this._moveState == PlayerController.MOVE_STAND) {
                let pos = this.CharacterScript.position.clone();
                var index = MoveManager.instance.toPositionIndex(pos);
                this.playerNode.setPosition(index, pos);
                SceneMgr.Int.cameraFollow.onFollowPosition(pos);
                MoveManager.instance.checkSideTypeForStand(index);
            }
            else if (this._moveState == PlayerController.MOVE_TO_LOOKPOS) {
                if (this._time <= this._allTime) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this._time / this._allTime, this._out3);
                    SceneMgr.Int.cameraFollow.onFollowPosition(this._out3);
                }
                else {
                    if (this._time > this._allTime + this.lookTime) {
                        this._moveState = PlayerController.MOVE_BACK_LOOKPOS;
                        let temp = this.bPos.clone();
                        this.bPos = this.ePos.clone();
                        this.ePos = temp;
                        this._time = 0;
                        this._allTime = 30;
                    }
                }
                this._time++;
            }
            else if (this._moveState == PlayerController.MOVE_BACK_LOOKPOS) {
                if (this._time <= this._allTime) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this._time / this._allTime, this._out3);
                    SceneMgr.Int.cameraFollow.onFollowPosition(this._out3);
                }
                else {
                    this.MoveCamerToLookPosComplete();
                }
                this._time++;
            }
            else if (this._moveState == PlayerController.MOVE_TO_LOOKROOM) {
                if (this._time <= this._allTime) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this._time / this._allTime, this._out3);
                    SceneMgr.Int.cameraFollow.onFollowPosition(this._out3);
                }
                else {
                    this._moveState = PlayerController.MOVE_NULL;
                }
                this._time++;
            }
            this.checkEnergy();
        }
        onDeathHandler() {
            if (this._isMoveEnd)
                return;
            if (LogicShock.instance.is_open()) {
                GameSDK.vibrateLong();
            }
            this._isMoveEnd = true;
            this.onEndStart(false, 2000);
        }
        onDeath() {
            if (this._isMoveEnd)
                return;
            if (LogicShock.instance.is_open()) {
                GameSDK.vibrateLong();
            }
            this._isMoveEnd = true;
            this.onEndStart(false);
        }
        onDwonDeath() {
            if (this._isMoveEnd)
                return;
            if (LogicShock.instance.is_open()) {
                GameSDK.vibrateLong();
            }
            this._isMoveEnd = true;
            this.onEndStart(false, 200);
        }
        onMoveEndHandler() {
            if (this.isEnd)
                return;
            this.isEnd = true;
            if (LogicShock.instance.is_open()) {
                GameSDK.vibrateLong();
            }
            AudioMgr$1.instance.play_sound(17);
            this.onMoveEndEnvironment();
        }
        onMoveEndEnvironment(time = 10000) {
            this._moveState = PlayerController.MOVE_NULL;
            if (this.CharacterScript) {
                this.CharacterScript.move(v3_zeor);
            }
            if (this.playerNode) {
                this.playerNode.playIdle();
            }
            this.onEndStart(this.endCount == 0, 1000);
        }
        cameraToPos(toPos) {
        }
        getSpeed(dis) {
            return this.playerNode.speed;
        }
        changePlayerData() {
            if (this.playerNode) {
                this.playerNode.checkBag();
            }
        }
        onStartPutMoney(sideId) {
            let script = LogicRoom.instance.getSideScript(sideId);
            if (script) {
                this.playerNode.onStartPutMoney(script);
            }
        }
        onStopPutMoney(sideId) {
            this.playerNode.onStopPutMoney();
        }
        onStartOpenSunBed(sideId) {
            let roomId = Math.floor(sideId / 10);
            let bedId = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartOpenSunBed(script, bedId);
            }
        }
        onStopOpenSunBed(sideId) {
            this.playerNode.onStopOpenSunBed();
        }
        onStartCheck(sideId) {
            this.playerNode.onStartCheck();
        }
        onStopCheck(sideId) {
            this.playerNode.onStopCheck();
        }
        onGetLobbyMoney(sideId) {
            let script = LogicRoom.instance.getSideScript(sideId);
            if (script) {
                script.getAllMoney();
            }
        }
        onStartCleanRoom(sideId) {
            let roomId = Math.floor(sideId / 10);
            let cleanId = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartCleanRoom(script, cleanId);
            }
        }
        onStopCleanRoom(sideId) {
            this.playerNode.onStopCleanRoom();
        }
        onStartCleanSunBed(sideId) {
            let roomId = Math.floor(sideId / 10);
            let bedId = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartCleanSunBed(script, bedId);
            }
        }
        onStopCleanSunBed(sideId) {
            this.playerNode.onStopCleanSunBed();
        }
        onStartPutZhi(sideId) {
            let roomId = Math.floor(sideId / 10);
            let sitIndex = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartPutZhi(script, sitIndex);
            }
        }
        onStopPutZhi(sideId) {
            this.playerNode.onStopPutZhi();
        }
        onStartPutMaojin(sideId) {
            let script = LogicRoom.instance.getSideScript(sideId);
            if (script) {
                this.playerNode.onStartPutMaojin(script);
            }
        }
        onStopPutMaojin(sideId) {
            this.playerNode.onStopPutMaojin();
        }
        onStartPutFood(sideId) {
            let roomId = Math.floor(sideId / 10);
            let tableId = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartPutFood(script, tableId);
            }
        }
        onStopPutFood(sideId) {
            this.playerNode.onStopPutFood();
        }
        onStartPutCan(sideId) {
            let roomId = Math.floor(sideId / 10);
            let sitIndex = Math.floor(sideId % 10);
            let script = LogicRoom.instance.getSideScript(roomId);
            if (script) {
                this.playerNode.onStartPutCan(script, sitIndex);
            }
        }
        onStopPutCan(sideId) {
            this.playerNode.onStopPutCan();
        }
        onStartParkingCar(sideId) {
            let script = LogicRoom.instance.getSideScript(sideId);
            if (script) {
                this.playerNode.onStartParkingCar(script);
            }
        }
        onStopParkingCar(sideId) {
            this.playerNode.onStopParkingCar();
        }
        onStartGetToiletPaper(sideId) {
            this.playerNode.onStartGetToiletPaper();
        }
        onStopGetToiletPaper(sideId) {
            this.playerNode.onStopGetToiletPaper();
        }
        onStartGetMaoJian(sideId) {
            this.playerNode.onStartGetMaoJian();
        }
        onStopGetMaoJian(sideId) {
            this.playerNode.onStopGetMaoJian();
        }
        onStartGetRou(sideId) {
            this.playerNode.onStartGetRou();
        }
        onStopGetRou(sideId) {
            this.playerNode.onStopGetRou();
        }
        onStartGetShucai(sideId) {
            this.playerNode.onStartGetShucai();
        }
        onStopGetShucai(sideId) {
            this.playerNode.onStopGetShucai();
        }
        onStartGetYinLiao(sideId) {
            this.playerNode.onStartGetYinLiao();
        }
        onStopGetYinLiao(sideId) {
            this.playerNode.onStopGetYinLiao();
        }
        onColliderPropBox(propId) {
            this.ColliderPropBox(propId);
        }
        onStartTrash(sideId) {
            this.playerNode.onStartTrash();
        }
        onStopTrash(sideId) {
            this.playerNode.onStopTrash();
        }
        onUpgradePlayer(sideId) {
            UIMgr.instance.openUI(ModuleType.UpgradePlayer);
            this.jiangtouScript.isPlayerComplete = true;
        }
        onOpenDianti() {
            UIMgr.instance.openUI(ModuleType.Dianti);
        }
        initProps(delta) {
            if (RescoureData.isLoadPrefab == false || RescoureData.isLoadPlayer == false)
                return;
            if (this._isLoadPropTiping == false)
                this.loadPropTip();
            if (this._isLoadPropTiped == false)
                return;
            this.transportData.time += delta;
            this.BoxData.time += delta;
            this.VipData.time += delta;
            if (this.transportData.state == 0) {
                if (this.transportData.time >= this.transportData.hideMax) {
                    let parent = this.getPropPosition();
                    if (parent) {
                        this.transportData.state = 1;
                        this.transportData.time = 0;
                        this.transportData.prop = this.createTransport(parent);
                        this.transportData.type = this.transportData.prop.propType;
                    }
                }
            }
            else if (this.transportData.state == 1) {
                if (this.transportData.time >= this.transportData.showMax) {
                    this.transportData.state = 0;
                    this.transportData.time = 0;
                    this.transportData.prop.cleanAll();
                    this.transportData.prop = null;
                }
            }
            else if (this.transportData.state == 2) {
                if (this.transportData.time >= this.transportData.useMax) {
                    this.transportData.state = 0;
                    this.transportData.time = 0;
                    this.transportData.prop = null;
                    this.playerNode.removeTransport();
                }
            }
            if (this.BoxData.state == 0) {
                if (this.BoxData.time >= this.BoxData.hideMax) {
                    let parent = this.getPropPosition();
                    if (parent) {
                        this.BoxData.state = 1;
                        this.BoxData.time = 0;
                        this.BoxData.prop = this.createBox(parent);
                        this.BoxData.type = this.BoxData.prop.propType;
                        this.BoxData.count = this.BoxData.prop.count;
                    }
                }
            }
            else if (this.BoxData.state == 1) {
                if (this.BoxData.time >= this.BoxData.showMax) {
                    this.BoxData.state = 0;
                    this.BoxData.time = 0;
                    this.BoxData.prop.cleanAll();
                    this.BoxData.prop = null;
                }
            }
            if (this.VipData.state == 0) {
                if (LogicRoom.instance.getOpenRooms().length > 2) {
                    if (this.VipData.time >= this.VipData.hideMax) {
                        let VipPaths = LogicRoom.instance.VipPaths;
                        if (VipPaths.length > 0) {
                            this.VipData.state = 2;
                            this.VipData.time = 0;
                            this.VipData.prop = this.createVipCustomer(VipPaths);
                            this.VipData.type = this.VipData.prop.propType;
                            this.VipData.count = this.VipData.prop.count;
                        }
                    }
                }
                else {
                    this.VipData.time = 0;
                }
            }
            else if (this.VipData.state == 1) {
                if (this.VipData.time >= this.VipData.showMax) {
                    this.VipData.state = 0;
                    this.VipData.time = 0;
                    this.VipData.prop.cleanAll();
                    this.VipData.prop = null;
                }
            }
        }
        setVipCustomerReady(standPos) {
            this.VipData.state = 1;
            this.VipData.prop.setVipCustomerReady();
            this.MoveCamerToLookPos(standPos);
        }
        ColliderPropBox(propId) {
            if (this.transportData.prop && this.transportData.prop.propId == propId) {
                if (this.showTriggerVideo()) {
                    this.showAD(propId, this.transportData.prop.propType);
                }
                else {
                    UIMgr.instance.openUI(ModuleType.HuodeBox, { propId: propId, propType: this.transportData.prop.propType, propCount: 1 });
                }
            }
            if (this.BoxData.prop && this.BoxData.prop.propId == propId) {
                if (this.showTriggerVideo()) {
                    this.showAD(propId, this.BoxData.prop.propType);
                }
                else {
                    UIMgr.instance.openUI(ModuleType.HuodeBox, { propId: propId, propType: this.BoxData.prop.propType, propCount: this.BoxData.prop.count });
                }
            }
            if (this.VipData.prop && this.VipData.prop.propId == propId) {
                if (this.showTriggerVideo()) {
                    this.showAD(propId, this.VipData.prop.propType);
                }
                else {
                    UIMgr.instance.openUI(ModuleType.HuodeBox, { propId: propId, propType: this.VipData.prop.propType, propCount: this.VipData.prop.count });
                }
            }
        }
        showAD(propId, propType) {
            let tip = "";
            switch (propType) {
                case NBox.Diamond:
                    tip = "视频获取钻石";
                    break;
                case NBox.Money:
                    tip = "视频获取钞票";
                    break;
                case NBox.Transport_Carpet:
                case NBox.Transport_Monocycle:
                case NBox.Transport_Suitcase:
                case NBox.Transport_Unicorn:
                    tip = "视频获取交通工具";
                    break;
                case NBox.VIP_CUSTOMER:
                    tip = "视频VIP顾客";
                    break;
            }
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.usePropBox(propId);
                }
            }, tip);
        }
        usePropBox(propId) {
            if (this.transportData.prop && this.transportData.prop.propId == propId) {
                this.transportData.state = 2;
                this.transportData.time = 0;
                this.transportData.prop.cleanAll();
                this.transportData.prop = null;
                this.playerNode.useTransport(this.transportData.type);
            }
            if (this.BoxData.prop && this.BoxData.prop.propId == propId) {
                this.BoxData.state = 0;
                this.BoxData.time = 0;
                this.BoxData.prop.cleanAll();
                this.BoxData.prop = null;
                if (this.BoxData.type == NBox.Diamond) {
                    LogicProp$1.instance.add(EPropNameById$1.Zuanshi, this.BoxData.count, true);
                }
                else if (this.BoxData.type == NBox.Money) {
                    LogicProp$1.instance.add(EPropNameById$1.diamonds, this.BoxData.count, true);
                }
            }
            if (this.VipData.prop && this.VipData.prop.propId == propId) {
                this.VipData.state = 0;
                this.VipData.time = 0;
                this.VipData.prop.startVipMove();
                this.VipData.prop.cleanProp();
                this.VipData.prop = null;
            }
        }
        createTransport(parent) {
            let sp = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("PropTip")));
            sp.transform.localPosition = new Laya.Vector3(0, 0, 0);
            let script = sp.addComponent(ABox);
            script.propId = PlayerController.IDS++;
            script.propType = ABox.RandTransportType();
            parent.addChild(sp);
            return script;
        }
        createBox(parent) {
            let sp = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("PropTip")));
            sp.transform.localPosition = new Laya.Vector3(0, 0, 0);
            let script = sp.addComponent(ABox);
            script.propId = PlayerController.IDS++;
            script.propType = ABox.RandBoxType();
            script.count = this.initCount(script.propType);
            parent.addChild(sp);
            return script;
        }
        createVipCustomer(VipPaths) {
            let sp = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("PropTip")));
            sp.transform.localPosition = VipPaths[0].clone();
            let script = sp.addComponent(PropVipCustomer);
            script.propId = PlayerController.IDS++;
            script.propType = NBox.VIP_CUSTOMER;
            script.count = this.initCount(script.propType);
            script.VipPaths = VipPaths;
            SceneMgr.Int.levelNode.addChild(sp);
            return script;
        }
        initCount(propType) {
            let openZoneCount = LogicRoom.instance.getOpenZoneList().length;
            switch (propType) {
                case NBox.Diamond:
                    return 100 * openZoneCount;
                case NBox.Money:
                    return 500 * openZoneCount;
                case NBox.VIP_CUSTOMER:
                    return 500 * openZoneCount;
            }
        }
        getPropPosition() {
            let propPosList = LogicRoom.instance.propPosList;
            let min = 999999;
            let parent = null;
            for (var i = 0; i < propPosList.length; i++) {
                let zoneId = Number(propPosList[i].name);
                if (LogicRoom.instance.has(zoneId) && propPosList[i].numChildren == 0) {
                    let dis = Laya.Vector3.distance(propPosList[i].transform.position, this.playerNode.position);
                    if (dis < min) {
                        min = dis;
                        parent = propPosList[i];
                    }
                }
            }
            return parent;
        }
        loadPropTip() {
            this._isLoadPropTiping = true;
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("PropTip"), (node) => {
                if (node) {
                    this._isLoadPropTiped = true;
                }
            });
        }
        addMoney(bPos, ePos, count = 1, delay = 0) {
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("DollarRoot"), (node) => {
                if (node) {
                    let sp = Laya.Sprite3D.instantiate(node);
                    sp.transform.position = bPos.clone();
                    let script = sp.addComponent(PropEnergy);
                    script.propType = EPropNameById$1.diamonds;
                    script.propId = PlayerController.IDS++;
                    script.count = count;
                    script.toAdd(bPos, ePos);
                    this.energyDic.setValue(script.propId, script);
                    SceneMgr.Int.scene.addChild(sp);
                }
            });
        }
        checkEnergy() {
            let posIndex = MoveManager.instance.toPositionIndexE(this.playerNode.position);
            let ids = [];
            let bitObjDic = MoveManager.instance.getEnergyObjectDic(posIndex + this.playerNode.rounds[this.ri]);
            if (bitObjDic) {
                for (let key in bitObjDic.data) {
                    ids.push(Number(key));
                }
            }
            for (var i = 0; i < ids.length; i++) {
                let energy = this.energyDic.getValue(ids[i]);
                if (energy) {
                    this.energyDic.remove(ids[i]);
                    energy.toPlayer(this.playerNode.node.transform, i * 2, new Laya.Vector3(0, 1, 0));
                }
            }
            this.ri++;
            if (this.ri >= this.playerNode.rounds.length)
                this.ri = 0;
        }
        MoveCamerToLookPos(pos, lookTime = 60) {
            if (this._moveState == PlayerController.MOVE_TO_LOOKPOS)
                return;
            this._moveState = PlayerController.MOVE_TO_LOOKPOS;
            this._isDown = false;
            this._startMove = false;
            if (this.CharacterScript) {
                this.CharacterScript.move(v3_zeor);
            }
            this.bPos = this.playerNode.position.clone();
            this.ePos = pos.clone();
            this._time = 0;
            this._allTime = 30;
            this.lookTime = lookTime;
        }
        MoveCamerToLookPosComplete() {
            this._moveState = PlayerController.MOVE_STAND;
        }
        MoveCamerToLookRoom(pos, rotation) {
            if (this._moveState == PlayerController.MOVE_TO_LOOKROOM)
                return;
            this._moveState = PlayerController.MOVE_TO_LOOKROOM;
            this._isDown = false;
            this._startMove = false;
            if (this.CharacterScript) {
                this.CharacterScript.move(v3_zeor);
            }
            this.bPos = this.playerNode.position.clone();
            this.ePos = pos.clone();
            this._time = 0;
            this._allTime = 30;
        }
        moveCamerToPlayer(bPos) {
            this._moveState = PlayerController.MOVE_BACK_LOOKPOS;
            this.bPos = bPos.clone();
            this.ePos = this.playerNode.position.clone();
            this._time = 0;
            this._allTime = 30;
        }
        createBoxCharacter(pos, maxSlope = 60, stepHeight = 0.5, type = "player") {
            if (this.CharacterScript) {
                this.CharacterScript.node.destroy();
                this.CharacterScript = null;
            }
            var box = new Laya.Sprite3D();
            box.name = "BoxCharacterScript_" + type;
            box.transform.position = pos.clone();
            var character = box.addComponent(Laya.CharacterController);
            character.friction = 0;
            character.rollingFriction = 0;
            var sphereShape = new Laya.SphereColliderShape(0.3);
            sphereShape.localOffset = new Laya.Vector3(0, 0.15, 0);
            character.colliderShape = sphereShape;
            character.collisionGroup = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;
            character.canCollideWith = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;
            this.CharacterScript = box.addComponent(BoxCharacterScript);
            SceneMgr.Int.scene.addChild(box);
        }
        createPlayerNode() {
            var urls = [
                RescoureData.getPlayerUrlByName("PlayerCharacter"),
                RescoureData.FRIST_SCENE + "BagMax.lh",
            ];
            Laya.loader.create(urls, Laya.Handler.create(this, (node) => {
                let bagMax = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.FRIST_SCENE + "BagMax.lh"));
                this.bagMax = bagMax.addComponent(PropBagMax);
                SceneMgr.Int.scene.addChild(bagMax);
                SceneMgr.Int.playerData.setFlowBagMax(this.bagMax);
                var node = new Laya.Sprite3D();
                node.name = "Player";
                node.transform.position = this.node.transform.position.clone();
                this.bagMax.setFlowTransform(node.transform);
                this.playerNode = node.addComponent(PlayerNode);
                this.playerNode.playerId = PlayerController.IDS++;
                this.playerNode.level = LogicData.instance.level;
                SceneMgr.Int.scene.addChild(node);
                this.createGuessJiangtou();
            }));
        }
        createGuessJiangtou() {
            let jiangtou = new Laya.Sprite3D();
            jiangtou.transform.localPosition = new Laya.Vector3(0, 0, 0);
            this.jiangtouScript = jiangtou.addComponent(GuessJiangtouScript);
            this.jiangtouScript.setPlayerNode(this.playerNode);
            SceneMgr.Int.scene.addChild(jiangtou);
        }
        onDestroy() {
            Laya.timer.clearAll(this);
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_DOWN, this, this.onMouseDownHandler);
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_UP, this, this.onMouseUpHandler);
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_OUT, this, this.onMouseUpHandler);
            if (this.playerNode) {
                this.playerNode.node.destroy();
                this.playerNode = null;
            }
            if (this.CharacterScript) {
                this.CharacterScript.node.destroy();
                this.CharacterScript = null;
            }
            if (this.bagMax) {
                this.bagMax.node.destroy();
                this.bagMax = null;
            }
            if (this.jiangtouScript) {
                this.jiangtouScript.node.destroy();
                this.jiangtouScript = null;
            }
            for (var i = 0; i < this.energyDic.values.length; i++) {
                this.energyDic.values[i].node.destroy();
            }
            this.energyDic.clear();
        }
        get score() {
            return this._score;
        }
        set score(value) {
            this._score = value;
        }
        get moveRotate() {
            return MoveManager.instance.rotate;
        }
        get anim() {
            return this._anim;
        }
        get position() {
            this._out.toDefault();
            this.playerNode.position.cloneTo(this._out);
            return this._out;
        }
        get position2() {
            this._out1.toDefault();
            this.node.transform.position.cloneTo(this._out1);
            return this._out1;
        }
        get rotation() {
            this._out1.toDefault();
            this.node.transform.rotationEuler.cloneTo(this._out1);
            return this._out1;
        }
        get rightV3() {
            this._out.toDefault();
            this.node.transform.getRight(this._out);
            Laya.Vector3.normalize(this._out, this._out);
            this._out.x = numToZero(this._out.x);
            this._out.y = numToZero(this._out.y);
            this._out.z = numToZero(this._out.z);
            return this._out;
        }
        get down() {
            return this._isDown;
        }
        showTriggerVideo() {
            return false;
        }
    }
    PlayerController.IDS = 100;
    PlayerController.moveV = new Laya.Vector3(0, 0, 0.15);
    PlayerController.moveV2 = new Laya.Vector3(0, 0, 0.3);
    PlayerController.MASTER_SPEED = 0.10;
    PlayerController.MASTER_SPEED_SEA = 0.075;
    PlayerController.WAIT_SHOUYING_COUNT = 30;
    PlayerController.VISITOR_COUNT = 15;
    PlayerController.MOVE_NULL = 0;
    PlayerController.MOVE_NORMAL = 1;
    PlayerController.MOVE_STAND = 2;
    PlayerController.MOVE_TO_LOOKPOS = 3;
    PlayerController.MOVE_BACK_LOOKPOS = 4;
    PlayerController.MOVE_TO_LOOKROOM = 5;

    class LobbyDesk01 extends Aside {
        constructor() {
            super(...arguments);
            this.Upgrader = null;
            this.standPoss = [];
            this.Concierges = [];
            this.IndicatorClears = [];
            this.progressMats = [];
            this.waitePos = null;
            this.VipPoss = [];
            this.MoneyCollector = null;
            this.StackOfMoney = null;
            this.matrix4x4 = null;
            this.isLoadConcierge = false;
            this.time = 0;
            this.maxTime = 3 * 1000;
            this.standIndes = [0, 0, 0];
            this.waiteDic = new Dictionary();
            this.checks = [];
            this.maxs = [1, 1, 1, 2, 3];
            this.customerNames = ["Customer1", "Customer2", "Customer3", "Customer4", "Customer5", "CustomerFemale1", "CustomerFemale2", "CustomerFemale3", "CustomerFemale4"];
            this.isOpen = false;
            this.moneyNodes = [];
        }
        onAwake() {
            super.onAwake();
            this.Upgrader = this.findNodeByPath("Upgrader");
            this.standPoss.push(this.findNodeByPath("Position_1"));
            this.standPoss.push(this.findNodeByPath("Position_2"));
            this.standPoss.push(this.findNodeByPath("Position_3"));
            this.Concierges.push(this.findNodeByPath("Concierge_1"));
            this.Concierges.push(this.findNodeByPath("Concierge_2"));
            this.Concierges.push(this.findNodeByPath("Concierge_3"));
            this.IndicatorClears.push(this.findNodeByPath("Position_1/IndicatorClear"));
            this.IndicatorClears.push(this.findNodeByPath("Position_2/IndicatorClear"));
            this.IndicatorClears.push(this.findNodeByPath("Position_3/IndicatorClear"));
            for (var i = 0; i < this.IndicatorClears.length; i++) {
                let sp = this.IndicatorClears[i].getChildByName("Progress");
                this.progressMats.push(sp.meshRenderer.material);
                this.progressMats[i]._ProgressValue = 100;
                this.IndicatorClears[i].active = false;
            }
            this.waitePos = this.findNodeByPath("standPos");
            this.MoneyCollector = this.findNodeByPath("MoneyCollector");
            this.StackOfMoney = this.findNodeByPath("StackOfMoney");
            let VipPos = this.findNodeByPath("VipPos");
            for (var i = 0; i < VipPos.numChildren; i++) {
                let sp = VipPos.getChildAt(i);
                this.VipPoss.push(sp.transform.position.clone());
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("DollarRoot"), (node) => {
            });
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changeLevel();
            LogicRoom.instance.VipPaths = this.VipPoss;
            MoveManager.instance.addSideToPoint(this.MoneyCollector.transform.position, new Laya.Vector3(4, 0, 1.6), SideType.Check_Lobby, this.c_index);
            MoveManager.instance.addSideToPoint(this.StackOfMoney.transform.position, new Laya.Vector3(2, 0, 2), SideType.GET_LobbyMoney, this.c_index);
        }
        onLateUpdate() {
            this.initCustomer();
            if (!this.isLoadConcierge)
                this.loadConcierge();
        }
        onChangeSideShow() {
            this.checkUpgrade();
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.Upgrader.transform.position);
        }
        moveCameraForUpgrade() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.Upgrader.transform.position);
        }
        get GuessPos() {
            return this.MoneyCollector.transform.position;
        }
        checkUpgrade() {
            let upgradeSteps = this._sideObj.upgradeSteps;
            let sIndex = upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0) {
                this._max = this.getUpgradeMax();
                this.isCanBuy = true;
                this.createPrice(this.Upgrader, this.c_index, SideType.Upgrade_LobbyDesk, this.needCount, "hi", "ReceptionistIcon");
            }
        }
        changeLevel() {
            for (var i = 0; i < this.Concierges.length; i++) {
                this.Concierges[i].active = this._sideObj.level >= i + 2;
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.Upgrader.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeLobby();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        upgradeLobby() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            let sIndex = this._sideObj.upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0)
                this._sideObj.upgradeSteps[sIndex] = 0;
            LogicRoom.instance.updateOpenStep();
            this.changeLevel();
            if (this._sideObj.level > 1) {
                for (var i = 0; i < this.checks.length; i++) {
                    this.checks[i].isWaitePlayer = false;
                }
            }
            AudioMgr$1.instance.play_sound(13);
        }
        getUpgradeMax() {
            if (this._sideObj.level == 1) {
                return this.c_moneyLvs[0];
            }
            else if (this._sideObj.level == 2) {
                return this.c_moneyLvs[1];
            }
            else if (this._sideObj.level == 3) {
                return this.c_moneyLvs[2];
            }
        }
        loadConcierge() {
            if (RescoureData.isLoadPlayer == false)
                return;
            this.isLoadConcierge = true;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName("Concierge"), (node) => {
                if (node) {
                    for (var i = 0; i < this.Concierges.length; i++) {
                        let Concierge = this.Concierges[i].getChildByName("Concierge");
                        let character = Laya.Sprite3D.instantiate(node);
                        character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                        Concierge.addChild(character);
                    }
                }
            });
        }
        initCustomer() {
            this.time += Laya.timer.delta;
            if (this.time > this.maxTime && this.waiteDic.values.length < 5) {
                this.createCustomerNode();
                this.time = 0;
            }
            if (this.waiteDic.length > 0) {
                let customer = this.waiteDic.values[0];
                if (customer.isStand) {
                    this.setOneCustomerToCheck(customer);
                }
            }
        }
        setOneCustomerToCheck(customer) {
            let isMove = false;
            let max = this.maxs[this._sideObj.level];
            for (var i = 0; i < max; i++) {
                if (this.standIndes[i] == 0) {
                    this.standIndes[i] = 1;
                    customer.moveToCheck(i, this.standPoss[i].transform.position.clone());
                    this.waiteDic.remove(customer.playerId);
                    isMove = true;
                    break;
                }
            }
            if (isMove) {
                for (var i = 0; i < this.waiteDic.values.length; i++) {
                    this.waiteDic.values[i].moveToStand(this.getStandPosIndex(i));
                }
            }
        }
        createCustomerNode() {
            if (RescoureData.isLoadCustomer == false)
                return;
            let customer = new Laya.Sprite3D();
            customer.name = "customer";
            let script = customer.addComponent(CustomerNode);
            script.playerId = PlayerController.IDS++;
            script.prefabsNameUrl = this.randCustomerPrefabsNameUrl();
            script.standPos = this.getStandPos();
            script.startCheckCB = Laya.Handler.create(this, this.toCheckComplete);
            script.checkCompleteCB = Laya.Handler.create(this, this.onCheckComplete);
            script.updateProgressCB = Laya.Handler.create(this, this.onUpdateProgress, null, false);
            script.LobbyInPathIndex = this.c_inPathIndex;
            script.LobbyOutPathIndex = this.c_outPathIndex;
            this.node.addChild(customer);
            this.waiteDic.setValue(script.playerId, script);
            customer.transform.position = LogicRoom.instance.getPathNode(1).node.transform.position.clone();
        }
        randCustomerPrefabsNameUrl() {
            let name = "Customer1";
            name = this.customerNames[Math.floor(Math.random() * this.customerNames.length)];
            return RescoureData.getCustomerUrlByName(name);
        }
        toCheckComplete(standIndex, customer) {
            this.IndicatorClears[standIndex].active = true;
            this.progressMats[standIndex]._ProgressValue = 100;
            this.checks.push(customer);
            customer.isWaitePlayer = this._sideObj.level <= 1;
        }
        onUpdateProgress(standIndes, value) {
            this.progressMats[standIndes]._ProgressValue = value;
        }
        onCheckComplete(standIndex, cPos, playerId, moneyCount = 5) {
            this.standIndes[standIndex] = 0;
            this.IndicatorClears[standIndex].active = false;
            for (var i = 0; i < this.checks.length; i++) {
                if (this.checks[i].playerId == playerId) {
                    this.checks.splice(i, 1);
                    break;
                }
            }
            if (cPos) {
                this.isOpen = true;
                this.addGolds(cPos, moneyCount);
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        getStandPos() {
            let pos = this.waitePos.transform.position.clone();
            pos.z += this.waiteDic.length * 1.5;
            return pos;
        }
        getStandPosIndex(index) {
            let pos = this.waitePos.transform.position.clone();
            pos.z += index * 1.5;
            return pos;
        }
        getAllMoney() {
            let d = 0;
            for (var i = this.moneyNodes.length - 1; i >= 0; i--) {
                this.moneyNodes[i].toPlayer(SceneMgr.Int.playerController.playerNode.node.transform, d * 1, new Laya.Vector3(0, 1, 0));
                d++;
            }
            this.moneyNodes = [];
        }
        addGolds(cPos, moneyCount) {
            cPos.y += 1.5;
            Laya.Vector3.transformCoordinate(cPos, this.matrix4x4, cPos);
            let oneMoney = Math.floor(moneyCount / 5);
            for (var i = 0; i < 5; i++) {
                let pos = this.StackOfMoney.transform.localPosition.clone();
                pos.z += Math.floor((this.moneyNodes.length % 15) % 3) * 0.65 - 0.65;
                pos.y += Math.floor(this.moneyNodes.length / 15) * 0.1 + 0.05;
                pos.x += Math.floor((this.moneyNodes.length % 15) / 3) * 0.4 - 0.75;
                let mNode = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("DollarRoot")));
                mNode.transform.localPosition = cPos.clone();
                mNode.transform.localRotationEuler = new Laya.Vector3(0, 90, 0);
                let script = mNode.addComponent(PropEnergy);
                script.propType = EPropNameById$1.diamonds;
                script.count = oneMoney;
                script.toAdd2(cPos, pos);
                this.moneyNodes.push(script);
                this.node.addChild(mNode);
            }
        }
    }

    var AnimState$4;
    (function (AnimState) {
        AnimState["Idle"] = "Idle";
        AnimState["Run"] = "MainCharacterMaleWalking";
        AnimState["WavingIdle"] = "WavingIdle";
    })(AnimState$4 || (AnimState$4 = {}));
    class ParkingManAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$4.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$4.Idle);
            this.animator.addScriptPlayState(0, AnimState$4.Run);
            this.animator.addScriptPlayState(0, AnimState$4.WavingIdle);
        }
        playIdle() {
            this.play(AnimState$4.Idle);
        }
        playRun() {
            this.play(AnimState$4.Run);
        }
        playWavingIdle() {
            this.play(AnimState$4.WavingIdle);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class ParkingManNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.transform = null;
            this.movePath = null;
            this.isWork = false;
            this.movePaths = null;
            this.manIntoPark = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == ParkingManNode.MOVE_WAITE) {
                this.t += Laya.timer.delta;
                if (this.isWork && this.t > this.all) {
                    this.moveToPark();
                }
            }
        }
        toWaite() {
            this.state = ParkingManNode.MOVE_WAITE;
            this.t = 0;
            this.all = 10 * 1000;
            this.playIdle();
        }
        moveToPark() {
            this.state = ParkingManNode.Move_TO_PARK;
            let path = [this.transform.position.clone()];
            path.push(this.movePaths[1].transform.position);
            path.push(this.movePaths[2].transform.position);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onMoveToParkComplete));
            this.playRun();
        }
        onMoveToParkComplete() {
            this.state = ParkingManNode.MOVE_WORKING;
            this.transform.rotation = this.movePaths[2].transform.rotation.clone();
            this.manIntoPark.run();
            this.playWavingIdle();
        }
        backToStand() {
            this.state = ParkingManNode.Back_to_Stand;
            let path = [this.transform.position.clone()];
            path.push(this.movePaths[1].transform.position);
            path.push(this.movePaths[0].transform.position);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.onBackToStandComplete));
            this.playRun();
        }
        onBackToStandComplete() {
            this.transform.rotation = this.movePaths[0].transform.rotation.clone();
            this.toWaite();
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName("ParkingMan"), (node) => {
                if (node) {
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(ParkingManAnim);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
        playWavingIdle() {
            if (this._anim) {
                this._anim.playWavingIdle();
            }
        }
    }
    ParkingManNode.MOVE_NULL = 0;
    ParkingManNode.MOVE_WAITE = 1;
    ParkingManNode.Move_TO_PARK = 2;
    ParkingManNode.MOVE_WORKING = 3;
    ParkingManNode.Back_to_Stand = 4;

    class CarNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.transform = null;
            this.isLoaded = false;
            this._state = 0;
            this.t = 0;
            this.all = 0;
            this.out = new Laya.Vector3(0, 0, 0);
            this.isStand = false;
            this.callback = null;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.loadNode();
        }
        onLateUpdate() {
            if (this.isLoaded == false)
                return;
            if (this._state == CarNode.MOVE_TO_STAND) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.transform.position = this.out;
                }
                else {
                    this.toStandComplete();
                }
                this.t++;
            }
            else if (this._state == CarNode.MOVE_TO_TARGET) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.bPos, this.ePos, this.t / this.all, this.out);
                    this.transform.position = this.out;
                }
                else {
                    this.toTargetComplete();
                }
                this.t++;
            }
        }
        moveToStand(toPos) {
            this._state = CarNode.MOVE_TO_STAND;
            this.isStand = false;
            this.bPos = this.node.transform.position.clone();
            this.ePos = toPos;
            this.t = 0;
            this.all = Math.max(1, Math.floor(Laya.Vector3.distance(this.bPos, this.ePos) * ((1 - (this.speed - 100) / 100) * 20)));
            this.node.transform.rotation = MoveManager.instance.lookAt(this.bPos, this.ePos, new Laya.Vector3(0, 1, 0));
        }
        moveToTargetPoint(toPos, callback) {
            this._state = CarNode.MOVE_TO_TARGET;
            this.isStand = false;
            this.callback = callback;
            this.bPos = this.node.transform.position.clone();
            this.ePos = toPos;
            this.t = 0;
            this.all = Math.max(1, Math.floor(Laya.Vector3.distance(this.bPos, this.ePos) * ((1 - (this.speed - 100) / 100) * 20)));
            this.node.transform.rotation = MoveManager.instance.lookAt(this.bPos, this.ePos, new Laya.Vector3(0, 1, 0));
        }
        toStandComplete() {
            this._state = CarNode.MOVE_STAND_WAITE;
            this.isStand = true;
            this.t = 0;
        }
        toTargetComplete() {
            this.callback.run();
            this.node.destroy();
        }
        get speed() {
            return 150;
        }
        loadNode() {
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("Vehicle_CarBlue"), (node) => {
                if (node) {
                    let character = Laya.Sprite3D.instantiate(node);
                    character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this.node.addChild(character);
                    this.isLoaded = true;
                }
            });
        }
    }
    CarNode.MOVE_NULL = 0;
    CarNode.MOVE_TO_STAND = 1;
    CarNode.MOVE_STAND_WAITE = 2;
    CarNode.MOVE_TO_TARGET = 3;
    class BarrierNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.dir = 0;
            this.zz = 0;
            this.CallBack = null;
        }
        onLateUpdate() {
            if (this.dir == 1) {
                this.zz -= 5;
                this.zz = Math.max(this.zz, -80);
                this.node.transform.localRotationEuler = new Laya.Vector3(0, 0, this.zz);
                if (this.zz <= -80) {
                    this.dir = 0;
                    this.CallBack.run();
                }
            }
            else if (this.dir == 2) {
                this.zz += 5;
                this.zz = Math.min(this.zz, 0);
                this.node.transform.localRotationEuler = new Laya.Vector3(0, 0, this.zz);
                if (this.zz >= 0) {
                    this.dir = 0;
                    this.CallBack.run();
                }
            }
        }
        open(callback) {
            this.dir = 1;
            this.zz = this.node.transform.localRotationEuler.z;
            this.CallBack = callback;
        }
        close(callback) {
            this.dir = 2;
            this.zz = this.node.transform.localRotationEuler.z;
            this.CallBack = callback;
        }
    }
    class Parking extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.UpgradeBorder = null;
            this.LockedRoot = null;
            this.parkingPaths = [];
            this.StackOfMoney = null;
            this.CarPointss = [];
            this.SimpleInteractiveZone = null;
            this.Barrier = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this.waiteCars = [];
            this.isPlayerIn = false;
            this.isManIn = false;
            this._isCanOpen = false;
            this.moneyType = 1;
            this.isCarInfoKu = false;
            this.SpawnTime = 0;
            this.moneyNodes = [];
            this.workerNode = null;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.StackOfMoney = this.findNodeByPath("Opened/StackOfMoney");
            this.UpgradeBorder = this.findNodeByPath("UpgradeBorder");
            this.SimpleInteractiveZone = this.findNodeByPath("Opened/SimpleInteractiveZone");
            this.Barrier = this.findNodeByPath("Opened/Interior/shoufeilan/Barrier").addComponent(BarrierNode);
            let parkingPath = this.findNodeByPath("parkingPath");
            for (var i = 0; i < parkingPath.numChildren; i++) {
                this.parkingPaths.push(parkingPath.getChildAt(i));
            }
            let CarPoints = this.findNodeByPath("Opened/CarPoints");
            for (var i = 0; i < CarPoints.numChildren; i++) {
                this.CarPointss.unshift(CarPoints.getChildAt(i));
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
            MoveManager.instance.addSideToPoint(this.StackOfMoney.transform.position, new Laya.Vector3(2, 0, 2), SideType.GET_PARKING, this.c_index);
            MoveManager.instance.addSideToPoint(this.SimpleInteractiveZone.transform.position, new Laya.Vector3(2, 0, 2), SideType.PARKING_CAR, this.c_index);
        }
        onLateUpdate() {
            this.initCards();
            this.checkCarMove();
        }
        onChangeSideShow() {
            if (LogicRoom.instance.haside(this.c_index)) {
                this.Opened.active = true;
                this.LockedRoot.active = false;
                this.isOpen = true;
            }
            else {
                this.Opened.active = false;
                this.LockedRoot.active = true;
                if (this.c_openStep == this.openStep) {
                    this._max = this.c_moneyOpen;
                    this.moneyType = 1;
                    this._isCanOpen = true;
                    this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Parking, this.needCount, "efg", "Parking");
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        get isCanOpen() {
            return this._isCanOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            this.initCleaner();
            if (this._sideObj.level <= 1) {
                this.isCanBuy = true;
                this._max = this.c_moneyRen;
                this.moneyType = 2;
                this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "jk", "Parker");
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradeBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openParking();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openParker();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
            this.changePlayer();
        }
        openParking() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            LogicRoom.instance.openSide(this.c_index, true);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        openParker() {
            this.destoryPrice();
            this._sideObj.level = 2;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.changePlayer();
            AudioMgr$1.instance.play_sound(14);
        }
        startMoveCarByPlayer() {
            this.isPlayerIn = true;
        }
        stopMoveCarByPlayer() {
            this.isPlayerIn = false;
        }
        startMoveCarByParkMan() {
            this.isManIn = true;
        }
        stopMoveCarByParkMan() {
            this.isManIn = false;
            if (this.workerNode)
                this.workerNode.backToStand();
        }
        checkCarMove() {
            if (this.isCarInfoKu)
                return;
            if (this.isPlayerIn == false && this.isManIn == false)
                return;
            if (this.waiteCars.length <= 0)
                return;
            if (this.waiteCars[0].isStand) {
                this.isCarInfoKu = true;
                this.openBarrier();
            }
        }
        openBarrier() {
            this.Barrier.open(Laya.Handler.create(this, this.onFangFristCar));
        }
        onFangFristCar() {
            this.addGolds(this.waiteCars[0].node.transform.position.clone());
            this.waiteCars[0].moveToTargetPoint(this.CarPointss[4].transform.position.clone(), Laya.Handler.create(this, this.onCarToTargetComplete));
        }
        onCarToTargetComplete() {
            this.waiteCars.splice(0, 1);
            this.Barrier.close(Laya.Handler.create(this, this.onBarrierCloseComplete));
            if (this.isManIn)
                this.stopMoveCarByParkMan();
        }
        onBarrierCloseComplete() {
            for (var i = 0; i < this.waiteCars.length; i++) {
                this.waiteCars[i].moveToStand(this.getCarStandPos(i));
            }
            this.isCarInfoKu = false;
        }
        initCards() {
            if (this.isOpen == false)
                return;
            if (RescoureData.isLoadPrefab == false)
                return;
            if (this.waiteCars.length >= 3)
                return;
            this.SpawnTime += Laya.timer.delta;
            if (this.SpawnTime >= 10 * 1000) {
                this.SpawnTime = 0;
                let car = new Laya.Sprite3D();
                car.name = "Car";
                this.node.addChild(car);
                car.transform.position = this.CarPointss[0].transform.position.clone();
                let script = car.addComponent(CarNode);
                script.moveToStand(this.getCarStandPos(this.waiteCars.length));
                this.waiteCars.push(script);
            }
        }
        getCarStandPos(index) {
            if (index == 0) {
                return this.CarPointss[3].transform.position.clone();
            }
            else if (index == 1) {
                return this.CarPointss[2].transform.position.clone();
            }
            else if (index == 2) {
                return this.CarPointss[1].transform.position.clone();
            }
        }
        getAllMoney() {
            let d = 0;
            for (var i = this.moneyNodes.length - 1; i >= 0; i--) {
                this.moneyNodes[i].toPlayer(SceneMgr.Int.playerController.playerNode.node.transform, d * 1, new Laya.Vector3(0, 1, 0));
                d++;
            }
            this.moneyNodes = [];
        }
        addGolds(cPos) {
            cPos.y += 1.5;
            Laya.Vector3.transformCoordinate(cPos, this.matrix4x4, cPos);
            let oneCount = Math.floor(this.c_money / 5);
            for (var i = 0; i < 5; i++) {
                let pos = this.StackOfMoney.transform.localPosition.clone();
                pos.z += Math.floor((this.moneyNodes.length % 15) % 3) * 0.65 - 0.65;
                pos.y += Math.floor(this.moneyNodes.length / 15) * 0.1 + 0.05;
                pos.x += Math.floor((this.moneyNodes.length % 15) / 3) * 0.4 - 0.75;
                let mNode = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("DollarRoot")));
                mNode.transform.localPosition = cPos.clone();
                mNode.transform.localRotationEuler = new Laya.Vector3(0, 90, 0);
                let script = mNode.addComponent(PropEnergy);
                script.propType = EPropNameById$1.diamonds;
                script.count = oneCount;
                script.toAdd2(cPos, pos);
                this.moneyNodes.push(script);
                this.node.addChild(mNode);
            }
        }
        initCleaner() {
            if (this.workerNode == null) {
                let sp = new Laya.Sprite3D();
                sp.name = "cleaner";
                sp.transform.localPosition = this.parkingPaths[0].transform.localPosition.clone();
                sp.transform.localRotationEuler = this.parkingPaths[0].transform.localRotationEuler.clone();
                this.workerNode = sp.addComponent(ParkingManNode);
                this.workerNode.isWork = this._sideObj.level > 1;
                this.workerNode.movePaths = this.parkingPaths;
                this.workerNode.manIntoPark = Laya.Handler.create(this, this.startMoveCarByParkMan, null, false);
                this.node.addChild(sp);
            }
            else {
                this.workerNode.isWork = this._sideObj.level > 1;
            }
        }
    }

    class PlayerUpgrade extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.LockedRoot = null;
            this.UpgradePos = null;
            this.isOpen = false;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.UpgradePos = this.findNodeByPath("Opened/UpgradePos");
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
        }
        onChangeSideShow() {
            if (LogicRoom.instance.haside(this.c_index)) {
                this.Opened.active = true;
                this.LockedRoot.active = false;
                if (this.isOpen == false) {
                    this.isOpen = true;
                    this.addSide();
                }
            }
            else {
                this.Opened.active = false;
                this.LockedRoot.active = true;
                if (this.c_openStep == this.openStep) {
                    this.openStorage();
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.UpgradePos.transform.position);
        }
        addSide() {
            MoveManager.instance.addSideToPoint(this.UpgradePos.transform.position, new Laya.Vector3(1.5, 0, 1.5), SideType.UPGRADE_PLAYER, this.c_index);
        }
        get GuessPos() {
            return this.UpgradePos.transform.position;
        }
        openStorage() {
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this.addSide();
            this._sideObj.openStep = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
    }

    var AnimState$3;
    (function (AnimState) {
        AnimState["Idle"] = "Idle";
        AnimState["Run"] = "MainCharacterMaleWalking";
        AnimState["CarryingIdle"] = "CarryingIdle";
        AnimState["WalkingWithBox"] = "WalkingWithBox";
    })(AnimState$3 || (AnimState$3 = {}));
    class WaiterAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$3.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$3.Idle);
            this.animator.addScriptPlayState(0, AnimState$3.Run);
            this.animator.addScriptPlayState(0, AnimState$3.CarryingIdle);
            this.animator.addScriptPlayState(0, AnimState$3.WalkingWithBox);
        }
        playIdle() {
            this.play(AnimState$3.Idle);
        }
        playRun() {
            this.play(AnimState$3.Run);
        }
        playIdleBox() {
            this.play(AnimState$3.CarryingIdle);
        }
        playRunBox() {
            this.play(AnimState$3.WalkingWithBox);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class WaiterNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.isWork = false;
            this.loadPrefabsName = "";
            this.speed = 0;
            this.MaxCount = 0;
            this.getPos1 = null;
            this.getPos2 = null;
            this.toRestaurant = null;
            this.transform = null;
            this.movePath = null;
            this.fristPos = null;
            this.propSp = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.props = [];
            this.needFoodIds = [];
            this.toTableId = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.propSp = new Laya.Sprite3D();
            this.propSp.transform.localPosition = new Laya.Vector3(0, 1, 0.5);
            this.node.addChild(this.propSp);
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.fristPos = this.transform.position.clone();
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == WaiterNode.MOVE_WAITE) {
                if (this.isWork == false)
                    return;
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.t = 0;
                    this.checkNeedFood();
                }
            }
        }
        toWaite() {
            this.state = WaiterNode.MOVE_WAITE;
            this.t = 0;
            this.all = 5000;
            this.playIdle();
        }
        setNeedFoods(list) {
            this.needFoodIds = list;
        }
        checkNeedFood() {
            this.needFoodIds = this.toRestaurant.CheckFoodForWaiter();
            if (this.needFoodIds.length > 0) {
                this.toGetFoods();
            }
        }
        toGetFoods() {
            this.needFoodIds.sort((a, b) => { return a < b ? -1 : 1; });
            if (this.needFoodIds[0] == NFood.Rou) {
                this.moveToGetRouPoint();
            }
            else {
                this.mvoeToGetShucaiPoint();
            }
        }
        moveToGetRouPoint() {
            this.state = WaiterNode.MOVE_GET_FOODS;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.getPos1);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.moveToGetRouPointComplete));
            this.playRun();
        }
        moveToGetRouPointComplete() {
            this.state = WaiterNode.MOVE_WAITE_FOODS;
            this.playIdle();
            this.getOneROU();
        }
        getOneROU() {
            let ii = this.needFoodIds.indexOf(NFood.Rou);
            if (ii >= 0 && this.props.length < this.MaxCount) {
                this.needFoodIds.splice(ii, 1);
                this.addProp(NFood.Rou);
                Laya.timer.once(1000, this, this.getOneROU);
            }
            else {
                this.getAllRouComplete();
            }
        }
        getAllRouComplete() {
            if (this.props.length < this.MaxCount) {
                if (this.needFoodIds.length > 0) {
                    this.mvoeToGetShucaiPoint();
                }
                else {
                    this.findOneTable();
                }
            }
            else {
                this.findOneTable();
            }
        }
        mvoeToGetShucaiPoint() {
            this.state = WaiterNode.MOVE_GET_FOODS;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.getPos2);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.mvoeToGetShucaiPointComplete));
            this.playRun();
        }
        mvoeToGetShucaiPointComplete() {
            this.state = WaiterNode.MOVE_WAITE_FOODS;
            this.playIdle();
            this.getOneShucai();
        }
        getOneShucai() {
            let ii = this.needFoodIds.indexOf(NFood.Shucai);
            if (ii >= 0 && this.props.length < this.MaxCount) {
                this.needFoodIds.splice(ii, 1);
                this.addProp(NFood.Shucai);
                Laya.timer.once(1000, this, this.getOneShucai);
            }
            else {
                this.getAllShucaiComplete();
            }
        }
        getAllShucaiComplete() {
            this.findOneTable();
        }
        findOneTable() {
            this.state = WaiterNode.MOVE_FIND_TABLE;
            if (this.props.length > 0) {
                let tableId = this.toRestaurant.getTableIdByNeefFood(this.props[0].type);
                if (tableId > 0) {
                    this.toTableId = tableId;
                    this.mvoeToTable();
                }
                else {
                    this.backToFristPos();
                }
            }
            else {
                this.backToFristPos();
            }
        }
        mvoeToTable() {
            this.state = WaiterNode.MOVE_TO_TABLE;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.toRestaurant.getWaiterPutFoodPos(this.toTableId));
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.mvoeToTableComplete));
            this.playRun();
        }
        mvoeToTableComplete() {
            this.state = WaiterNode.MOVE_PUT_FOOD;
            this.playIdle();
            this.putOneFoodToTable();
        }
        putOneFoodToTable() {
            let isPutFood = false;
            let foodIds = this.toRestaurant.getNeedFoodIds(this.toTableId);
            for (var i = 0; i < foodIds.length; i++) {
                let prop = this.getAndDelOneProp(foodIds[i]);
                if (prop) {
                    prop.node.destroy();
                    this.sortPorp();
                    this.toRestaurant.addFoodToTable(this.toTableId, foodIds[i]);
                    isPutFood = true;
                    break;
                }
            }
            if (isPutFood) {
                Laya.timer.once(500, this, this.putOneFoodToTable);
            }
            else {
                this.findOneTable();
            }
        }
        backToFristPos() {
            this.state = WaiterNode.BACK_FRIST_POS;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.fristPos);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.backToFristPosComplete));
            this.playRun();
        }
        backToFristPosComplete() {
            this.toWaite();
        }
        addProp(type) {
            let food = new Laya.Sprite3D();
            let script = food.addComponent(PropFood);
            script.type = type;
            this.props.push(script);
            this.propSp.addChild(food);
            this.sortPorp();
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
            this.playIdle();
        }
        getAndDelOneProp(type) {
            let prop = null;
            for (var i = this.props.length - 1; i >= 0; i--) {
                if (this.props[i].type == type) {
                    prop = this.props[i];
                    this.props.splice(i, 1);
                    this.sortPorp();
                    break;
                }
            }
            return prop;
        }
        get isHas() {
            return this.props.length > 0;
        }
        changeChar() {
            this.isLoading = true;
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.character) {
                        this.character.destroy();
                        this.character = null;
                    }
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(WaiterAnim);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playIdleBox();
                }
                else {
                    this._anim.playIdle();
                }
            }
        }
        playRun() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playRunBox();
                }
                else {
                    this._anim.playRun();
                }
            }
        }
    }
    WaiterNode.MOVE_NULL = 0;
    WaiterNode.MOVE_WAITE = 1;
    WaiterNode.MOVE_GET_FOODS = 2;
    WaiterNode.MOVE_WAITE_FOODS = 3;
    WaiterNode.MOVE_FIND_TABLE = 4;
    WaiterNode.BACK_FRIST_POS = 5;
    WaiterNode.MOVE_TO_TABLE = 6;
    WaiterNode.MOVE_PUT_FOOD = 7;

    class TableScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.index = 0;
            this.tableId = 0;
            this.rouMoney = 0;
            this.shucaiMoney = 0;
            this.allMoney = 0;
            this.CutomerPos = null;
            this.PutFood = null;
            this.WaiterPutFood = null;
            this.FoodPos = null;
            this.foodTips = [];
            this.foodIcons = [];
            this.customer = null;
            this.foodIds = [];
            this.props = [];
            this.isWork = false;
        }
        onAwake() {
            this.CutomerPos = this.findNodeByPath("CutomerPos");
            this.PutFood = this.findNodeByPath("PutFood");
            this.WaiterPutFood = this.findNodeByPath("WaiterPutFood");
            this.FoodPos = this.findNodeByPath("FoodPos");
            let Foods = this.findNodeByPath("Foods");
            for (var i = 0; i < Foods.numChildren; i++) {
                let sp = Foods.getChildAt(i);
                this.foodTips.push(sp);
                this.foodIcons.push(sp.getChildByName("Icon"));
                sp.active = false;
            }
        }
        onStart() {
            MoveManager.instance.addSideToPoint(this.PutFood.transform.position, new Laya.Vector3(3, 0, 3), SideType.PUT_FOOD_TABLE, this.index * 10 + this.tableId);
        }
        onLateUpdate() {
            if (this.isWork) {
                if (this.props.length > 0) {
                    this.props[0].eatTime += Laya.timer.delta;
                    if (this.props[0].eatTime > 5 * 1000) {
                        this.props[0].node.destroy();
                        this.props.splice(0, 1);
                        this.sortPorp();
                    }
                }
                if (this.foodIds.length <= 0 && this.props.length <= 0) {
                    this.isWork = false;
                    this.onEatComplete();
                }
            }
        }
        get isNull() {
            return this.customer == null;
        }
        initNeedFood() {
            this.allMoney = 0;
            this.foodIds = [];
            this.foodIds.push(this.randFoodId());
            this.foodIds.push(this.randFoodId());
            for (var i = 0; i < this.foodIds.length; i++) {
                this.allMoney += (this.foodIds[i] == NFood.Rou ? this.rouMoney : this.shucaiMoney);
            }
            this.updateIcon();
            this.isWork = true;
        }
        addCustomer(customer) {
            this.customer = customer;
        }
        removeCustomer() {
            this.customer = null;
        }
        getCustomerPos() {
            return this.CutomerPos;
        }
        getWaiterPutFoodPos() {
            return this.WaiterPutFood.transform.position;
        }
        addFood(foodId) {
            let food = new Laya.Sprite3D();
            let script = food.addComponent(PropFood);
            script.type = foodId;
            this.props.push(script);
            this.FoodPos.addChild(food);
            this.sortPorp();
            let fi = this.foodIds.indexOf(foodId);
            if (fi >= 0) {
                this.foodIds.splice(fi, 1);
            }
            this.updateIcon();
        }
        getNeedFoodIds() {
            return this.foodIds;
        }
        isNeedFood(foodId) {
            return this.foodIds.indexOf(foodId) >= 0;
        }
        onEatComplete() {
            this.customer.eatComplete(this.allMoney);
        }
        updateIcon() {
            let b = this.foodIds.length == 2 ? 0.45 : 0;
            for (var i = 0; i < this.foodTips.length; i++) {
                if (i < this.foodIds.length) {
                    this.foodTips[i].active = true;
                    this.foodTips[i].transform.localPosition = new Laya.Vector3(b, 2.9, 0);
                    b -= 0.9;
                    let mat = this.foodIcons[i].meshRenderer.material;
                    mat.albedoTexture = Laya.loader.getRes(RescoureData.getNums(this.getIcon(this.foodIds[i])));
                }
                else {
                    this.foodTips[i].active = false;
                }
            }
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
        }
        randFoodId() {
            if (Math.random() * 100 < 50) {
                return NFood.Rou;
            }
            else {
                return NFood.Shucai;
            }
        }
        getIcon(foodId) {
            return foodId == NFood.Rou ? "rou" : "shucai";
        }
    }
    class Restaurant extends Aside {
        constructor() {
            super(...arguments);
            this.Base = null;
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.GetPoint1 = null;
            this.GetPoint2 = null;
            this.UpgradeBorder = null;
            this.workerPos = null;
            this.waitePoints = [];
            this.matrix4x4 = null;
            this.isOpen = false;
            this.workerNode = null;
            this.tableDic = new Dictionary();
            this.moneyType = 1;
            this.customerCount = 0;
            this.waiteCustomers = [];
        }
        onAwake() {
            super.onAwake();
            this.Base = this.findNodeByPath("Base");
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.GetPoint1 = this.findNodeByPath("Opened/GetRouPos");
            this.GetPoint2 = this.findNodeByPath("Opened/GetShucaiPos");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.UpgradeBorder = this.findNodeByPath("UpgradeBorder");
            this.workerPos = this.findNodeByPath("WaiterPos");
            let waitePoint = this.findNodeByPath("waitePoint");
            for (var i = 0; i < waitePoint.numChildren; i++) {
                this.waitePoints.push(waitePoint.getChildAt(i));
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
            let Tables = this.findNodeByPath("Opened/Tables");
            for (var i = 0; i < Tables.numChildren; i++) {
                let table = Tables.getChildAt(i);
                let script = table.addComponent(TableScript);
                script.tableId = i + 1;
                script.index = this.c_index;
                script.rouMoney = this.c_rouMoney;
                script.shucaiMoney = this.c_shuCaiMoney;
                this.tableDic.setValue(script.tableId, script);
            }
            MoveManager.instance.addSideToPoint(this.GetPoint1.transform.position, new Laya.Vector3(1, 0, 1), SideType.GET_ROU, this.c_index);
            MoveManager.instance.addSideToPoint(this.GetPoint2.transform.position, new Laya.Vector3(1, 0, 1), SideType.GET_ShuCai, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.Base.active = true;
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    this.isOpen = true;
                }
                else {
                    this.Base.active = true;
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep) {
                        this._max = this.c_moneyOpen;
                        this.moneyType = 1;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Storage, this.needCount, "mn", "RestarauntIcon");
                    }
                }
            }
            else {
                this.Base.active = false;
                this.Opened.active = false;
                this.LockedRoot.active = false;
            }
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getPlayerName();
            this.initWaiter(prefabsName);
            if (this._sideObj.level < 3) {
                this.isCanBuy = true;
                this._max = this.getUpgradeMaxGold();
                this.moneyType = 2;
                if (this._sideObj.level < 1) {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "897", "WorkerIcon");
                }
                else {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "hi", "WorkerSpeedIcon");
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradeBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openRestaurant();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeWroker();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openRestaurant() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.level = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        upgradeWroker() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.changePlayer();
            this.changeWaiter();
            AudioMgr$1.instance.play_sound(13);
        }
        initWaiter(loadPrefabsName) {
            if (this.workerNode)
                return;
            let sp = new Laya.Sprite3D();
            sp.name = "WaiterNode";
            sp.transform.localPosition = this.workerPos.transform.localPosition.clone();
            sp.transform.localRotationEuler = this.workerPos.transform.localRotationEuler.clone();
            this.workerNode = sp.addComponent(WaiterNode);
            this.workerNode.isWork = this._sideObj.level > 0;
            this.workerNode.loadPrefabsName = loadPrefabsName;
            this.workerNode.speed = this.getPlayerSpeed();
            this.workerNode.MaxCount = this.getZhiCount();
            this.workerNode.getPos1 = this.GetPoint1.transform.position.clone();
            this.workerNode.getPos2 = this.GetPoint2.transform.position.clone();
            this.workerNode.toRestaurant = this;
            this.node.addChild(sp);
        }
        changeWaiter() {
            if (this.workerNode) {
                this.workerNode.isWork = this._sideObj.level > 0;
                this.workerNode.loadPrefabsName = this.getPlayerName();
                this.workerNode.speed = this.getPlayerSpeed();
                this.workerNode.MaxCount = this.getZhiCount();
                this.workerNode.changeChar();
            }
        }
        CheckFoodForWaiter() {
            let list = [];
            for (var i = 0; i < this.tableDic.values.length; i++) {
                let table = this.tableDic.values[i];
                let foodIds = table.getNeedFoodIds();
                if (foodIds.length > 0)
                    list = list.concat(table.getNeedFoodIds());
            }
            return list;
        }
        get isReady() {
            return this.isOpen && this.customerCount < 9;
        }
        addCustomerCount() {
            this.customerCount += 1;
        }
        removeCustomer(tableId) {
            this.customerCount -= 1;
            let TableScript = this.tableDic.getValue(tableId);
            TableScript.removeCustomer();
        }
        addWaiteCustomer(customer) {
            this.waiteCustomers.push(customer);
            this.sortWaiteCustomerPos();
        }
        removeWaiteCustomer(customer) {
            for (var i = 0; i < this.waiteCustomers.length; i++) {
                if (this.waiteCustomers[i].playerId == customer.playerId) {
                    this.waiteCustomers.splice(i, 1);
                    break;
                }
            }
            this.sortWaiteCustomerPos();
        }
        addCustomerToTable(tableId, customer) {
            let TableScript = this.tableDic.getValue(tableId);
            TableScript.addCustomer(customer);
        }
        addCustomerFood(tableId) {
            let TableScript = this.tableDic.getValue(tableId);
            TableScript.initNeedFood();
        }
        addFoodToTable(tableId, foodId) {
            let TableScript = this.tableDic.getValue(tableId);
            TableScript.addFood(foodId);
        }
        getTablePlayerPos(tableId) {
            let TableScript = this.tableDic.getValue(tableId);
            return TableScript.getCustomerPos();
        }
        getWaiterPutFoodPos(tableId) {
            let TableScript = this.tableDic.getValue(tableId);
            return TableScript.getWaiterPutFoodPos();
        }
        getNeedFoodIds(tableId) {
            let TableScript = this.tableDic.getValue(tableId);
            return TableScript.getNeedFoodIds();
        }
        getNullTable() {
            for (var i = 0; i < this.tableDic.values.length; i++) {
                if (this.tableDic.values[i].isNull) {
                    return this.tableDic.values[i].tableId;
                }
            }
            return -1;
        }
        getTableIdByNeefFood(foodId) {
            for (var i = 0; i < this.tableDic.values.length; i++) {
                if (this.tableDic.values[i].isNeedFood(foodId)) {
                    return this.tableDic.values[i].tableId;
                }
            }
            return -1;
        }
        getFristWaitePoint() {
            return this.waitePoints[0].transform.position;
        }
        sortWaiteCustomerPos() {
            for (var i = 0; i < this.waiteCustomers.length; i++) {
                this.waiteCustomers[i].moveToRestaurantWaitePos(this.waitePoints[i].transform.position, i == 0);
            }
        }
        getUpgradeMaxGold() {
            switch (this._sideObj.level) {
                case 0:
                    return this.c_moneyLvs[0];
                case 1:
                    return this.c_moneyLvs[1];
                case 2:
                    return this.c_moneyLvs[2];
            }
        }
        getPlayerName() {
            if (this._sideObj.level == 0) {
                return "CharacterWaiter_1";
            }
            else if (this._sideObj.level == 1) {
                return "CharacterWaiter_1";
            }
            else if (this._sideObj.level == 2) {
                return "CharacterWaiter_2";
            }
            else if (this._sideObj.level == 3) {
                return "CharacterWaiter_3";
            }
        }
        getPlayerSpeed() {
            if (this._sideObj.level == 0) {
                return 100;
            }
            else if (this._sideObj.level == 1) {
                return 100;
            }
            else if (this._sideObj.level == 2) {
                return 110;
            }
            else if (this._sideObj.level == 3) {
                return 120;
            }
        }
        getZhiCount() {
            if (this._sideObj.level == 0) {
                return 2;
            }
            else if (this._sideObj.level == 1) {
                return 2;
            }
            else if (this._sideObj.level == 2) {
                return 3;
            }
            else if (this._sideObj.level == 3) {
                return 4;
            }
        }
    }

    class SetVariant extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.index = 0;
            this.CleaningZones = [];
            this.progressMats = [];
            this.pointLists = [];
            this.cleanList = [];
            this.cleanerPoints = [];
        }
        onAwake() {
            let CleaningZone = this.findNodeByPath("CleaningZone");
            for (var i = 0; i < CleaningZone.numChildren; i++) {
                let cleaning = CleaningZone.getChildAt(i);
                this.CleaningZones.push(cleaning);
                let Progress = BaseScript3D.findNodeByPath(cleaning, "IndicatorClear/IndicatorClear/Progress");
                this.progressMats.push(Progress.meshRenderer.material);
            }
            this.cleanerPoints.push(new Laya.Vector3(0, 0, 0));
            for (var i = 0; i < this.CleaningZones.length; i++) {
                this.cleanerPoints.push(this.CleaningZones[i].transform.position);
            }
        }
        onStart() {
            for (var i = 0; i < this.CleaningZones.length; i++) {
                let list = MoveManager.instance.addSideToPoint(this.CleaningZones[i].transform.position, new Laya.Vector3(2, 0, 2), SideType.CLEAN_ROOM, this.index * 10 + (i + 1));
                this.pointLists.push(list);
            }
            this.changeClean();
        }
        updateClean(cleanList) {
            this.cleanList = cleanList;
            if (this.CleaningZones.length > 0) {
                this.changeClean();
            }
        }
        updateCleanTime(cleanId, progress, isComplete) {
            this.progressMats[cleanId - 1]._ProgressValue = progress;
            if (isComplete) {
                this.CleaningZones[cleanId - 1].active = false;
            }
        }
        getCleanerPoint(cleanId) {
            return this.cleanerPoints[cleanId];
        }
        changeClean() {
            for (var i = 0; i < this.CleaningZones.length; i++) {
                if (i < this.cleanList.length) {
                    if (this.cleanList[i] == 1) {
                        this.CleaningZones[i].active = true;
                        this.progressMats[i]._ProgressValue = 0;
                    }
                    else {
                        this.CleaningZones[i].active = false;
                    }
                }
                else {
                    this.CleaningZones[i].active = false;
                }
            }
        }
        get NodeName() {
            return this.node.name;
        }
        get cleanCount() {
            return this.CleaningZones.length;
        }
        clearAll() {
            for (var i = 0; i < this.pointLists.length; i++) {
                MoveManager.instance.removeSide(this.pointLists[i]);
            }
            this.node.destroy();
        }
    }
    class RoomSmall extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.UpgradePriceRoot = null;
            this.LockedRoot = null;
            this.CleaningSign01 = null;
            this.LightOff = null;
            this.InteriorSets = null;
            this.CustomerToBedPoint = null;
            this.MenPos = null;
            this.cleanPoss = [];
            this.matrix4x4 = null;
            this.isOpen = false;
            this.state = 0;
            this.setVariant = null;
            this.cleanerPaths = [];
            this.moneyType = 1;
            this.customer = null;
            this.loadPrefabsName = "";
            this.isLoading = false;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.UpgradePriceRoot = this.findNodeByPath("UpgradePriceRoot");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.CleaningSign01 = this.findNodeByPath("Opened/CleaningSign01");
            this.LightOff = this.findNodeByPath("Opened/LightOff");
            this.InteriorSets = this.findNodeByPath("Opened/InteriorSets");
            this.CustomerToBedPoint = this.findNodeByPath("Opened/CustomerToBedPoint");
            this.LightOff.active = this.CleaningSign01.active = false;
            this.MenPos = this.findNodeByPath("Opened/CleanPath/MenPos");
            let Path = this.findNodeByPath("Opened/CleanPath/Path");
            for (var i = 0; i < Path.numChildren; i++) {
                let sp = Path.getChildAt(i);
                this.cleanerPaths.push(sp.name);
            }
            let Points = this.findNodeByPath("Opened/CleanPath/Points");
            for (var i = 0; i < Points.numChildren; i++) {
                this.cleanPoss.push(Points.getChildAt(i));
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
            EventMgr.Int.on("UPDATE_ROOM_SET", this.onUpdateRoomSet, this);
        }
        onDestroy() {
            super.onDestroy();
            EventMgr.Int.off("UPDATE_ROOM_SET", this.onUpdateRoomSet, this);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changeSetVariant();
            this.initState();
        }
        onLateUpdate() {
            if (RescoureData.isLoadRoom && this.isLoading) {
                this.loadSetVaruant();
            }
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    this.isOpen = true;
                    this.checkUpgrade();
                }
                else {
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep) {
                        this._max = this.c_moneyOpen;
                        this.moneyType = 1;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_ROOM, this.needCount, "34", "RoomIcon");
                    }
                }
            }
            else {
                this.Opened.active = this.LockedRoot.active = false;
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        moveCameraForUpgrade() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.UpgradePriceRoot.transform.position);
        }
        changeSetVariant() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getSetVariantName();
            if (this.setVariant && this.setVariant.NodeName == prefabsName) {
                return;
            }
            this.loadPrefabsName = prefabsName;
            this.isLoading = true;
        }
        initState() {
            if (!this.isOpen)
                return;
            let isClean = true;
            let clean = this._sideObj.clean;
            for (var i = 0; i < clean.length; i++) {
                if (clean[i] == 1) {
                    isClean = false;
                    break;
                }
            }
            this.state = isClean ? RoomSmall.STATE_WAITE : RoomSmall.STATE_CLEAN;
        }
        checkUpgrade() {
            let upgradeSteps = this._sideObj.upgradeSteps;
            let sIndex = upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0) {
                this._max = this.getUpgradeMax();
                this.moneyType = 2;
                this.isCanBuy = true;
                this.createPrice(this.UpgradePriceRoot, this.c_index, SideType.Upgrade_ROOM, this.needCount, "hi", "RoomUpdateIcon");
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradePriceRoot.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openRoom();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeRoom();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openRoom() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this._sideObj.clean = [];
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changeSetVariant();
            this.initState();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
            if (this.c_zoneId == 1)
                GameSDK.sendEvent("解锁房间" + this.c_index);
        }
        upgradeRoom() {
            this.destoryPrice();
            if (this._sideObj.level < 10) {
                this._sideObj.level = 21;
            }
            else if (this._sideObj.level < 30) {
                this._sideObj.level = 31;
            }
            this._sideObj.money = this.preCount = this.cCount = 0;
            let sIndex = this._sideObj.upgradeSteps.indexOf(this.openStep);
            if (sIndex >= 0)
                this._sideObj.upgradeSteps[sIndex] = 0;
            this._sideObj.clean = [];
            LogicRoom.instance.updateOpenStep();
            this.changeSetVariant();
            this.setUpgradeSelect();
            AudioMgr$1.instance.play_sound(13);
        }
        getUpgradeMax() {
            if (this._sideObj.level < 10) {
                return this.c_moneyLvs[0];
            }
            else if (this._sideObj.level < 30) {
                return this.c_moneyLvs[1];
            }
        }
        get isReady() {
            return this.isOpen && this.state == RoomSmall.STATE_WAITE;
        }
        get isClean() {
            return this.isOpen && this.setVariant && this.state == RoomSmall.STATE_CLEAN;
        }
        setUpgradeSelect() {
            if (this.customer) {
                this.customer.destroyCustomerOnRoomUpgrade();
                this.customer = null;
            }
            this.LightOff.active = false;
            this.state = RoomSmall.STATE_UPGRADE;
            SceneMgr.Int.playerController.MoveCamerToLookRoom(this.getLookRoomPos(), this.CustomerToBedPoint.transform.rotation);
            Laya.timer.once(500, this, () => {
                UIMgr.instance.openUI(ModuleType.Shengji, { roomId: this.c_index, type: this.c_type, level: this._sideObj.level, moneys: this.getSetMoneys(), stars: this.getSetStars(), pos: this.CustomerToBedPoint.transform.position }, null, () => {
                    this.onChangeSetComplete();
                });
            });
        }
        onUpdateRoomSet(index, level) {
            if (this.c_index == index) {
                this._sideObj.level = level;
                this.changeSetVariant();
                LogicRoom.instance.setSideObj(this._sideObj);
            }
        }
        onChangeSetComplete() {
            SceneMgr.Int.playerController.moveCamerToPlayer(this.getLookRoomPos());
            this.state = RoomSmall.STATE_WAITE;
        }
        getLookRoomPos() {
            let pos = this.CustomerToBedPoint.transform.position.clone();
            pos.y -= 6;
            pos.z -= 3;
            return pos;
        }
        setCustomerComin(customer) {
            this.state = RoomSmall.STATE_CUSTE_COM;
            this.customer = customer;
        }
        setCustomerInRoom() {
            this.state = RoomSmall.STATE_CUSTE_IN;
            this.LightOff.active = true;
        }
        setCustomerOutRoom() {
            this.state = RoomSmall.STATE_CLEAN;
            this._sideObj.clean = [];
            for (var i = 0; i < this.setVariant.cleanCount; i++) {
                this._sideObj.clean.push(1);
            }
            LogicRoom.instance.setSideObj(this._sideObj);
            this.setVariant.updateClean(this._sideObj.clean);
            this.LightOff.active = false;
            this.customer = null;
        }
        updateCleanTime(cleanId, progress, isComplete) {
            if (isComplete) {
                this._sideObj.clean[cleanId - 1] = 0;
                LogicRoom.instance.setSideObj(this._sideObj);
                let isClean = true;
                for (var i = 0; i < this._sideObj.clean.length; i++) {
                    if (this._sideObj.clean[i] == 1) {
                        isClean = false;
                        break;
                    }
                }
                if (isClean) {
                    this.state = RoomSmall.STATE_WAITE;
                }
            }
            this.setVariant.updateCleanTime(cleanId, progress, isComplete);
            if (isComplete) {
                SceneMgr.Int.playerController.jiangtouScript.isClean = true;
            }
        }
        getCustomerToBedPos() {
            return this.CustomerToBedPoint.transform.position;
        }
        getCustomerToBedRot() {
            return this.CustomerToBedPoint.transform.rotation;
        }
        getCleanMenPos() {
            return this.MenPos.transform.position;
        }
        getCanCleanId() {
            for (var i = 0; i < this._sideObj.clean.length; i++) {
                if (this._sideObj.clean[i] == 1) {
                    return i + 1;
                }
            }
            return 0;
        }
        getCleanerPath(bCleanId, eCleanId) {
            let path = [];
            let pathName = this.cleanerPaths[bCleanId];
            let ps = pathName.split("_")[eCleanId];
            for (var i = 0; i < ps.length; i++) {
                let c = ps.charAt(i);
                if (c == "M") {
                    path.push(this.getCleanMenPos());
                }
                else {
                    path.push(this.cleanPoss[Number(c) - 1].transform.position);
                }
            }
            return path;
        }
        getCleanPos(cleanId) {
            if (cleanId - 1 < this.cleanPoss.length) {
                return this.cleanPoss[cleanId - 1].transform.position;
            }
            else {
                return null;
            }
        }
        loadSetVaruant() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getRoom(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.setVariant) {
                        this.setVariant.clearAll();
                    }
                    let sp = Laya.Sprite3D.instantiate(node);
                    sp.transform.position = v3_zeor;
                    this.setVariant = sp.addComponent(SetVariant);
                    this.setVariant.index = this.c_index;
                    this.setVariant.updateClean(this._sideObj.clean);
                    ComMgr.bindNode(sp, SceneMgr.Int.ComData);
                    this.InteriorSets.addChild(sp);
                }
            });
        }
        getSetVariantName() {
            switch (this.c_type) {
                case NType.Room_right:
                    if (this._sideObj.level == 1) {
                        return "Set_Variant_1_1_1";
                    }
                    else if (this._sideObj.level == 21) {
                        return "Set_Variant_1_2_1";
                    }
                    else if (this._sideObj.level == 22) {
                        return "Set_Variant_1_2_2";
                    }
                    else if (this._sideObj.level == 23) {
                        return "Set_Variant_1_2_3";
                    }
                    else if (this._sideObj.level == 31) {
                        return "Set_Variant_1_3_1";
                    }
                    else if (this._sideObj.level == 32) {
                        return "Set_Variant_1_3_2";
                    }
                    else if (this._sideObj.level == 33) {
                        return "Set_Variant_1_3_3";
                    }
                    break;
                case NType.Room_left:
                    if (this._sideObj.level == 1) {
                        return "Set_Variant_2_1_1";
                    }
                    else if (this._sideObj.level == 21) {
                        return "Set_Variant_2_2_1";
                    }
                    else if (this._sideObj.level == 22) {
                        return "Set_Variant_2_2_2";
                    }
                    else if (this._sideObj.level == 23) {
                        return "Set_Variant_2_2_3";
                    }
                    else if (this._sideObj.level == 31) {
                        return "Set_Variant_2_3_1";
                    }
                    else if (this._sideObj.level == 32) {
                        return "Set_Variant_2_3_2";
                    }
                    else if (this._sideObj.level == 33) {
                        return "Set_Variant_2_3_3";
                    }
                    break;
                case NType.Room_down:
                    if (this._sideObj.level == 1) {
                        return "Set_Variant_3_1_1";
                    }
                    else if (this._sideObj.level == 21) {
                        return "Set_Variant_3_2_1";
                    }
                    else if (this._sideObj.level == 22) {
                        return "Set_Variant_3_2_2";
                    }
                    else if (this._sideObj.level == 23) {
                        return "Set_Variant_3_2_3";
                    }
                    else if (this._sideObj.level == 31) {
                        return "Set_Variant_3_3_1";
                    }
                    else if (this._sideObj.level == 32) {
                        return "Set_Variant_3_3_2";
                    }
                    else if (this._sideObj.level == 33) {
                        return "Set_Variant_3_3_3";
                    }
                    break;
                case NType.Room_Big:
                    if (this._sideObj.level == 1) {
                        return "Set_Variant_Big_1_1_1";
                    }
                    else if (this._sideObj.level == 21) {
                        return "Set_Variant_Big_1_2_1";
                    }
                    else if (this._sideObj.level == 22) {
                        return "Set_Variant_Big_1_2_2";
                    }
                    else if (this._sideObj.level == 23) {
                        return "Set_Variant_Big_1_2_3";
                    }
                    else if (this._sideObj.level == 31) {
                        return "Set_Variant_Big_1_3_1";
                    }
                    else if (this._sideObj.level == 32) {
                        return "Set_Variant_Big_1_3_2";
                    }
                    else if (this._sideObj.level == 33) {
                        return "Set_Variant_Big_1_3_3";
                    }
                    break;
            }
        }
        getSetMoneys() {
            if (this._sideObj.level == 21) {
                return [100, 200, 1000];
            }
            else {
                return [300, 400, 2000];
            }
        }
        getSetStars() {
            let stars = this.c_stars;
            if (this._sideObj.level == 21) {
                if (stars.length >= 3) {
                    return [stars[0], stars[1], stars[2]];
                }
                else {
                    return [2, 2, 3];
                }
            }
            else {
                if (stars.length >= 6) {
                    return [stars[3], stars[4], stars[5]];
                }
                else {
                    return [3, 3, 4];
                }
            }
        }
        getCheckMoney() {
            switch (this.c_type) {
                case NType.Room_right:
                case NType.Room_left:
                case NType.Room_down:
                    if (this._sideObj.level == 1) {
                        return 10;
                    }
                    else if (this._sideObj.level == 21) {
                        return 20;
                    }
                    else if (this._sideObj.level == 22) {
                        return 20;
                    }
                    else if (this._sideObj.level == 23) {
                        return 30;
                    }
                    else if (this._sideObj.level == 31) {
                        return 40;
                    }
                    else if (this._sideObj.level == 32) {
                        return 40;
                    }
                    else if (this._sideObj.level == 33) {
                        return 50;
                    }
                    break;
                case NType.Room_Big:
                    if (this._sideObj.level == 1) {
                        return 50;
                    }
                    else if (this._sideObj.level == 21) {
                        return 60;
                    }
                    else if (this._sideObj.level == 22) {
                        return 60;
                    }
                    else if (this._sideObj.level == 23) {
                        return 70;
                    }
                    else if (this._sideObj.level == 31) {
                        return 80;
                    }
                    else if (this._sideObj.level == 32) {
                        return 80;
                    }
                    else if (this._sideObj.level == 33) {
                        return 100;
                    }
                    break;
            }
        }
    }
    RoomSmall.STATE_WAITE = 1;
    RoomSmall.STATE_CUSTE_COM = 2;
    RoomSmall.STATE_CUSTE_IN = 3;
    RoomSmall.STATE_CLEAN = 4;
    RoomSmall.STATE_UPGRADE = 5;

    var AnimState$2;
    (function (AnimState) {
        AnimState["Idle"] = "Idle";
        AnimState["Run"] = "MainCharacterMaleWalking";
        AnimState["CarryingIdle"] = "CarryingIdle";
        AnimState["WalkingWithBox"] = "WalkingWithBox";
    })(AnimState$2 || (AnimState$2 = {}));
    class WorkerAnim$1 extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$2.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$2.Idle);
            this.animator.addScriptPlayState(0, AnimState$2.Run);
            this.animator.addScriptPlayState(0, AnimState$2.CarryingIdle);
            this.animator.addScriptPlayState(0, AnimState$2.WalkingWithBox);
        }
        playIdle() {
            this.play(AnimState$2.Idle);
        }
        playRun() {
            this.play(AnimState$2.Run);
        }
        playIdleBox() {
            this.play(AnimState$2.CarryingIdle);
        }
        playRunBox() {
            this.play(AnimState$2.WalkingWithBox);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class WorkerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.isWork = false;
            this.loadPrefabsName = "";
            this.speed = 0;
            this.MaxCount = 0;
            this.getPos = null;
            this.toiletMenPos = null;
            this.mainPathIndex = 0;
            this.transform = null;
            this.movePath = null;
            this.fristPos = null;
            this.propSp = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.props = [];
            this.toToilet = null;
            this.sitIndex = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.propSp = new Laya.Sprite3D();
            this.propSp.transform.localPosition = new Laya.Vector3(0, 1, 0.5);
            this.node.addChild(this.propSp);
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.fristPos = this.transform.position.clone();
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == WorkerNode.MOVE_WAITE) {
                if (this.isWork == false)
                    return;
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.t = 0;
                    this.checkTarget();
                }
            }
        }
        toWaite() {
            this.state = WorkerNode.MOVE_WAITE;
            this.t = 0;
            this.all = 1000;
            this.playIdle();
        }
        checkTarget() {
            let toilet = LogicRoom.instance.getToiletZhiNull();
            if (toilet) {
                this.toToilet = toilet;
                this.moveToGetPoint();
            }
        }
        moveToGetPoint() {
            this.state = WorkerNode.MOVE_TO_GETPOINT;
            let path = [this.transform.position.clone()];
            path.push(this.getPos);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToGetPointComplete));
            this.playRun();
        }
        onmoveToGetPointComplete() {
            this.state = WorkerNode.MOVE_GET_PROP;
            if (this.props.length < this.MaxCount) {
                Laya.timer.once(1000, this, this.onGetOneProp);
            }
            else {
                this.moveToTarget();
            }
            this.playIdle();
        }
        onGetOneProp() {
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("ToiletPaper_1"), (node) => {
                if (node) {
                    let prop = Laya.Sprite3D.instantiate(node);
                    this.props.push(prop);
                    this.propSp.addChild(prop);
                    this.sortPorp();
                    if (this.props.length < this.MaxCount) {
                        Laya.timer.once(1000, this, this.onGetOneProp);
                    }
                    else {
                        this.moveToTarget();
                    }
                }
            });
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
            this.playIdle();
        }
        moveToTarget() {
            this.state = WorkerNode.MOVE_TO_TARGET;
            if (this.toToilet) {
                this.moveToToilet();
            }
        }
        moveToToilet() {
            let path = LogicRoom.instance.getPathList(this.mainPathIndex, this.toToilet.c_mainPathIndex);
            path.unshift(this.toiletMenPos);
            path.unshift(this.transform.position.clone());
            path.push(this.toToilet.getFristWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletMenComplete));
            this.playRun();
        }
        onMoveToToiletMenComplete() {
            let sitIndex = this.toToilet.getNullSit();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.moveToToiletSit();
            }
            else {
                this.findOtherNullTarget();
            }
        }
        moveToToiletSit() {
            this.state = WorkerNode.MOVE_TO_TOILET_SIT;
            let path = [this.transform.position.clone()];
            path.push(this.toToilet.getIntoPos(this.sitIndex));
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletSitComplete));
            this.playRun();
        }
        onMoveToToiletSitComplete() {
            this.state = WorkerNode.MOVE_IN_TOILET_SIT;
            Laya.timer.once(1000, this, () => {
                let prop = this.props.pop();
                prop.destroy();
                this.sortPorp();
                this.toToilet.addSitZhi(this.sitIndex);
                if (this.props.length > 0) {
                    this.moveToToiletOtherSit();
                }
                else {
                    this.backToFristPos();
                }
            });
            this.playIdle();
        }
        moveToToiletOtherSit() {
            let sitIndex = this.toToilet.getNullSit();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.moveToToiletSit();
            }
            else {
                this.findOtherNullTarget();
            }
        }
        findOtherNullTarget() {
            let toilet = LogicRoom.instance.getToiletZhiNull();
            if (toilet) {
                let curPathIndex = this.toToilet.c_mainPathIndex;
                this.toToilet = toilet;
                this.moveToOtherTarget(curPathIndex);
            }
            else {
                this.backToFristPos();
            }
        }
        moveToOtherTarget(curPathIndex) {
            this.state = WorkerNode.MOVE_TO_TARGET;
            let path = LogicRoom.instance.getPathList(curPathIndex, this.toToilet.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.toToilet.getFristWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletMenComplete));
            this.playRun();
        }
        backToFristPos() {
            this.state = WorkerNode.BACK_TO_FRIST;
            let path = LogicRoom.instance.getPathList(this.toToilet.c_mainPathIndex, this.mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.toiletMenPos);
            path.push(this.fristPos);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onBackFristComplte));
            this.playRun();
        }
        onBackFristComplte() {
            this.toWaite();
        }
        get isHas() {
            return this.props.length > 0;
        }
        changeChar() {
            this.isLoading = true;
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.character) {
                        this.character.destroy();
                        this.character = null;
                    }
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(WorkerAnim$1);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playIdleBox();
                }
                else {
                    this._anim.playIdle();
                }
            }
        }
        playRun() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playRunBox();
                }
                else {
                    this._anim.playRun();
                }
            }
        }
    }
    WorkerNode.MOVE_NULL = 0;
    WorkerNode.MOVE_WAITE = 1;
    WorkerNode.MOVE_TO_GETPOINT = 2;
    WorkerNode.MOVE_GET_PROP = 3;
    WorkerNode.MOVE_TO_TARGET = 4;
    WorkerNode.MOVE_TO_TOILET_SIT = 5;
    WorkerNode.MOVE_IN_TOILET_SIT = 6;
    WorkerNode.BACK_TO_FRIST = 7;

    class Storage extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.GetPoint = null;
            this.workerPos = null;
            this.MenPos = null;
            this.UpgradeBorder = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this.workerNode = null;
            this.moneyType = 1;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.GetPoint = this.findNodeByPath("Opened/GetPoint");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.UpgradeBorder = this.findNodeByPath("UpgradeBorder");
            this.workerPos = this.findNodeByPath("Opened/workerPos");
            this.MenPos = this.findNodeByPath("Opened/MenPos");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
            MoveManager.instance.addSideToPoint(this.GetPoint.transform.position, new Laya.Vector3(1, 0, 1), SideType.GET_ToiletPaper, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.haside(this.c_index)) {
                this.Opened.active = true;
                this.LockedRoot.active = false;
                this.isOpen = true;
            }
            else {
                this.Opened.active = false;
                this.LockedRoot.active = true;
                if (this.c_openStep == this.openStep) {
                    this._max = this.c_moneyOpen;
                    this.moneyType = 1;
                    this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Storage, this.needCount, "894", "NeaAreaIcon");
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getPlayerName();
            this.initCleaner(prefabsName);
            if (this._sideObj.level < 4) {
                this.isCanBuy = true;
                this._max = this.getUpgradeMaxGold();
                this.moneyType = 2;
                if (this._sideObj.level < 1) {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "897", "WorkerIcon");
                }
                else {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "hi", "WorkerSpeedIcon");
                }
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradeBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openStorage();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeWroker();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openStorage() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.level = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        upgradeWroker() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.changePlayer();
            this.changeCleaner();
            AudioMgr$1.instance.play_sound(13);
        }
        initCleaner(loadPrefabsName) {
            if (this.workerNode)
                return;
            let sp = new Laya.Sprite3D();
            sp.name = "cleaner";
            sp.transform.localPosition = this.workerPos.transform.localPosition.clone();
            sp.transform.localRotationEuler = this.workerPos.transform.localRotationEuler.clone();
            this.workerNode = sp.addComponent(WorkerNode);
            this.workerNode.isWork = this._sideObj.level > 0;
            this.workerNode.mainPathIndex = this.c_mainPathIndex;
            this.workerNode.loadPrefabsName = loadPrefabsName;
            this.workerNode.speed = this.getPlayerSpeed();
            this.workerNode.MaxCount = this.getZhiCount();
            this.workerNode.getPos = this.GetPoint.transform.position.clone();
            this.workerNode.toiletMenPos = this.MenPos.transform.position.clone();
            this.node.addChild(sp);
        }
        changeCleaner() {
            if (this.workerNode) {
                this.workerNode.isWork = this._sideObj.level > 0;
                this.workerNode.loadPrefabsName = this.getPlayerName();
                this.workerNode.speed = this.getPlayerSpeed();
                this.workerNode.MaxCount = this.getZhiCount();
                this.workerNode.changeChar();
            }
        }
        getUpgradeMaxGold() {
            switch (this._sideObj.level) {
                case 0:
                    return this.c_moneyLvs[0];
                case 1:
                    return this.c_moneyLvs[1];
                case 2:
                    return this.c_moneyLvs[2];
                case 3:
                    return this.c_moneyLvs[3];
            }
        }
        getPlayerName() {
            if (this._sideObj.level == 0) {
                return "CharacterWorker1";
            }
            else if (this._sideObj.level == 1) {
                return "CharacterWorker1";
            }
            else if (this._sideObj.level == 2) {
                return "CharacterWorker2";
            }
            else if (this._sideObj.level == 3) {
                return "CharacterWorker3";
            }
            else if (this._sideObj.level == 4) {
                return "CharacterWorker4";
            }
        }
        getPlayerSpeed() {
            if (this._sideObj.level == 0) {
                return 100;
            }
            else if (this._sideObj.level == 1) {
                return 100;
            }
            else if (this._sideObj.level == 2) {
                return 110;
            }
            else if (this._sideObj.level == 3) {
                return 120;
            }
            else if (this._sideObj.level == 4) {
                return 130;
            }
        }
        getZhiCount() {
            if (this._sideObj.level == 0) {
                return 1;
            }
            else if (this._sideObj.level == 1) {
                return 1;
            }
            else if (this._sideObj.level == 2) {
                return 2;
            }
            else if (this._sideObj.level == 3) {
                return 3;
            }
            else if (this._sideObj.level == 4) {
                return 4;
            }
        }
    }

    var AnimState$1;
    (function (AnimState) {
        AnimState["Idle"] = "BoredIdle_0";
        AnimState["Run"] = "StrutWalking_0";
        AnimState["Work"] = "PoolCleaning";
    })(AnimState$1 || (AnimState$1 = {}));
    class PoolAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState$1.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState$1.Idle);
            this.animator.addScriptPlayState(0, AnimState$1.Run);
            this.animator.addScriptPlayState(0, AnimState$1.Work);
        }
        playIdle() {
            this.play(AnimState$1.Idle);
        }
        playRun() {
            this.play(AnimState$1.Run);
        }
        playWork() {
            this.play(AnimState$1.Work);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class PoolCleanerNode extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.isWork = false;
            this.loadPrefabsName = "";
            this.speed = 0;
            this.MaxCount = 0;
            this.getPos1 = null;
            this.toPool = null;
            this.transform = null;
            this.movePath = null;
            this.fristPos = null;
            this.propSp = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.props = [];
            this.toBedId = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.propSp = new Laya.Sprite3D();
            this.propSp.transform.localPosition = new Laya.Vector3(0, 1, 0.5);
            this.node.addChild(this.propSp);
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.fristPos = this.transform.position.clone();
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == PoolCleanerNode.MOVE_WAITE) {
                if (this.isWork == false)
                    return;
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.t = 0;
                    this.checkSunBed();
                }
            }
        }
        toWaite() {
            this.state = PoolCleanerNode.MOVE_WAITE;
            this.t = 0;
            this.all = 1000;
            this.playIdle();
        }
        checkSunBed() {
            let bedId = this.toPool.getCleanBedId();
            if (bedId > 0) {
                this.toBedId = bedId;
                this.moveToBed();
            }
        }
        moveToBed() {
            this.state = PoolCleanerNode.MOVE_TO_BED;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.toPool.getSunBedCleanPos(this.toBedId));
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.moveToBedComplete));
            this.playRun();
        }
        moveToBedComplete() {
            this.state = PoolCleanerNode.MOVE_CLEAN;
            this.playWork();
            Laya.timer.once(1000, this, this.onCleanComplete);
        }
        onCleanComplete() {
            this.toPool.updateCleanTime(this.toBedId, 100, true);
            this.checkOtherSunBed();
        }
        checkOtherSunBed() {
            let bedId = this.toPool.getCleanBedId();
            if (bedId > 0) {
                this.toBedId = bedId;
                this.moveToBed();
            }
            else {
                this.backFristPos();
            }
        }
        backFristPos() {
            this.state = PoolCleanerNode.MVOE_BACK;
            let bNode = RoomSearcher.instance.getAstarNode(this.transform.position);
            let eNode = RoomSearcher.instance.getAstarNode(this.fristPos);
            let path = RoomSearcher.instance.searchPathForPos(bNode, eNode);
            this.movePath.movePath(path, 100, Laya.Handler.create(this, this.backFristPosComplete));
            this.playRun();
        }
        backFristPosComplete() {
            this.toWaite();
        }
        addProp(type) {
            let food = new Laya.Sprite3D();
            let script = food.addComponent(PropFood);
            script.type = type;
            this.props.push(script);
            this.propSp.addChild(food);
            this.sortPorp();
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
            this.playIdle();
        }
        getAndDelOneProp(type) {
            let prop = null;
            for (var i = this.props.length - 1; i >= 0; i--) {
                if (this.props[i].type == type) {
                    prop = this.props[i];
                    this.props.splice(i, 1);
                    this.sortPorp();
                    break;
                }
            }
            return prop;
        }
        get isHas() {
            return this.props.length > 0;
        }
        changeChar() {
            this.isLoading = true;
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.character) {
                        this.character.destroy();
                        this.character = null;
                    }
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(PoolAnim);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                this._anim.playIdle();
            }
        }
        playRun() {
            if (this._anim) {
                this._anim.playRun();
            }
        }
        playWork() {
            if (this._anim) {
                this._anim.playWork();
            }
        }
    }
    PoolCleanerNode.MOVE_NULL = 0;
    PoolCleanerNode.MOVE_WAITE = 1;
    PoolCleanerNode.MOVE_TO_BED = 2;
    PoolCleanerNode.MOVE_CLEAN = 3;
    PoolCleanerNode.MVOE_BACK = 4;

    class SunBed extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.c_index = 0;
            this.index = 0;
            this.bedId = 0;
            this.openMoney = 0;
            this.PlayerPoint = null;
            this.PriceBorder = null;
            this.CleaningZone = null;
            this.progressMat = null;
            this.Umbrella = null;
            this.matrix4x4 = null;
            this.state = 1;
            this.priceScript = null;
            this._sideObj = null;
            this.isCanBuy = true;
            this.preCount = 0;
            this.cCount = 0;
            this._max = 0;
        }
        onAwake() {
            this.PlayerPoint = this.findNodeByPath("OpenRoot/PlayerPoint");
            this.Umbrella = this.findNodeByPath("OpenRoot/Umbrella (6)");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.CleaningZone = this.findNodeByPath("CleaningZone");
            let Progress = BaseScript3D.findNodeByPath(this.CleaningZone, "IndicatorClear/IndicatorClear/Progress");
            this.progressMat = Progress.meshRenderer.material;
            this.CleaningZone.active = false;
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            this.c_index = this.index * 10 + this.bedId;
            this.sideObj = LogicRoom.instance.getSideObj(this.c_index, 0, []);
            this.updateOpen();
        }
        addCustomer(customer) {
            this.state = SunBed.STATE_CUSTO;
        }
        removeCustomer() {
            this.state = SunBed.STATE_CLEAN;
            this.CleaningZone.active = true;
            this.progressMat._ProgressValue = 0;
        }
        updateCleanTime(progress, isComplete) {
            if (this.state != SunBed.STATE_CLEAN)
                return;
            this.progressMat._ProgressValue = progress;
            if (isComplete) {
                this.CleaningZone.active = false;
                this.state = SunBed.STATE_WAITE;
            }
        }
        getPlayerPos() {
            return this.PlayerPoint;
        }
        getCleanPos() {
            return this.CleaningZone.transform.position;
        }
        updateOpen() {
            if (this._sideObj.level >= 2) {
                this.Umbrella.active = true;
                MoveManager.instance.addSideToPoint(this.CleaningZone.transform.position, new Laya.Vector3(2, 0, 2), SideType.CLEAN_SunBed, this.c_index);
            }
            else {
                this.Umbrella.active = false;
                this.isCanBuy = true;
                this._max = this.openMoney;
                this.createPrice(this.PriceBorder, this.c_index, SideType.Open_SUNBED, this.needCount, "vwx", "RoomIcon");
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get isReady() {
            return this._sideObj.level >= 2 && this.state == SunBed.STATE_WAITE;
        }
        get isClean() {
            return this._sideObj.level >= 2 && this.state == SunBed.STATE_CLEAN;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openSunBed();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openSunBed() {
            if (this.priceScript) {
                this.priceScript.clear();
                this.priceScript = null;
            }
            this._sideObj.level = 2;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.updateOpen();
            AudioMgr$1.instance.play_sound(14);
        }
        createPrice(parent, index, sideType, money, names, iconUrl) {
            if (this.priceScript == null) {
                ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("PriceBorder"), (node) => {
                    if (node) {
                        let sp = Laya.Sprite3D.instantiate(node);
                        sp.transform.position = v3_zeor;
                        this.priceScript = sp.addComponent(PriceBorder);
                        this.priceScript.init(index, sideType, money, names, iconUrl);
                        parent.addChild(sp);
                    }
                });
            }
        }
        createGold(count, bPos, ePos, callback) {
            ResourcesMgr$1.instance.load(RescoureData.getPrefabsUrlByName("DollarRoot"), (node) => {
                if (node) {
                    bPos.y += 1.5;
                    let sp = Laya.Sprite3D.instantiate(node);
                    sp.transform.position = bPos.clone();
                    let script = sp.addComponent(PropEnergy);
                    script.count = count;
                    script.toTarget(bPos, ePos, callback);
                    this.node.addChild(sp);
                }
            });
        }
        set sideObj(value) {
            this._sideObj = value;
            this.cCount = this.preCount = this._sideObj.money;
        }
        saveSideObj() {
            this._sideObj.money = this.cCount;
        }
        get max() {
            return this._max;
        }
        get needCount() {
            return this._max - this.cCount;
        }
        get needPreCount() {
            return this.max - this.preCount;
        }
    }
    SunBed.STATE_WAITE = 1;
    SunBed.STATE_CUSTO = 2;
    SunBed.STATE_CLEAN = 3;
    class SwimmingPool extends Aside {
        constructor() {
            super(...arguments);
            this.Base = null;
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.UpgradeBorder = null;
            this.workerPos = null;
            this.DetectorPos = null;
            this.maojingList = [];
            this.NoMaojing = null;
            this.waitePoints = [];
            this.matrix4x4 = null;
            this.isOpen = false;
            this.sunBedDic = new Dictionary();
            this.moneyType = 1;
            this.workerNode = null;
            this.waiteCount = 0;
            this.waiteCustomers = [];
        }
        onAwake() {
            super.onAwake();
            this.Base = this.findNodeByPath("Base");
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.UpgradeBorder = this.findNodeByPath("UpgradeBorder");
            this.workerPos = this.findNodeByPath("Opened/WorkerPos");
            this.DetectorPos = this.findNodeByPath("Opened/Maojing/DetectorPos");
            let waitePoint = this.findNodeByPath("waitePoint");
            for (var i = 0; i < waitePoint.numChildren; i++) {
                this.waitePoints.push(waitePoint.getChildAt(i));
            }
            let maojings = this.findNodeByPath("Opened/Maojing/maojings");
            for (var i = 0; i < maojings.numChildren; i++) {
                this.maojingList.push(maojings.getChildAt(i));
            }
            this.NoMaojing = this.findNodeByPath("Opened/Maojing/NoMaojing");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
            this.updateMaojin();
            this.initSunBeds();
            MoveManager.instance.addSideToPoint(this.DetectorPos.transform.position, new Laya.Vector3(1, 0, 1), SideType.PUT_MAOJIN, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.Base.active = true;
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    this.isOpen = true;
                }
                else {
                    this.Base.active = true;
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep) {
                        this._max = this.c_moneyOpen;
                        this.moneyType = 1;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Storage, this.needCount, "mn", "RestarauntIcon");
                    }
                }
            }
            else {
                this.Opened.active = false;
                this.LockedRoot.active = false;
                this.Base.active = false;
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        initSunBeds() {
            for (var i = 1; i <= 6; i++) {
                let bed = this.Opened.getChildByName("SunBed_" + i);
                let script = bed.addComponent(SunBed);
                script.index = this.c_index;
                script.bedId = i;
                script.openMoney = 500 + i * 200;
                this.sunBedDic.setValue(script.bedId, script);
            }
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getPlayerName();
            this.initWaiter(prefabsName);
            if (this._sideObj.level < 1) {
                this.isCanBuy = true;
                this._max = this.getUpgradeMaxGold();
                this.moneyType = 2;
                this.createPrice(this.UpgradeBorder, this.c_index, SideType.Open_Storage, this.needCount, "kju", "WorkerIcon");
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradeBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openPool();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeWroker();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openPool() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.level = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this._sideObj.clean = [0];
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.updateMaojin();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        upgradeWroker() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.changePlayer();
            this.changeWaiter();
            AudioMgr$1.instance.play_sound(14);
        }
        updateMaojin() {
            if (this.isOpen == false)
                return;
            let count = this._sideObj.clean.length > 0 ? this._sideObj.clean[0] : 0;
            for (var i = 0; i < this.maojingList.length; i++) {
                this.maojingList[i].active = i < count;
            }
            this.NoMaojing.active = count <= 0;
        }
        addMaojin() {
            if (this.isOpen == false)
                return;
            this._sideObj.clean[0] = Math.min(12, this._sideObj.clean[0] + 1);
            LogicRoom.instance.setSideObj(this._sideObj);
            this.updateMaojin();
        }
        subMaojinNoUpdate() {
            this._sideObj.clean[0] -= 1;
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        updateMaojinShow() {
            this.updateMaojin();
        }
        isNeedMaojin() {
            return this.isOpen && !(this._sideObj.clean.length > 0 && this._sideObj.clean[0] >= 12);
        }
        initWaiter(loadPrefabsName) {
            if (this.workerNode)
                return;
            let sp = new Laya.Sprite3D();
            sp.name = "WaiterNode";
            sp.transform.localPosition = this.workerPos.transform.localPosition.clone();
            sp.transform.localRotationEuler = this.workerPos.transform.localRotationEuler.clone();
            this.workerNode = sp.addComponent(PoolCleanerNode);
            this.workerNode.isWork = this._sideObj.level > 0;
            this.workerNode.loadPrefabsName = loadPrefabsName;
            this.workerNode.speed = this.getPlayerSpeed();
            this.workerNode.MaxCount = this.getZhiCount();
            this.workerNode.getPos1 = this.DetectorPos.transform.position.clone();
            this.workerNode.toPool = this;
            this.node.addChild(sp);
        }
        changeWaiter() {
            if (this.workerNode) {
                this.workerNode.isWork = this._sideObj.level > 0;
                this.workerNode.loadPrefabsName = this.getPlayerName();
                this.workerNode.speed = this.getPlayerSpeed();
                this.workerNode.MaxCount = this.getZhiCount();
                this.workerNode.changeChar();
            }
        }
        get isReady() {
            return this.isOpen && this.waiteCount < 3;
        }
        addCustomerCount() {
            this.waiteCount += 1;
        }
        addWaiteCustomer(customer) {
            this.waiteCustomers.push(customer);
            this.sortWaiteCustomerPos();
        }
        removeWaiteCustomer(customer) {
            for (var i = 0; i < this.waiteCustomers.length; i++) {
                if (this.waiteCustomers[i].playerId == customer.playerId) {
                    this.waiteCustomers.splice(i, 1);
                    this.waiteCount -= 1;
                    break;
                }
            }
            this.sortWaiteCustomerPos();
        }
        removeCustomer(bedId) {
            let script = this.sunBedDic.getValue(bedId);
            script.removeCustomer();
        }
        setUseSunBed(bedId, customer) {
            let script = this.sunBedDic.getValue(bedId);
            script.addCustomer(customer);
        }
        getSunBedPlayerPos(bedId) {
            let script = this.sunBedDic.getValue(bedId);
            return script.getPlayerPos();
        }
        getSunBedCleanPos(bedId) {
            let script = this.sunBedDic.getValue(bedId);
            return script.getCleanPos();
        }
        getNullBed() {
            if (this._sideObj.clean[0] <= 0)
                return -1;
            for (var i = 0; i < this.sunBedDic.values.length; i++) {
                if (this.sunBedDic.values[i].isReady) {
                    return this.sunBedDic.values[i].bedId;
                }
            }
            return -1;
        }
        getSunBed(bedId) {
            return this.sunBedDic.getValue(bedId);
        }
        getMaojinPos() {
            return this.DetectorPos.transform.position;
        }
        getFristWaitePoint() {
            return this.waitePoints[0].transform.position;
        }
        getCleanBedId() {
            for (var i = 0; i < this.sunBedDic.values.length; i++) {
                if (this.sunBedDic.values[i].isClean) {
                    return this.sunBedDic.values[i].bedId;
                }
            }
            return -1;
        }
        sortWaiteCustomerPos() {
            for (var i = 0; i < this.waiteCustomers.length; i++) {
                this.waiteCustomers[i].moveToPoolWaitePos(this.waitePoints[i].transform.position, i == 0);
            }
        }
        updateCleanTime(bedId, progress, isComplete) {
            let script = this.sunBedDic.getValue(bedId);
            script.updateCleanTime(progress, isComplete);
        }
        getUpgradeMaxGold() {
            return this.c_moneyLvs[0];
        }
        getPlayerName() {
            return "PoolCleaner";
        }
        getPlayerSpeed() {
            return 120;
        }
        getZhiCount() {
            return 1;
        }
    }

    class CabinScript$1 extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.noIcon = null;
            this.WCDoor = null;
            this.Yuan = null;
            this.PlayerPos = null;
            this.isAddSide = false;
            this.index = 0;
            this.sitIndex = 0;
        }
        onAwake() {
            this.noIcon = this.findNodeByPath("noIcon");
            this.WCDoor = this.findNodeByPath("WCDoor");
            this.Yuan = this.findNodeByPath("Yuan");
            this.PlayerPos = this.findNodeByPath("PlayerPos");
        }
        onStart() {
            if (!this.isAddSide && this.index > 0) {
                this.addSide();
            }
        }
        addSide() {
            this.isAddSide = true;
            MoveManager.instance.addSideToPoint(this.Yuan.transform.position, new Laya.Vector3(1, 0, 1), SideType.Toilet_PUT, this.index * 10 + (this.sitIndex + 1));
        }
        addSideToPoint(index, sitIndex) {
            this.index = index;
            this.sitIndex = sitIndex;
            if (this.Yuan) {
                this.addSide();
            }
        }
        updateState(state) {
            this.noIcon.active = state <= 0;
        }
        openMen() {
            this.WCDoor.transform.localRotationEuler = new Laya.Vector3(0, 90, 0);
        }
        closeMen() {
            this.WCDoor.transform.localRotationEuler = new Laya.Vector3(0, 180, 0);
        }
        get yuanPos() {
            return this.Yuan.transform.position;
        }
        get sitPos() {
            return this.PlayerPos.transform.position;
        }
    }
    class ToiletSmall extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.PayPoint = null;
            this.WaitePoints = [];
            this.StackOfMoney = null;
            this.cabinScripts = [];
            this.matrix4x4 = null;
            this.isOpen = false;
            this.waiteCount = 0;
            this.haveCustomers = [0, 0, 0];
            this.waiteCustomer = [];
            this.moneyNodes = [];
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.StackOfMoney = this.findNodeByPath("Opened/StackOfMoney");
            this.PayPoint = this.findNodeByPath("Opened/PayPoint");
            this.WaitePoints.push(this.PayPoint);
            let QueuePoints = this.findNodeByPath("Opened/QueuePoints");
            for (var i = 0; i < QueuePoints.numChildren; i++) {
                this.WaitePoints.push(QueuePoints.getChildAt(i));
            }
            for (var i = 1; i <= 3; i++) {
                let cabin = this.findNodeByPath("Opened/Interior/Cabin" + i);
                let script = cabin.addComponent(CabinScript$1);
                this.cabinScripts.push(script);
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.initCabinScript();
            this.initState();
            MoveManager.instance.addSideToPoint(this.StackOfMoney.transform.position, new Laya.Vector3(2, 0, 2), SideType.GET_Toilet, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    this.isOpen = true;
                }
                else {
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep) {
                        this._max = this.c_moneyOpen;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Toilent, this.needCount, "ab4", "Toilet");
                    }
                }
            }
            else {
                this.Opened.active = this.LockedRoot.active = false;
            }
        }
        initCabinScript() {
            for (var i = 0; i < this.cabinScripts.length; i++) {
                this.cabinScripts[i].addSideToPoint(this.c_index, i);
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        initState() {
            if (!this.isOpen)
                return;
            if (!this._sideObj.clean || this._sideObj.clean.length < 3) {
                this._sideObj.clean = [0, 0, 0];
                LogicRoom.instance.setSideObj(this._sideObj);
            }
            this.updateCabins();
        }
        updateCabins() {
            let clean = this._sideObj.clean;
            for (var i = 0; i < this.cabinScripts.length; i++) {
                this.cabinScripts[i].updateState(clean[i]);
            }
        }
        get isNull() {
            return this.isOpen && this.waiteCount < 4;
        }
        getCanIntoIndex() {
            for (var i = 0; i < this.haveCustomers.length; i++) {
                if (this.haveCustomers[i] == 0) {
                    if (this._sideObj.clean[i] > 0) {
                        return i;
                    }
                }
            }
            return -1;
        }
        getNullSit() {
            for (var i = 0; i < this._sideObj.clean.length; i++) {
                if (this._sideObj.clean[i] <= 0) {
                    return i;
                }
            }
            return -1;
        }
        setIntoSitIndex(sitIndex) {
            this.haveCustomers[sitIndex] = 1;
        }
        removeIntoSitIndex(sitIndex) {
            this.haveCustomers[sitIndex] = 0;
        }
        getIntoPos(sitIndex) {
            return this.cabinScripts[sitIndex].yuanPos;
        }
        getSitPos(sitIndex) {
            return this.cabinScripts[sitIndex].sitPos;
        }
        openMen(sitIndex) {
            this.cabinScripts[sitIndex].openMen();
        }
        closeMen(sitIndex) {
            this.cabinScripts[sitIndex].closeMen();
        }
        onLaComplete(sitIndex) {
            this.haveCustomers[sitIndex] = 0;
            this._sideObj.clean[sitIndex] -= 1;
            LogicRoom.instance.setSideObj(this._sideObj);
            this.updateCabins();
        }
        getSitNull(sitIndex) {
            return this._sideObj.clean[sitIndex] <= 0;
        }
        addSitZhi(sitIndex) {
            this._sideObj.clean[sitIndex] = 3;
            LogicRoom.instance.setSideObj(this._sideObj);
            this.updateCabins();
        }
        isZhiNull() {
            if (this.isOpen == false)
                return false;
            for (var i = 0; i < this._sideObj.clean.length; i++) {
                if (this._sideObj.clean[i] <= 0) {
                    return true;
                }
            }
            return false;
        }
        addCustomerCount() {
            this.waiteCount++;
        }
        addCustomerInLastWaitePos(customer) {
            this.waiteCustomer.push(customer);
            this.sortWaiteCustomerPos();
        }
        removeCustomerWaite(customer) {
            let isRemove = false;
            for (var i = 0; i < this.waiteCustomer.length; i++) {
                if (customer.playerId == this.waiteCustomer[i].playerId) {
                    this.waiteCount--;
                    this.waiteCustomer.splice(i, 1);
                    isRemove = true;
                    break;
                }
            }
            if (isRemove)
                this.sortWaiteCustomerPos();
        }
        getLastWaitPos() {
            return this.WaitePoints[this.WaitePoints.length - 1].transform.position;
        }
        getFristWaitPos() {
            return this.WaitePoints[0].transform.position;
        }
        sortWaiteCustomerPos() {
            for (var i = 0; i < this.waiteCustomer.length; i++) {
                this.waiteCustomer[i].moveToToiletWaitePos(this.WaitePoints[i].transform.position, i == 0);
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openToilet();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openToilet() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.clean = [0, 0, 0];
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        getAllMoney() {
            let d = 0;
            for (var i = this.moneyNodes.length - 1; i >= 0; i--) {
                this.moneyNodes[i].toPlayer(SceneMgr.Int.playerController.playerNode.node.transform, d * 1, new Laya.Vector3(0, 1, 0));
                d++;
            }
            this.moneyNodes = [];
        }
        addGolds(cPos) {
            cPos.y += 1.5;
            Laya.Vector3.transformCoordinate(cPos, this.matrix4x4, cPos);
            for (var i = 0; i < 5; i++) {
                let pos = this.StackOfMoney.transform.localPosition.clone();
                pos.z += Math.floor((this.moneyNodes.length % 15) % 3) * 0.65 - 0.65;
                pos.y += Math.floor(this.moneyNodes.length / 15) * 0.1 + 0.05;
                pos.x += Math.floor((this.moneyNodes.length % 15) / 3) * 0.4 - 0.75;
                let mNode = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("DollarRoot")));
                mNode.transform.localPosition = cPos.clone();
                mNode.transform.localRotationEuler = new Laya.Vector3(0, 90, 0);
                let script = mNode.addComponent(PropEnergy);
                script.propType = EPropNameById$1.diamonds;
                script.toAdd2(cPos, pos);
                this.moneyNodes.push(script);
                this.node.addChild(mNode);
            }
        }
    }

    class TrashBin extends Aside {
        constructor() {
            super(...arguments);
            this.lajitong = null;
            this.ItemsRoot = null;
            this.DetectorPos = null;
            this.matrix4x4 = null;
            this.isOpen = false;
        }
        onAwake() {
            super.onAwake();
            this.lajitong = this.findNodeByPath("lajitong");
            this.ItemsRoot = this.findNodeByPath("ItemsRoot");
            this.DetectorPos = this.findNodeByPath("DetectorPos");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                this.lajitong.active = this.DetectorPos.active = true;
                if (this.isOpen == false) {
                    this.isOpen = true;
                    MoveManager.instance.addSideToPoint(this.DetectorPos.transform.position, new Laya.Vector3(1, 0, 1), SideType.TRASHBING, this.c_index);
                }
            }
            else {
                this.lajitong.active = this.DetectorPos.active = false;
            }
        }
    }

    class CabinScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.noIcon = null;
            this.Yuan = null;
            this.PlayerPos = null;
            this.isAddSide = false;
            this.index = 0;
            this.sitIndex = 0;
        }
        onAwake() {
            this.noIcon = this.findNodeByPath("noIcon");
            this.Yuan = this.findNodeByPath("Yuan");
            this.PlayerPos = this.findNodeByPath("PlayerPos");
        }
        onStart() {
            if (!this.isAddSide && this.index > 0) {
                this.addSide();
            }
        }
        addSide() {
            this.isAddSide = true;
            MoveManager.instance.addSideToPoint(this.Yuan.transform.position, new Laya.Vector3(1, 0, 1), SideType.YinShuiJian_PUT, this.index * 10 + (this.sitIndex + 1));
        }
        addSideToPoint(index, sitIndex) {
            this.index = index;
            this.sitIndex = sitIndex;
            if (this.Yuan) {
                this.addSide();
            }
        }
        updateState(state) {
            this.noIcon.active = state <= 0;
        }
        get yuanPos() {
            return this.Yuan.transform.position;
        }
        get sitPos() {
            return this.PlayerPos.transform.position;
        }
    }
    class YinShuiJian extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.PayPoint = null;
            this.WaitePoints = [];
            this.StackOfMoney = null;
            this.cabinScripts = [];
            this.matrix4x4 = null;
            this.isOpen = false;
            this.waiteCount = 0;
            this.haveCustomers = [0, 0, 0];
            this.waiteCustomer = [];
            this.moneyNodes = [];
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.StackOfMoney = this.findNodeByPath("Opened/StackOfMoney");
            this.PayPoint = this.findNodeByPath("Opened/PayPoint");
            this.WaitePoints.push(this.PayPoint);
            let QueuePoints = this.findNodeByPath("Opened/QueuePoints");
            for (var i = 0; i < QueuePoints.numChildren; i++) {
                this.WaitePoints.push(QueuePoints.getChildAt(i));
            }
            for (var i = 1; i <= 3; i++) {
                let cabin = this.findNodeByPath("Opened/Interior/Cabin" + i);
                let script = cabin.addComponent(CabinScript);
                this.cabinScripts.push(script);
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.initCabinScript();
            this.initState();
            MoveManager.instance.addSideToPoint(this.StackOfMoney.transform.position, new Laya.Vector3(2, 0, 2), SideType.GET_Toilet, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.has(this.c_zoneId)) {
                if (LogicRoom.instance.haside(this.c_index)) {
                    this.Opened.active = true;
                    this.LockedRoot.active = false;
                    this.isOpen = true;
                }
                else {
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.c_openStep == this.openStep) {
                        this._max = this.c_moneyOpen;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Toilent, this.needCount, "qr4", "Toilet");
                    }
                }
            }
            else {
                this.Opened.active = this.LockedRoot.active = false;
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        initCabinScript() {
            for (var i = 0; i < this.cabinScripts.length; i++) {
                this.cabinScripts[i].addSideToPoint(this.c_index, i);
            }
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        initState() {
            if (!this.isOpen)
                return;
            if (!this._sideObj.clean || this._sideObj.clean.length < 3) {
                this._sideObj.clean = [0, 0, 0];
                LogicRoom.instance.setSideObj(this._sideObj);
            }
            this.updateCabins();
        }
        updateCabins() {
            let clean = this._sideObj.clean;
            for (var i = 0; i < this.cabinScripts.length; i++) {
                this.cabinScripts[i].updateState(clean[i]);
            }
        }
        get isNull() {
            return this.isOpen && this.waiteCount < 4;
        }
        getCanIntoIndex() {
            for (var i = 0; i < this.haveCustomers.length; i++) {
                if (this.haveCustomers[i] == 0) {
                    if (this._sideObj.clean[i] > 0) {
                        return i;
                    }
                }
            }
            return -1;
        }
        getNullSit() {
            for (var i = 0; i < this._sideObj.clean.length; i++) {
                if (this._sideObj.clean[i] <= 0) {
                    return i;
                }
            }
            return -1;
        }
        setIntoSitIndex(sitIndex) {
            this.haveCustomers[sitIndex] = 1;
        }
        removeIntoSitIndex(sitIndex) {
            this.haveCustomers[sitIndex] = 0;
        }
        getIntoPos(sitIndex) {
            return this.cabinScripts[sitIndex].yuanPos;
        }
        getSitPos(sitIndex) {
            return this.cabinScripts[sitIndex].sitPos;
        }
        onLaComplete(sitIndex) {
            this.haveCustomers[sitIndex] = 0;
            this._sideObj.clean[sitIndex] -= 1;
            LogicRoom.instance.setSideObj(this._sideObj);
            this.updateCabins();
        }
        getSitNull(sitIndex) {
            return this._sideObj.clean[sitIndex] <= 0;
        }
        addSitZhi(sitIndex) {
            this._sideObj.clean[sitIndex] = 3;
            LogicRoom.instance.setSideObj(this._sideObj);
            this.updateCabins();
        }
        isZhiNull() {
            if (this.isOpen == false)
                return false;
            for (var i = 0; i < this._sideObj.clean.length; i++) {
                if (this._sideObj.clean[i] <= 0) {
                    return true;
                }
            }
            return false;
        }
        addCustomerInLastWaitePos(customer) {
            this.waiteCustomer.push(customer);
            this.waiteCount++;
            this.sortWaiteCustomerPos();
        }
        removeCustomerWaite(customer) {
            let isRemove = false;
            for (var i = 0; i < this.waiteCustomer.length; i++) {
                if (customer.playerId == this.waiteCustomer[i].playerId) {
                    this.waiteCount--;
                    this.waiteCustomer.splice(i, 1);
                    isRemove = true;
                    break;
                }
            }
            if (isRemove)
                this.sortWaiteCustomerPos();
        }
        getLastWaitPos() {
            return this.WaitePoints[this.WaitePoints.length - 1].transform.position;
        }
        getFristWaitPos() {
            return this.WaitePoints[0].transform.position;
        }
        sortWaiteCustomerPos() {
            for (var i = 0; i < this.waiteCustomer.length; i++) {
                if(!this.WaitePoints[i])return;
                this.waiteCustomer[i].moveToYinshuijianWaitePos(this.WaitePoints[i].transform.position, i == 0);
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openToilet();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openToilet() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.clean = [0, 0, 0];
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        getAllMoney() {
            let d = 0;
            for (var i = this.moneyNodes.length - 1; i >= 0; i--) {
                this.moneyNodes[i].toPlayer(SceneMgr.Int.playerController.playerNode.node.transform, d * 1, new Laya.Vector3(0, 1, 0));
                d++;
            }
            this.moneyNodes = [];
        }
        addGolds(cPos) {
            cPos.y += 1.5;
            Laya.Vector3.transformCoordinate(cPos, this.matrix4x4, cPos);
            for (var i = 0; i < 5; i++) {
                let pos = this.StackOfMoney.transform.localPosition.clone();
                pos.z += Math.floor((this.moneyNodes.length % 15) % 3) * 0.65 - 0.65;
                pos.y += Math.floor(this.moneyNodes.length / 15) * 0.1 + 0.05;
                pos.x += Math.floor((this.moneyNodes.length % 15) / 3) * 0.4 - 0.75;
                let mNode = Laya.Sprite3D.instantiate(Laya.loader.getRes(RescoureData.getPrefabsUrlByName("DollarRoot")));
                mNode.transform.localPosition = cPos.clone();
                mNode.transform.localRotationEuler = new Laya.Vector3(0, 90, 0);
                let script = mNode.addComponent(PropEnergy);
                script.propType = EPropNameById$1.diamonds;
                script.toAdd2(cPos, pos);
                this.moneyNodes.push(script);
                this.node.addChild(mNode);
            }
        }
    }

    var AnimState;
    (function (AnimState) {
        AnimState["Idle"] = "Idle";
        AnimState["Run"] = "MainCharacterMaleWalking";
        AnimState["CarryingIdle"] = "CarryingIdle";
        AnimState["WalkingWithBox"] = "WalkingWithBox";
    })(AnimState || (AnimState = {}));
    class WorkerAnim extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.animator = null;
            this.fristState = AnimState.Idle;
        }
        onAwake() {
            this.animator = this.owner.addComponent(Animator);
            this.initAnim();
            this.play(this.fristState);
        }
        initAnim() {
            this.animator.addScriptPlayState(0, AnimState.Idle);
            this.animator.addScriptPlayState(0, AnimState.Run);
            this.animator.addScriptPlayState(0, AnimState.CarryingIdle);
            this.animator.addScriptPlayState(0, AnimState.WalkingWithBox);
        }
        playIdle() {
            this.play(AnimState.Idle);
        }
        playRun() {
            this.play(AnimState.Run);
        }
        playIdleBox() {
            this.play(AnimState.CarryingIdle);
        }
        playRunBox() {
            this.play(AnimState.WalkingWithBox);
        }
        play(value) {
            if (this.animator == null) {
                this.fristState = value;
                return false;
            }
            if (this.state == value)
                return false;
            this.state = value;
            this.animator.play(value);
            return true;
        }
    }
    class WorkerNode2 extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.isWork = false;
            this.loadPrefabsName = "";
            this.speed = 0;
            this.MaxCount = 0;
            this.getPos1 = null;
            this.getPos2 = null;
            this.MenPos = null;
            this.mainPathIndex = 0;
            this.transform = null;
            this.movePath = null;
            this.fristPos = null;
            this.propSp = null;
            this.character = null;
            this._anim = null;
            this.isLoaded = false;
            this.state = 1;
            this.t = 0;
            this.all = 0;
            this.props = [];
            this.toYinshuijian = null;
            this.toSwimPool = null;
            this.sitIndex = 0;
            this.isLoading = true;
        }
        onAwake() {
            this.transform = this.node.transform;
            this.propSp = new Laya.Sprite3D();
            this.propSp.transform.localPosition = new Laya.Vector3(0, 1, 0.5);
            this.node.addChild(this.propSp);
            this.movePath = this.node.addComponent(MovePath);
        }
        onStart() {
            this.fristPos = this.transform.position.clone();
            this.toWaite();
        }
        onLateUpdate() {
            if (RescoureData.isLoadPlayer && this.isLoading) {
                this.loadNode();
            }
            if (!this.isLoaded)
                return;
            if (this.state == WorkerNode2.MOVE_WAITE) {
                if (this.isWork == false)
                    return;
                this.t += Laya.timer.delta;
                if (this.t > this.all) {
                    this.t = 0;
                    this.checkTarget();
                }
            }
        }
        toWaite() {
            this.state = WorkerNode2.MOVE_WAITE;
            this.t = 0;
            this.all = 1000;
            this.playIdle();
        }
        checkTarget() {
            this.toYinshuijian = null;
            this.toSwimPool = null;
            let yinshuijian = LogicRoom.instance.getYinShuiJianZhiNull();
            let swimPool = LogicRoom.instance.getPoolNeedMaojin();
            if (swimPool) {
                this.toSwimPool = swimPool;
                this.moveToGetPoint1();
            }
            else if (yinshuijian) {
                this.toYinshuijian = yinshuijian;
                this.moveToGetPoint2();
            }
        }
        moveToGetPoint2() {
            this.state = WorkerNode2.MOVE_TO_GETPOINT;
            let path = [this.transform.position.clone()];
            path.push(this.getPos2);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToGetPoint2Complete));
            this.playRun();
        }
        onmoveToGetPoint2Complete() {
            this.state = WorkerNode2.MOVE_GET_PROP;
            if (this.props.length < this.MaxCount) {
                Laya.timer.once(1000, this, this.onGetOneProp2);
            }
            else {
                this.moveToTarget();
            }
            this.playIdle();
        }
        onGetOneProp2() {
            this.addProp(NFood.Can);
            if (this.props.length < this.MaxCount) {
                Laya.timer.once(1000, this, this.onGetOneProp2);
            }
            else {
                this.moveToTarget();
            }
        }
        moveToGetPoint1() {
            this.state = WorkerNode2.MOVE_TO_GETPOINT;
            let path = [this.transform.position.clone()];
            path.push(this.getPos1);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onmoveToGetPoint1Complete));
            this.playRun();
        }
        onmoveToGetPoint1Complete() {
            this.state = WorkerNode2.MOVE_GET_PROP;
            if (this.props.length < this.MaxCount) {
                Laya.timer.once(1000, this, this.onGetOneProp1);
            }
            else {
                this.moveToTarget();
            }
            this.playIdle();
        }
        onGetOneProp1() {
            this.addProp(NFood.Towel);
            if (this.props.length < this.MaxCount) {
                Laya.timer.once(1000, this, this.onGetOneProp1);
            }
            else {
                this.moveToTarget();
            }
        }
        addProp(type) {
            let food = new Laya.Sprite3D();
            let script = food.addComponent(PropFood);
            script.type = type;
            this.props.push(script);
            this.propSp.addChild(food);
            this.sortPorp();
        }
        getAndDelOneProp(type) {
            let prop = null;
            for (var i = this.props.length - 1; i >= 0; i--) {
                if (this.props[i].type == type) {
                    prop = this.props[i];
                    this.props.splice(i, 1);
                    this.sortPorp();
                    break;
                }
            }
            return prop;
        }
        sortPorp() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.transform.localPosition = new Laya.Vector3(0, 0.33 * i, 0);
            }
            this.playIdle();
        }
        moveToTarget() {
            this.state = WorkerNode2.MOVE_TO_TARGET;
            if (this.toYinshuijian) {
                this.moveToToilet();
            }
            else if (this.toSwimPool) {
                this.moveToSwimPool();
            }
        }
        moveToToilet() {
            let path = LogicRoom.instance.getPathList(this.mainPathIndex, this.toYinshuijian.c_mainPathIndex);
            path.unshift(this.MenPos);
            path.unshift(this.transform.position.clone());
            path.push(this.toYinshuijian.getFristWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletMenComplete));
            this.playRun();
        }
        onMoveToToiletMenComplete() {
            let sitIndex = this.toYinshuijian.getNullSit();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.moveToToiletSit();
            }
            else {
                this.findOtherNullTarget();
            }
        }
        moveToToiletSit() {
            this.state = WorkerNode2.MOVE_TO_TOILET_SIT;
            let path = [this.transform.position.clone()];
            path.push(this.toYinshuijian.getIntoPos(this.sitIndex));
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletSitComplete));
            this.playRun();
        }
        onMoveToToiletSitComplete() {
            this.state = WorkerNode2.MOVE_IN_TOILET_SIT;
            Laya.timer.once(1000, this, () => {
                let prop = this.getAndDelOneProp(NFood.Can);
                if (prop) {
                    prop.node.destroy();
                    this.toYinshuijian.addSitZhi(this.sitIndex);
                }
                if (this.props.length > 0) {
                    this.moveToToiletOtherSit();
                }
                else {
                    this.backToFristPos();
                }
            });
            this.playIdle();
        }
        moveToToiletOtherSit() {
            let sitIndex = this.toYinshuijian.getNullSit();
            if (sitIndex >= 0) {
                this.sitIndex = sitIndex;
                this.moveToToiletSit();
            }
            else {
                this.findOtherNullTarget();
            }
        }
        findOtherNullTarget() {
            let yinshuijian = LogicRoom.instance.getYinShuiJianZhiNull();
            if (yinshuijian) {
                let curPathIndex = this.toYinshuijian.c_mainPathIndex;
                this.toYinshuijian = yinshuijian;
                this.moveToOtherTarget(curPathIndex);
            }
            else {
                this.backToFristPos();
            }
        }
        moveToOtherTarget(curPathIndex) {
            this.state = WorkerNode2.MOVE_TO_TARGET;
            let path = LogicRoom.instance.getPathList(curPathIndex, this.toYinshuijian.c_mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.toYinshuijian.getFristWaitPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onMoveToToiletMenComplete));
            this.playRun();
        }
        backToFristPos() {
            this.state = WorkerNode2.BACK_TO_FRIST;
            let path = LogicRoom.instance.getPathList(this.toYinshuijian.c_mainPathIndex, this.mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.MenPos);
            path.push(this.fristPos);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onBackFristComplte));
            this.playRun();
        }
        moveToSwimPool() {
            let path = LogicRoom.instance.getPathList(this.mainPathIndex, this.toSwimPool.c_mainPathIndex);
            path.unshift(this.MenPos);
            path.unshift(this.transform.position.clone());
            path.push(this.toSwimPool.getMaojinPos());
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.moveToSwimPoolComplete));
            this.playRun();
        }
        moveToSwimPoolComplete() {
            this.state = WorkerNode2.MOVE_PUT_MAOJIN;
            this.putOneMaojin();
        }
        putOneMaojin() {
            if (this.toSwimPool.isNeedMaojin()) {
                let prop = this.getAndDelOneProp(NFood.Towel);
                if (prop) {
                    prop.node.destroy();
                    this.toSwimPool.addMaojin();
                    Laya.timer.once(500, this, this.putOneMaojin);
                }
                else {
                    this.backToFristPos2();
                }
            }
            else {
                this.backToFristPos2();
            }
        }
        backToFristPos2() {
            this.state = WorkerNode2.BACK_TO_FRIST;
            let path = LogicRoom.instance.getPathList(this.toSwimPool.c_mainPathIndex, this.mainPathIndex);
            path.unshift(this.transform.position.clone());
            path.push(this.MenPos);
            path.push(this.fristPos);
            this.movePath.movePath(path, this.speed, Laya.Handler.create(this, this.onBackFristComplte));
            this.playRun();
        }
        onBackFristComplte() {
            this.clearFoods();
            this.toWaite();
        }
        clearFoods() {
            for (var i = 0; i < this.props.length; i++) {
                this.props[i].node.destroy();
            }
            this.props = [];
        }
        get isHas() {
            return this.props.length > 0;
        }
        changeChar() {
            this.isLoading = true;
        }
        loadNode() {
            this.isLoading = false;
            ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName(this.loadPrefabsName), (node) => {
                if (node) {
                    if (this.character) {
                        this.character.destroy();
                        this.character = null;
                    }
                    this.character = Laya.Sprite3D.instantiate(node);
                    this.character.transform.localPosition = new Laya.Vector3(0, 0, 0);
                    this._anim = this.character.addComponent(WorkerAnim);
                    this.node.addChild(this.character);
                    this.isLoaded = true;
                }
            });
        }
        playIdle() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playIdleBox();
                }
                else {
                    this._anim.playIdle();
                }
            }
        }
        playRun() {
            if (this._anim) {
                if (this.isHas) {
                    this._anim.playRunBox();
                }
                else {
                    this._anim.playRun();
                }
            }
        }
    }
    WorkerNode2.MOVE_NULL = 0;
    WorkerNode2.MOVE_WAITE = 1;
    WorkerNode2.MOVE_TO_GETPOINT = 2;
    WorkerNode2.MOVE_GET_PROP = 3;
    WorkerNode2.MOVE_TO_TARGET = 4;
    WorkerNode2.MOVE_TO_TOILET_SIT = 5;
    WorkerNode2.MOVE_IN_TOILET_SIT = 6;
    WorkerNode2.BACK_TO_FRIST = 7;
    WorkerNode2.MOVE_PUT_MAOJIN = 8;

    class ZaWujian extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedRoot = null;
            this.GetPoint1 = null;
            this.GetPoint2 = null;
            this.workerPos = null;
            this.MenPos = null;
            this.UpgradeBorder = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this.workerNode = null;
            this.moneyType = 1;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.GetPoint1 = this.findNodeByPath("Opened/GetPoint_1");
            this.GetPoint2 = this.findNodeByPath("Opened/GetPoint_2");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.UpgradeBorder = this.findNodeByPath("UpgradeBorder");
            this.workerPos = this.findNodeByPath("Opened/workerPos");
            this.MenPos = this.findNodeByPath("Opened/MenPos");
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.changePlayer();
            MoveManager.instance.addSideToPoint(this.GetPoint1.transform.position, new Laya.Vector3(1, 0, 1), SideType.GET_Maojing, this.c_index);
            MoveManager.instance.addSideToPoint(this.GetPoint2.transform.position, new Laya.Vector3(1, 0, 1), SideType.GET_Yingliao, this.c_index);
        }
        onChangeSideShow() {
            if (LogicRoom.instance.haside(this.c_index)) {
                this.Opened.active = true;
                this.LockedRoot.active = false;
                this.isOpen = true;
            }
            else {
                this.Opened.active = false;
                this.LockedRoot.active = true;
                if (this.c_openStep == this.openStep) {
                    this._max = this.c_moneyOpen;
                    this.moneyType = 1;
                    this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Storage, this.needCount, "894", "NeaAreaIcon");
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        changePlayer() {
            if (!this.isOpen)
                return;
            let prefabsName = this.getPlayerName();
            this.initCleaner(prefabsName);
            if (this._sideObj.level < 4) {
                this.isCanBuy = true;
                this._max = this.getUpgradeMaxGold();
                this.moneyType = 2;
                if (this._sideObj.level < 1) {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "897", "WorkerIcon");
                }
                else {
                    this.createPrice(this.UpgradeBorder, this.c_index, SideType.Upgrade_WORKER, this.needCount, "hi", "WorkerSpeedIcon");
                }
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            if (this.moneyType == 1) {
                this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
            }
            else {
                this.createGold(count, fromPos, this.UpgradeBorder.transform.localPosition, Laya.Handler.create(this, this.onAddUpgradeComplete));
            }
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openStorage();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        onAddUpgradeComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.upgradeWroker();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openStorage() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            this._sideObj.level = 0;
            this._sideObj.money = this.preCount = this.cCount = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.updateOpenStep();
            this.changePlayer();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
        }
        upgradeWroker() {
            this.destoryPrice();
            this._sideObj.level += 1;
            this._sideObj.money = this.preCount = this.cCount = 0;
            this.changePlayer();
            this.changeCleaner();
            AudioMgr$1.instance.play_sound(13);
        }
        initCleaner(loadPrefabsName) {
            if (this.workerNode)
                return;
            let sp = new Laya.Sprite3D();
            sp.name = "Worker2";
            sp.transform.localPosition = this.workerPos.transform.localPosition.clone();
            sp.transform.localRotationEuler = this.workerPos.transform.localRotationEuler.clone();
            this.workerNode = sp.addComponent(WorkerNode2);
            this.workerNode.isWork = this._sideObj.level > 0;
            this.workerNode.mainPathIndex = this.c_mainPathIndex;
            this.workerNode.loadPrefabsName = loadPrefabsName;
            this.workerNode.speed = this.getPlayerSpeed();
            this.workerNode.MaxCount = this.getZhiCount();
            this.workerNode.getPos1 = this.GetPoint1.transform.position.clone();
            this.workerNode.getPos2 = this.GetPoint2.transform.position.clone();
            this.workerNode.MenPos = this.MenPos.transform.position.clone();
            this.node.addChild(sp);
        }
        changeCleaner() {
            if (this.workerNode) {
                this.workerNode.isWork = this._sideObj.level > 0;
                this.workerNode.loadPrefabsName = this.getPlayerName();
                this.workerNode.speed = this.getPlayerSpeed();
                this.workerNode.MaxCount = this.getZhiCount();
                this.workerNode.changeChar();
            }
        }
        getUpgradeMaxGold() {
            switch (this._sideObj.level) {
                case 0:
                    return this.c_moneyLvs[0];
                case 1:
                    return this.c_moneyLvs[1];
                case 2:
                    return this.c_moneyLvs[2];
                case 3:
                    return this.c_moneyLvs[3];
            }
        }
        getPlayerName() {
            if (this._sideObj.level == 0) {
                return "CharacterWorker1";
            }
            else if (this._sideObj.level == 1) {
                return "CharacterWorker1";
            }
            else if (this._sideObj.level == 2) {
                return "CharacterWorker2";
            }
            else if (this._sideObj.level == 3) {
                return "CharacterWorker3";
            }
            else if (this._sideObj.level == 4) {
                return "CharacterWorker4";
            }
        }
        getPlayerSpeed() {
            if (this._sideObj.level == 0) {
                return 100;
            }
            else if (this._sideObj.level == 1) {
                return 100;
            }
            else if (this._sideObj.level == 2) {
                return 110;
            }
            else if (this._sideObj.level == 3) {
                return 120;
            }
            else if (this._sideObj.level == 4) {
                return 130;
            }
        }
        getZhiCount() {
            if (this._sideObj.level == 0) {
                return 1;
            }
            else if (this._sideObj.level == 1) {
                return 1;
            }
            else if (this._sideObj.level == 2) {
                return 2;
            }
            else if (this._sideObj.level == 3) {
                return 3;
            }
            else if (this._sideObj.level == 4) {
                return 4;
            }
        }
    }

    class Zone extends Aside {
        constructor() {
            super(...arguments);
            this.Opened = null;
            this.PriceBorder = null;
            this.LockedZone = null;
            this.LockedRoot = null;
            this.PropPoss = [];
            this.tree = null;
            this.matrix4x4 = null;
            this.isOpen = false;
            this._isCanOpen = false;
        }
        onAwake() {
            super.onAwake();
            this.Opened = this.findNodeByPath("Opened");
            this.PriceBorder = this.findNodeByPath("PriceBorder");
            this.LockedZone = this.findNodeByPath("LockedZone");
            this.LockedRoot = this.findNodeByPath("LockedRoot");
            this.tree = this.findNodeByPath("tree");
            let Props = this.findNodeByPath("Opened/Props");
            for (var i = 0; i < Props.numChildren; i++) {
                this.PropPoss.push(Props.getChildAt(i));
            }
            this.matrix4x4 = new Laya.Matrix4x4();
            this.node.transform.worldMatrix.invert(this.matrix4x4);
            EventMgr.Int.on(EventType.StarChange, this.updatePorpCount, this);
        }
        onDestroy() {
            super.onDestroy();
            EventMgr.Int.on(EventType.StarChange, this.updatePorpCount, this);
        }
        onStart() {
            super.onStart();
            this.onChangeSideShow();
            this.addPorpPosList();
        }
        onChangeSideShow() {
            if (LogicRoom.instance.haside(this.c_index)) {
                this.Opened.active = true;
                this.LockedRoot.active = false;
                if (this.tree)
                    this.tree.active = false;
                this.isOpen = true;
            }
            else {
                if (LogicRoom.instance.haside(this.c_showForIndex)) {
                    this.Opened.active = false;
                    this.LockedRoot.active = true;
                    if (this.tree)
                        this.tree.active = true;
                    if (this.c_openStep == this.openStep && LogicRoom.instance.star >= this.c_needStar) {
                        this.destoryStar();
                        this._isCanOpen = true;
                        this._max = this.c_moneyOpen;
                        this.createPrice(this.PriceBorder, this.c_index, SideType.Open_Zone, this.needCount, "12", "NeaAreaIcon");
                    }
                    else {
                        this.createStar(this.LockedZone, LogicRoom.instance.star, this.c_needStar);
                    }
                }
                else {
                    this.Opened.active = false;
                    this.LockedRoot.active = this.c_isShowLockRoot;
                    if (this.tree)
                        this.tree.active = true;
                }
            }
        }
        updatePorpCount() {
            if (this.starScript) {
                this.starScript.changeStar(LogicRoom.instance.star);
                if (LogicRoom.instance.star >= this.c_needStar) {
                    this.onChangeSideShow();
                }
            }
        }
        get isOpening() {
            return this.isOpen;
        }
        get isCanOpen() {
            return this._isCanOpen;
        }
        moveCameraForOpen() {
            SceneMgr.Int.playerController.MoveCamerToLookPos(this.PriceBorder.transform.position);
        }
        addPorpPosList() {
            for (var i = 0; i < this.PropPoss.length; i++) {
                this.PropPoss[i].name = this.c_zoneId + "";
                LogicRoom.instance.propPosList.push(this.PropPoss[i]);
            }
        }
        showEnergy() {
            if (this.priceScript)
                this.priceScript.showMoneys(this.needCount);
        }
        get GuessPos() {
            return this.PriceBorder.transform.position;
        }
        addMoney(fromPos, count) {
            Laya.Vector3.transformCoordinate(fromPos, this.matrix4x4, fromPos);
            this.preCount += count;
            if (this.preCount >= this.max) {
                this.isCanBuy = false;
            }
            this.createGold(count, fromPos, this.PriceBorder.transform.localPosition, Laya.Handler.create(this, this.onAddEnergyComplete));
        }
        onAddEnergyComplete(count) {
            this.cCount += count;
            if (this.cCount >= this.max) {
                this.openZone();
            }
            else {
                this.showEnergy();
            }
            this.saveSideObj();
            LogicRoom.instance.setSideObj(this._sideObj);
        }
        openZone() {
            this.destoryPrice();
            this.Opened.active = true;
            this.LockedRoot.active = false;
            this.isOpen = true;
            this._sideObj.openStep = 0;
            LogicRoom.instance.openSide(this.c_index, false);
            LogicRoom.instance.openZone(this.c_zoneId, true);
            LogicRoom.instance.updateOpenStep();
            this.addOpenStar();
            AudioMgr$1.instance.play_sound(14);
            if (this.c_zoneId == 1)
                GameSDK.sendEvent("解锁区域" + this.c_zoneId);
        }
    }

    class NodeType extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.isLoad = false;
        }
        onAwake() {
        }
        onLateUpdate() {
            if (!this.isLoad) {
                this.onLoadNode();
            }
        }
        onLoadNode() {
            let data = this.getComData();
            switch (data.type) {
                case NType.AStar:
                    this.isLoad = true;
                    let noroad = this.node.addComponent(AStarNoRoad);
                    noroad.setComData(data);
                    break;
                default:
                    this.loadNode();
                    break;
            }
        }
        loadNode() {
            let path = RescoureData.getPrefabsUrlByName(this.getNodeURLName());
            if (path != "") {
                this.isLoad = true;
                ResourcesMgr$1.instance.load(path, this.onLoadHandler.bind(this));
            }
        }
        onLoadHandler(n) {
            let nodes = Laya.Sprite3D.instantiate(n);
            nodes.transform.localPosition = new Laya.Vector3(0, 0, 0);
            this.node.addChild(nodes);
            ComMgr.bindNode(nodes, SceneMgr.Int.ComData);
            this.onNodeAddCom(nodes);
        }
        onNodeAddCom(nodes) {
            let data = this.getComData();
            switch (data.type) {
                case NType.Room_down:
                case NType.Room_right:
                case NType.Room_left:
                case NType.Room_Big:
                    let s0 = nodes.addComponent(RoomSmall);
                    s0.setComData(data);
                    break;
                case NType.Zone_1_1:
                case NType.Zone_1_2:
                case NType.Zone_1_3:
                case NType.Zone_2_1:
                case NType.Zone_2_2:
                case NType.Zone_2_3:
                case NType.Zone_2_4:
                case NType.Zone_2_5:
                case NType.Zone_2_6:
                case NType.Zone_2_7:
                case NType.Zone_2_8:
                    let s1 = nodes.addComponent(Zone);
                    s1.setComData(data);
                    break;
                case NType.ToiletSmall_down:
                case NType.ToiletSmall_left:
                case NType.ToiletSmall_right:
                    let s2 = nodes.addComponent(ToiletSmall);
                    s2.setComData(data);
                    break;
                case NType.CleanerBase:
                    let s3 = nodes.addComponent(CleanerBase);
                    s3.setComData(data);
                    break;
                case NType.Storage:
                    let s4 = nodes.addComponent(Storage);
                    s4.setComData(data);
                    break;
                case NType.PlayerUpgrade:
                case NType.renwushengji_2:
                    let s5 = nodes.addComponent(PlayerUpgrade);
                    s5.setComData(data);
                    break;
                case NType.TrashBin:
                    let s6 = nodes.addComponent(TrashBin);
                    s6.setComData(data);
                    break;
                case NType.LobbyDesk01:
                    let s7 = nodes.addComponent(LobbyDesk01);
                    s7.setComData(data);
                    break;
                case NType.Parking:
                    let s8 = nodes.addComponent(Parking);
                    s8.setComData(data);
                    break;
                case NType.Elevator:
                    let s9 = nodes.addComponent(Elevator);
                    s9.setComData(data);
                    break;
                case NType.zawujian_2:
                    let s10 = nodes.addComponent(ZaWujian);
                    s10.setComData(data);
                    break;
                case NType.SwimmingPool:
                    let s11 = nodes.addComponent(SwimmingPool);
                    s11.setComData(data);
                    break;
                case NType.Restaurant:
                    let s12 = nodes.addComponent(Restaurant);
                    s12.setComData(data);
                    break;
                case NType.yinshuiji:
                    let s13 = nodes.addComponent(YinShuiJian);
                    s13.setComData(data);
                    break;
            }
        }
        getNodeURLName() {
            let data = this.getComData();
            let name = "";
            switch (data.type) {
                case NType.LobbyDesk01:
                    name = "LobbyDesk01";
                    break;
                case NType.Storage:
                    name = "Storage";
                    break;
                case NType.Parking:
                    name = "Parking";
                    break;
                case NType.PlayerUpgrade:
                    name = "PlayerUpgrade";
                    break;
                case NType.Elevator:
                    name = "Elevator";
                    break;
                case NType.TrashBin:
                    name = "TrashBin";
                    break;
                case NType.CleanerBase:
                    name = "CleanerBase";
                    break;
                case NType.Room_left:
                    name = "Room_left";
                    break;
                case NType.Room_right:
                    name = "Room_right";
                    break;
                case NType.Room_down:
                    name = "Room_down";
                    break;
                case NType.ToiletSmall_left:
                    name = "ToiletSmall_Left";
                    break;
                case NType.ToiletSmall_right:
                    name = "ToiletSmall_right";
                    break;
                case NType.ToiletSmall_down:
                    name = "ToiletSmall_down";
                    break;
                case NType.Zone_1_1:
                    name = "Zone_1_1";
                    break;
                case NType.Zone_1_2:
                    name = "Zone_1_2";
                    break;
                case NType.Zone_1_3:
                    name = "Zone_1_3";
                    break;
                case NType.Zone_2_1:
                    name = "Zone_2_1";
                    break;
                case NType.Zone_2_2:
                    name = "Zone_2_2";
                    break;
                case NType.Zone_2_3:
                    name = "Zone_2_3";
                    break;
                case NType.Zone_2_4:
                    name = "Zone_2_4";
                    break;
                case NType.Zone_2_5:
                    name = "Zone_2_5";
                    break;
                case NType.Zone_2_6:
                    name = "Zone_2_6";
                    break;
                case NType.Zone_2_7:
                    name = "Zone_2_7";
                    break;
                case NType.Zone_2_8:
                    name = "Zone_2_8";
                    break;
                case NType.Room_Big:
                    name = "Room_Big";
                    break;
                case NType.SwimmingPool:
                    name = "SwimmingPool";
                    break;
                case NType.Restaurant:
                    name = "Restaurant";
                    break;
                case NType.zawujian_2:
                    name = "zawujian_2";
                    break;
                case NType.renwushengji_2:
                    name = "renwushengji_2";
                    break;
                case NType.yinshuiji:
                    name = "Walls";
                    break;
            }
            return name;
        }
    }
    NodeType.loadEnemyDelay = 10;

    class ComMgr {
        static registCompent() {
            this.registCompentWithName("ColliderType", Collider);
            this.registCompentWithName("NodeType", NodeType);
        }
        static registCompentWithName(name, clas) {
            this._name2Compent[name] = clas;
            return ComMgr;
        }
        static getClassByName(name) {
            return this._name2Compent[name];
        }
        static addCompentToNode(root, nodePath, compentName, compentData) {
            let obj = null;
            if (root) {
                var node = findNodeByPathNoRoot(root, nodePath, "addCompentToNode");
                if (node == null) {
                    console.error("CompentManager.addCompentToNode not found:", nodePath, compentName, compentData);
                    return;
                }
                if (compentName == "Item") {
                    compentName = compentData.itemName;
                }
                let compent = this._name2Compent[compentName];
                if (compent) {
                    obj = node.addComponent(compent);
                }
                else {
                    console.error("ComMgr:", compentName);
                }
            }
            if (obj) {
                obj.setComData(compentData);
                return obj;
            }
        }
        static bindNode(root, info) {
            info = info[root.name];
            if (info == undefined) {
                return;
            }
            for (var comName in info) {
                var cls = this._name2Compent[comName];
                if (cls == undefined) {
                    continue;
                }
                this.bindCompentLists(root, info[comName], cls);
            }
        }
        static bindCompentLists(root, lists, cls) {
            for (var pathKey in lists) {
                var node = this.getIndexObject(root, pathKey, 1);
                if (node != undefined && node.getComponent(cls) == undefined) {
                    var commpete = node.addComponent(cls);
                    commpete.setComData(lists[pathKey]);
                }
            }
        }
        static getIndexObject(root, path, index = 0) {
            var paths = path.split("/");
            for (var i = index; i < paths.length; i++) {
                root = root.getChildAt(parseInt(paths[i]));
                if (root == undefined) {
                    return undefined;
                }
            }
            return root;
        }
        static getNameObject(root, path, index = 0) {
            var paths = path.split("/");
            for (var i = index; i < paths.length; i++) {
                root = root.getChildByName(paths[i]);
                if (root == undefined) {
                    return undefined;
                }
            }
            return root;
        }
        static crateVec3(data, pos = undefined) {
            if (pos == undefined) {
                pos = new Laya.Vector3();
            }
            pos.x = -1 * data.x;
            pos.y = data.y;
            pos.z = data.z;
            return pos;
        }
    }
    ComMgr._name2Compent = {};

    class CameraFollow extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._changeState = 0;
            this._followQuaternion = null;
            this._transform = null;
            this.frist_pos = new Laya.Vector3(-0.88, 6.77, -11.56);
            this.frist_rot = new Laya.Quaternion(0.00523523, 0.9921276, 0.1169783, -0.04440152);
            this.run_pos = new Laya.Vector3(-2.5, 6.76, -11.41);
            this.run_rot = new Laya.Quaternion(0.00523523, 0.9921276, 0.1169783, -0.04440152);
            this.end_pos = new Laya.Vector3(0, 6.43, -17.02);
            this.end_rot = new Laya.Quaternion(0, 0.9931207, 0.1170954, 0);
            this.isMove = false;
            this.t = 0;
            this.all = 60;
            this.beginPos = null;
            this.endPos = null;
            this.beginRot = null;
            this.endRot = null;
            this.out1 = new Laya.Vector3();
            this.out2 = new Laya.Quaternion();
            this.callback = null;
            this.isMove2 = false;
            this.speed = 10;
            this.allTime = [];
            this.pathPoss = null;
            this.index = 0;
        }
        onAwake() {
            this._transform = this.node.transform;
            this._camera = this.node.getChildByName("MainCamera");
        }
        set changeState(value) {
            this._changeState = value;
        }
        onSetPosition(position, rotation = null) {
            this._followPosition = null;
            this._followRotation = null;
            this._position = position;
            this._rotation = rotation;
            if (this._position)
                this.node.transform.position = this._position;
            if (this._rotation)
                this.node.transform.rotationEuler = this._rotation;
            this._changeState = 1;
        }
        onFollowPosition(position = null, rotation = null) {
            this._changeState = 2;
            if (position) {
                if (this._position && Laya.Vector3.equals(this._position, position)) {
                    this.node.transform.position = position;
                    this._followPosition = null;
                }
                else {
                    this._followPosition = position;
                }
            }
            else {
                this._followPosition = null;
            }
            if (rotation) {
                if (this._rotation && Laya.Vector3.equals(this._rotation, rotation)) {
                    this.node.transform.rotationEuler = rotation;
                    this._followRotation = null;
                }
                else {
                    this._followRotation = rotation;
                }
                this._followQuaternion = null;
                this._quaternion = null;
            }
            else {
                this._followRotation = null;
                this._followQuaternion = null;
                this._quaternion = null;
            }
        }
        onFollowPosition2(position = null, rotation = null) {
            this._changeState = 2;
            if (position) {
                if (this._position && Laya.Vector3.equals(this._position, position)) {
                    this.node.transform.position = position;
                    this._followPosition = null;
                }
                else {
                    this._followPosition = position;
                }
            }
            else {
                this._followPosition = null;
            }
            if (rotation) {
                this._followQuaternion = rotation;
                this._rotation = null;
                this._followRotation = null;
            }
            else {
                this._followQuaternion = null;
                this._rotation = null;
                this._followRotation = null;
            }
        }
        onUpdate() {
            if (this._changeState == 1) ;
            else if (this._changeState == 2) {
                if (this._followPosition) {
                    this._position = this.node.transform.position;
                    Laya.Vector3.lerp(this._position, this._followPosition, 0.1, this._position);
                }
                if (this._position)
                    this.node.transform.position = this._position;
                if (this._followRotation) {
                    this._rotation = this.node.transform.rotationEuler;
                    Laya.Vector3.lerp(this._rotation, this._followRotation, 0.1, this._rotation);
                }
                if (this._rotation)
                    this.node.transform.rotationEuler = this._rotation;
                if (this._followQuaternion) {
                    this._quaternion = this.node.transform.rotation;
                    Laya.Quaternion.lerp(this._quaternion, this._followQuaternion, 0.035, this._quaternion);
                }
                if (this._quaternion)
                    this.node.transform.rotation = this._quaternion;
            }
            if (this.isMove) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.beginPos, this.endPos, this.t / this.all, this.out1);
                    Laya.Quaternion.lerp(this.beginRot, this.endRot, this.t / this.all, this.out2);
                    this._camera.transform.localPosition = this.out1;
                    this._camera.transform.rotation = this.out2;
                }
                else {
                    this.isMove = false;
                }
                this.t++;
            }
            if (this.isMove2) {
                if (this.t <= this.all) {
                    Laya.Vector3.lerp(this.beginPos, this.endPos, this.t / this.all, this.out1);
                    Laya.Quaternion.lerp(this.beginRot, this.endRot, this.t / this.all, this.out2);
                    this._transform.localPosition = this.out1;
                    this._transform.rotation = this.out2;
                }
                else {
                    this.moveToNode();
                }
                this.t++;
            }
        }
        get camera() {
            return this._camera;
        }
        setFrist() {
            this._camera.transform.localPosition = this.run_pos.clone();
            this._camera.transform.rotation = this.run_rot.clone();
        }
        moveToRun() {
        }
        moveToEnd() {
            this.beginPos = this.run_pos;
            this.endPos = this.end_pos;
            this.beginRot = this.run_rot;
            this.endRot = this.end_rot;
            this.t = 0;
            this.isMove = true;
        }
        moveCameraPath(paths, callback, speed = 10, allTime = []) {
            this._changeState = 1;
            this.index = 0;
            this.pathPoss = paths;
            this.callback = callback;
            this.speed = speed;
            this.allTime = allTime;
            this.moveToNode();
        }
        gotoCameraPos(position, rotation) {
            this._transform.localPosition = position.clone();
            this._transform.rotation = rotation.clone();
        }
        moveToNode() {
            if (this.index < this.pathPoss.length) {
                this.beginPos = this._transform.position.clone();
                this.beginRot = this._transform.rotation.clone();
                this.endPos = this.pathPoss[this.index].transform.position.clone();
                this.endRot = this.pathPoss[this.index].transform.rotation.clone();
                this.t = 0;
                if (this.allTime.length > 0) {
                    this.all = this.allTime[this.index];
                }
                else {
                    this.all = Math.max(1, Math.ceil(Laya.Vector3.distance(this.beginPos, this.endPos) * this.speed));
                }
                this.isMove2 = true;
                this.index++;
            }
            else {
                this.isMove2 = false;
                if (this.callback) {
                    this.callback.run();
                }
            }
        }
    }

    class PropEffectDel extends BaseScript3D {
        constructor() {
            super(...arguments);
            this._time = 0;
            this.max = 120;
        }
        onUpdate() {
            this._time++;
            if (this._time >= this.max) {
                this.node.destroy();
            }
        }
    }

    class SubPackageMgr {
        static enable(callback = null) {
            Laya.loader.create("subPackConfig.json", Laya.Handler.create(this, this._onInfoLoaded, [callback]), null, Laya.Loader.JSON);
        }
        static _onInfoLoaded(callback, data) {
            if (data != undefined) {
                this.platMgrConfig = data;
            }
            callback && callback.run();
        }
        static perLoadMainPack(handler) {
            let list = [1];
            this.loadPackByphase(list, Laya.Handler.create(this, () => {
                GameSDK.initConfig(() => {
                    handler.run();
                });
            }));
        }
        static LoadSoundPark(handler) {
            this.loadPackByphase([2], Laya.Handler.create(this, () => {
                handler.run();
            }));
        }
        static LoadParkList(list, handler) {
            this.loadPackByphase(list, Laya.Handler.create(this, () => {
                RescoureData.LoadedIDS = RescoureData.LoadedIDS.concat(list);
                handler.run();
            }));
        }
        static LoadParks(id, handler) {
            this.loadPackByphase([id], Laya.Handler.create(this, () => {
                RescoureData.LoadedIDS.push(id);
                handler.run();
            }));
        }
        static loadPackByphase(phase, handler) {
            var data = [];
            for (var i = 0; i < phase.length; i++) {
                let d = this.platMgrConfig[phase[i]];
                if (d == undefined) {
                    handler.run();
                    return;
                }
                for (var j = 0; j < d.length; j++) {
                    data.push(d[j]);
                }
            }
            this.loadSubPack(data, handler);
        }
        static loadSubPack(paths, handler) {
            if (paths.length <= 0) {
                handler.run();
                return;
            }
            if (!!window["wx"]) {
                let count = paths.length;
                for (let config of paths) {
                    GameSDK.loadSubpackage(config.packName, config.zipPath, config.filePath, function () {
                        count--;
                        if (count <= 0) {
                            handler.run();
                        }
                    }, undefined);
                }
            }
            else {
                let config = paths.shift();
                if (this._loadPacks.indexOf(config.packName) >= 0) {
                    SubPackageMgr.loadSubPack(paths, handler);
                }
                else {
                    GameSDK.loadSubpackage(config.packName, config.zipPath, config.filePath, function () {
                        SubPackageMgr.loadSubPack(paths, handler);
                        SubPackageMgr._loadPacks.push(config.packName);
                    }, undefined);
                }
            }
        }
    }
    SubPackageMgr.platMgrConfig = {};
    SubPackageMgr._loadPacks = [];

    class TimeData {
        constructor(max) {
            this._isRun = false;
            this._step = 0;
            this._completeCB = null;
            this.max = 0;
            this.time = 0;
            this.max = max;
        }
        get isRun() {
            return this._isRun;
        }
        startTime(callback) {
            this.stopTime();
            this.time = this.max;
            this._completeCB = callback;
            this._isRun = true;
            Laya.timer.once(this.time, this, this.onComplete);
        }
        LoopTime(callback, step = 1000) {
            this.stopTime();
            this.time = this.max;
            this._step = step;
            this._completeCB = callback;
            this._isRun = true;
            Laya.timer.loop(this._step, this, this.onLoop);
        }
        stopTime() {
            this._isRun = false;
            Laya.timer.clear(this, this.onComplete);
            Laya.timer.clear(this, this.onLoop);
        }
        stopTimeCallback() {
            this.stopTime();
            this.onComplete();
        }
        onComplete() {
            this._isRun = false;
            if (this._completeCB) {
                this._completeCB.run();
            }
        }
        onLoop() {
            this.time -= this._step;
            if (this.time <= 0) {
                Laya.timer.clear(this, this.onLoop);
                this.onComplete();
            }
        }
    }

    class PlayerData {
        constructor() {
            this._bagTime = null;
            this._moneyTime = null;
            this.bag = 0;
            this.level = 0;
            this.speed = 0;
            this.propBagMax = null;
            this.tasks = [];
            this.allEnergy = 0;
            this._bagTime = new TimeData(PlayerData.FLY_TIME);
            this._moneyTime = new TimeData(PlayerData.MONEY_TIME);
        }
        resetData() {
            this.level = LogicData.instance.level;
            this.bag = LogicData.instance.bag;
            this.speed = LogicData.instance.speed;
            if (SceneMgr.Int.playerController) {
                SceneMgr.Int.playerController.changePlayerData();
            }
        }
        setFlowBagMax(bagmax) {
            this.propBagMax = bagmax;
        }
        checkBag(count) {
            if (!this.propBagMax)
                return;
            if (count >= this.bag && this.isBag == false) {
                this.propBagMax.showMax();
                return true;
            }
            else {
                this.propBagMax.hideMax();
                return false;
            }
        }
        start_Bag(callback) {
            this._bagTime.LoopTime(callback);
        }
        get isBag() {
            return this._bagTime.isRun;
        }
        start_Money(callback) {
            this._moneyTime.LoopTime(callback);
        }
        get isMoney() {
            return this._moneyTime.isRun;
        }
        start_Task(callBack) {
        }
        addFootForTask(foodType) {
        }
        get bagTime() {
            return this._bagTime;
        }
        get MoneyTime() {
            return this._moneyTime;
        }
    }
    PlayerData.TYPE_PLAYER = 1;
    PlayerData.TYPE_SHIP = 2;
    PlayerData.TYPE_SUBMARINE = 3;
    PlayerData.FLY_TIME = 5 * 60 * 1000;
    PlayerData.MONEY_TIME = 5 * 60 * 1000;
    PlayerData.MAXANGLE_TIME = 60 * 1000;
    PlayerData.BLACK_TIME = 2 * 60 * 1000;
    PlayerData.YANGQI_TIME = 60 * 1000;
    PlayerData.TASK_TIME = 5 * 60 * 1000;

    class PathNode {
        constructor() {
            this.index = 0;
            this.pNode = null;
            this.node = null;
        }
    }

    class RoomScript extends BaseScript3D {
        constructor() {
            super(...arguments);
            this.pathDic = new Dictionary();
        }
        onAwake() {
            let mainPath = this.findNodeByPath("mainPath");
            RoomSearcher.instance.initRoomTester(null);
            this.initMainPath(mainPath);
            LogicRoom.instance.pathDic = this.pathDic;
        }
        initMainPath(mainPath) {
            for (var i = 0; i < mainPath.numChildren; i++) {
                let point = mainPath.getChildAt(i);
                if (point.name.charAt(0) == "p") {
                    let prev = Number(point.name.split("_")[1]);
                    let index = Number(point.name.split("_")[2]);
                    let pathNode = new PathNode();
                    pathNode.index = index;
                    pathNode.node = point;
                    if (prev > 0) {
                        pathNode.pNode = this.pathDic.getValue(prev);
                    }
                    this.pathDic.setValue(index, pathNode);
                }
                if (point.numChildren > 1) {
                    this.initMainPath(point);
                }
            }
        }
    }

    class SceneMgr {
        constructor() {
            this._scene = null;
            this._roomId = 0;
            this._isLoading = false;
            this._cb = null;
            this._isNight = false;
            this._directionLight = null;
            this._MainCamera = null;
            this.playerData = null;
            this.time = 0;
            this.stat = 0;
            this.seven_count = 0;
            this.isLoadPark = false;
            this.isLoadPrefab = false;
            this.fogs = [
                { color: new Laya.Vector3(47 / 255, 185 / 255, 255 / 255), size: new Laya.Vector2(5, 70) }
            ];
            this._configHandler = null;
            this.heiSprite = null;
            this.clickSprite = null;
            this.rewradCount = 1;
            this.beginScore = 0;
            this.isWin = false;
            this.isGetTuzi = false;
            this.score = 0;
            this.info = null;
            this.isStart = false;
            this._isGameOver = false;
            this._comboCount = 0;
            this._lastComboTime = 0;
        }
        loadScene(cb, progress) {
            this._cb = cb;
            this._roomId = LogicData.instance.roomId;
            let urls = [
                RescoureData.MAIN_SCENE,
                RescoureData.PERFABS_DATA
            ];
            if (this._scene == null) {
                ResourcesMgr$1.instance.loadDir(urls, () => {
                    this.onLoadSceneCompleteHandler(ResourcesMgr$1.instance.get(RescoureData.MAIN_SCENE));
                }, progress, true);
            }
            else {
                this.refeshGameHandler();
            }
        }
        startLoadTime() {
            this.time = this.stat = new Date().getTime();
            console.log("Load time == begin ======================> ");
        }
        showLoadTime(name) {
            let t = new Date().getTime();
            console.log("Load time == " + name + " ======================> jiange: " + (t - SceneMgr.Int.time) + " , all: " + (t - SceneMgr.Int.stat));
            SceneMgr.Int.time = t;
        }
        getLevel() {
            let maxCount = GameData.getConfigDataItem("MaxLevel");
            let remove = GameData.getConfigDataItem("RandomLevelExclude");
            let currentLevel = LogicData.instance.level;
            if (currentLevel > maxCount) {
                currentLevel = this.randomLevel(maxCount, remove);
                if (this.seven_count >= 3) {
                    currentLevel = 7;
                    this.seven_count = 0;
                }
            }
            this.seven_count++;
            return currentLevel;
        }
        randomLevel(max, remove) {
            var arr = [];
            for (var i = 1; i <= max; i++) {
                if (i != remove) {
                    arr.push(i);
                }
            }
            return arr[Math.floor(Math.random() * arr.length)];
        }
        onLoadSceneCompleteHandler(scene) {
            this._scene = scene;
            Laya.stage.addChildAt(this.scene, 0);
            this._compData = Laya.loader.getRes(RescoureData.PERFABS_DATA);
            this._cameraFollow = this.scene.getChildByName("Camera").addComponent(CameraFollow);
            this._MainCamera = this.scene.getChildByName("Camera").getChildByName("MainCamera");
            this._MainCamera.msaa = true;
            this._directionLight = this.scene.getChildByName("DirectionalLight");
            SceneMgr.Int.showLoadTime("onLoadSceneCompleteHandler");
            this.initData();
            this.onTouchNode();
            this.initEvent();
        }
        startLoadPark() {
            if (this.isLoadPark == false) {
                this.isLoadPark = true;
                this.loadGuiRes();
            }
            else {
                this.isStart = true;
            }
        }
        loadGuiRes() {
            SubPackageMgr.LoadParks(RescoureData.getGuiResId(), Laya.Handler.create(this, () => {
                EventMgr.Int.emit(EventType.LOADFISHICON);
                this.loadMainUI();
            }));
        }
        loadMainUI() {
            let urls = [
                ConfigCommonPackageUrl,
                ConfigJumpPackageUrl,
                UIMgr.instance.getPath(ModuleType.Main),
                UIMgr.instance.getPath(ModuleType.Shengji)
            ];
            ResourcesMgr$1.instance.loadDir(urls, () => {
                this.isStart = true;
                UIMgr.instance.openUINoCom(ModuleType.Main, null, () => {
                });
                this.loadPrefab();
             
            });
        }
        loadPrefab() {
            if (this.isLoadPrefab)
                return;
            this.isLoadPrefab = true;
            SubPackageMgr.LoadParks(RescoureData.getPrefabId(), Laya.Handler.create(this, () => {
                this.loadPlayer();
            }));
        }
        loadPlayer() {
            SubPackageMgr.LoadParks(RescoureData.getPlayerId(), Laya.Handler.create(this, () => {
                this.loadRoom();
            }));
        }
        loadRoom() {
            SubPackageMgr.LoadParks(RescoureData.getRoomId(), Laya.Handler.create(this, () => {
                this.loadCustomer();
            }));
        }
        loadCustomer() {
            SubPackageMgr.LoadParks(RescoureData.getCustomerId(), Laya.Handler.create(this, () => {
                this.loadSound();
            }));
        }
        loadSound() {
            SubPackageMgr.LoadSoundPark(Laya.Handler.create(this, () => {
                AudioMgr$1.instance.isLoading = true;
                AudioMgr$1.instance.play_music(1, true);
            }));
        }
        onFotHander() {
            this._scene.enableFog = true;
            this._scene.fogColor = this.fogs[0].color;
            this._scene.fogStart = this.fogs[0].size.x;
            this._scene.fogRange = this.fogs[0].size.y;
        }
        initData() {
            this.playerData = new PlayerData();
            this.playerData.resetData();
        }
        onTouchNode() {
            this.onLoadLevel();
        }
        refeshGameHandler(isWin = false, score = 0) {
            if (this._scene) {
                Laya.stage.addChildAt(this._scene, 0);
            }
            this.rewradCount = 1;
            this.isGameOver = false;
            this.comboCount = 0;
            this.beginScore = score;
            this.onLoadLevel();
            UIMgr.instance.openUI(ModuleType.Main, isWin ? 1 : 2, () => {
            });
        }
        gotoRoom(roomId, handler) {
            this._configHandler = handler;
            this._roomId = roomId;
            UIMgr.instance.closeUI(ModuleType.Main);
            this.onLoadLevel();
        }
        showHei1(callback) {
            if (this.heiSprite == null) {
                this.heiSprite = new Laya.Sprite();
                this.heiSprite.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000000");
                this.heiSprite.width = Laya.stage.width;
                this.heiSprite.height = Laya.stage.height;
                this.heiSprite.mouseEnabled = true;
            }
            this.heiSprite.alpha = 0;
            Laya.stage.addChildAt(this.heiSprite, 1);
            UIMgr.instance.openUI("UILoad");
            Laya.Tween.to(this.heiSprite, { alpha: 1 }, 200, null, Laya.Handler.create(this, () => {
                callback.run();
            }));
        }
        hideHei(callback) {
            UIMgr.instance.closeUI("UILoad");
            Laya.Tween.to(this.heiSprite, { alpha: 0 }, 500, null, Laya.Handler.create(this, () => {
                this.heiSprite.removeSelf();
                callback.run();
            }), 200);
        }
        onLoadLevel() {
            this._isLoading = false;
            let leveldata = GameData.getLevelItem(this._roomId);
            ResourcesMgr$1.instance.load(RescoureData.getFrist(leveldata.PrefabName), this.onLoadLevelHandler.bind(this));
        }
        onLoadLevelHandler(node) {
            if (this._levelNode)
                this._levelNode.destroy();
            this._levelNode = Laya.Sprite3D.instantiate(node);
            this._levelNode.transform.position = new Laya.Vector3(0, 0, 0);
            if (this.levelNode.parent == undefined) {
                this.scene.addChild(this._levelNode);
            }
            SceneMgr.Int.showLoadTime("onLoadLevelHandler");
            this.onInitProps();
            this.initClickSp();
            this.initPlayer(LogicSkin.instance.skin);
        }
        onInitProps() {
            LogicRoom.instance.clearAll();
            MoveManager.instance.clearAll();
            ComMgr.bindNode(this._levelNode, this._compData);
            this._levelNode.addComponent(RoomScript);
        }
        initClickSp() {
            if (this.clickSprite == null) {
                this.clickSprite = new Laya.Sprite();
                this.clickSprite.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#FFFFFF00");
                this.clickSprite.width = Laya.stage.width;
                this.clickSprite.height = Laya.stage.height;
                this.clickSprite.mouseEnabled = true;
            }
        }
        initPlayer(skinId, isChangColor = true, isinit = true) {
            if (this._playerController) {
                this._playerController.node.destroy();
                this._playerController = null;
            }
            let playerNode = new Laya.Sprite3D();
            playerNode.name = "PlayerController";
            this._playerController = playerNode.addComponent(PlayerController);
            this._playerController.skinId = LogicSkin.instance.skin;
            this._playerController.hairId = LogicSkin.instance.weapon;
            this.scene.addChild(playerNode);
            this._playerController.initStartPos(this.getStartPos());
            this._isLoading = true;
            let firstXieyi = Laya.LocalStorage.getItem("firstXieyi");
            // if (!firstXieyi) {
            //     UIMgr.instance.openUI("UIyinsi1", 1);
            // }
            if (this._cb && isinit) {
                this._cb();
                this._cb = null;
            }
            SceneMgr.Int.showLoadTime("initPlayer");
            this.startLoadPark();
            this._playerController.initBox();
            if (this._configHandler) {
                this._configHandler.run();
                this._configHandler = null;
                UIMgr.instance.openUI(ModuleType.Main);
            }
        }
        getStartPos() {
            let pos = this.levelNode.getChildByName("Start").transform.position.clone();
            return pos;
        }
        getMaxZoneId() {
            let zones = LogicRoom.instance.unlocks;
            let max = 0;
            for (var i = 0; i < zones.length; i++) {
                if (zones[i] > max) {
                    max = zones[i];
                }
            }
            return max;
        }
        onChangeSkinHandler(id, isChangColor = true) {
        }
        dramCameraToImage(display) {
            display.graphics.clear();
            let camera = this.cameraFollow.camera;
            camera.renderTarget = new Laya.RenderTexture(display.width, display.height);
            var rtex = new Laya.Texture(camera.renderTarget, Laya.Texture.DEF_UV);
            display.graphics.drawTexture(rtex);
            Laya.timer.frameOnce(3, this, function () {
                camera.renderTarget = null;
            });
        }
        onStartGameHandler() {
            GameSDK.stageOnStart({ 'stageId': LogicData.instance.level, 'stageName': "第" + LogicData.instance.level + "关" });
            this.isStart = true;
        }
        onGameOverHandler(isWin, score, info) {
            this.score = score;
            this.info = info;
            this.isWin = isWin;
            this.isStart = false;
            LogicData.instance.isShare = false;
            GameSDK.stageOnEnd({ 'stageId': LogicData.instance.roomId, 'stageName': "第" + LogicData.instance.roomId + "关", 'event': isWin ? 'complete' : 'fail' });
            GameSDK.stopVideoRecord();
            this.onOpenEndHandler();
        }
        showNextRoom() {
        }
        onOpenEndHandler() {
            UIMgr.instance.closeUI(ModuleType.Main);
        }
        onOpenEndHandler2() {
            this.onOpenEndHandler3();
        }
        onOpenEndHandler3() {
            if (this.isWin) {
                AudioMgr$1.instance.play_sound(3);
                UIMgr.instance.openUI(ModuleType.End, { isWin: 0, score: this.score });
            }
            else {
                AudioMgr$1.instance.play_sound(4);
                UIMgr.instance.openUI(ModuleType.End, { isWin: 1, score: this.score });
            }
        }
        initEvent() {
            EventMgr.Int.on(EventType.START_GAME, this.onStartGameHandler, this);
            EventMgr.Int.on(EventType.GAME_OVER, this.onGameOverHandler, this);
            EventMgr.Int.on(EventType.ChangeSkin, this.onChangeSkinHandler, this);
        }
        removeEvent() {
            EventMgr.Int.off(EventType.START_GAME, this.onStartGameHandler, this);
            EventMgr.Int.off(EventType.GAME_OVER, this.onGameOverHandler, this);
            EventMgr.Int.off(EventType.ChangeSkin, this.onChangeSkinHandler, this);
        }
        flyGoldAnim(poition) {
            let out = WorldToScreen2(this._cameraFollow.camera, poition);
            TipMgr.Int.showGold(new Laya.Vector2(out.x, out.y), 2, EPropNameById$1.diamonds);
            LogicProp$1.instance.add(EPropNameById$1.diamonds, 1 * LogicData.instance.addDiamonCount);
            AudioMgr$1.instance.play_sound(13);
        }
        flyYaoshiAnim(poition) {
            let out = WorldToScreen2(this._cameraFollow.camera, poition);
            TipMgr.Int.showXingzuo(new Laya.Vector2(out.x, out.y), 1, EPropNameById$1.diamonds);
            AudioMgr$1.instance.play_sound(13);
        }
        flyTuziAnim(xingzuoId, poition) {
            let out = WorldToScreen2(this._cameraFollow.camera, poition);
            TipMgr.Int.showTuzi(new Laya.Vector2(out.x, out.y), 1, EPropNameById$1.diamonds);
            AudioMgr$1.instance.play_sound(13);
        }
        showEndLiHuaEffect() {
            let path = RescoureData.getPrefabsUrlByName("FX_lihua");
            ResourcesMgr$1.instance.load(path, (node) => {
                for (let i = 1; i <= 4; i++) {
                    let effParent = this._levelNode.getChildByName("lihua_0" + i);
                    if (!effParent)
                        return;
                    let effectNode = Laya.Sprite3D.instantiate(node);
                    effectNode.transform.localPosition = new Laya.Vector3(0, 1, 0);
                    effectNode.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
                    effectNode.transform.localScale = new Laya.Vector3(0.5, 0.5, 0.5);
                    effParent.addChild(effectNode);
                }
            });
        }
        showDiamonEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("zuanshi");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                poition.y += 1.5;
                effectNode.transform.position = poition ? poition : v3_zeor;
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showTiaoshuiEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("Fx_tiaoshui");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y + 0.5, poition.z) : v3_zeor;
                effectNode.transform.localScale = new Laya.Vector3(0.5, 0.5, 0.5);
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showBaozhaEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("Fx_boom");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? poition : new Laya.Vector3(0, 0, 0);
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showZhuangqiangEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("Fx_zhuangqiang");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y + 1, poition.z) : new Laya.Vector3(0, 0, 0);
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showLihuaEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("FX_lihua");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y + 1.5, poition.z) : v3_zeor;
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showShuidiEffect(poition, sp) {
            let path = RescoureData.getPrefabsUrlByName("Fx_shuidi");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.localPosition = poition ? new Laya.Vector3(poition.x, poition.y, poition.z) : v3_zeor;
                effectNode.addComponent(PropEffectDel);
                sp.addChild(effectNode);
            });
        }
        showShuiHua(poition) {
            if (RescoureData.isLoadPrefab == false)
                return;
            let path = RescoureData.getPrefabsUrlByName("FX_Shuihua");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y, poition.z) : v3_zeor;
                effectNode.transform.localScale = new Laya.Vector3(1.5, 1.5, 1.5);
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showYanwu(poition) {
            if (RescoureData.isLoadPrefab == false)
                return;
            let path = RescoureData.getPrefabsUrlByName("Fx_Smoke");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y, poition.z) : v3_zeor;
                effectNode.transform.localScale = new Laya.Vector3(1, 1, 1);
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showXioashiEff(poition) {
            if (RescoureData.isLoadPrefab == false)
                return;
            let path = RescoureData.getPrefabsUrlByName("FX_xiaoshi");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y, poition.z) : v3_zeor;
                effectNode.addComponent(PropEffectDel);
                this.scene.addChild(effectNode);
            });
        }
        showSpawnRed(poition) {
            if (RescoureData.isLoadPrefab == false)
                return;
            let path = RescoureData.getPrefabsUrlByName("FX_SpawnRed");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                effectNode.transform.position = poition ? new Laya.Vector3(poition.x, poition.y, poition.z) : v3_zeor;
                effectNode.transform.localScale = new Laya.Vector3(1.5, 1.5, 1.5);
                effectNode.addComponent(PropEffectDel).max = 120;
                this.scene.addChild(effectNode);
            });
        }
        showPlayerDeathEffect(poition) {
            return;
        }
        showRopeEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("tx_hit");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                poition.y += 1;
                effectNode.transform.position = poition ? poition : v3_zeor;
                this.scene.addChild(effectNode);
            });
        }
        showZhandanEffect(poition) {
            let path = RescoureData.getPrefabsUrlByName("tx_ExplosionRoundFire");
            ResourcesMgr$1.instance.load(path, (node) => {
                let effectNode = Laya.Sprite3D.instantiate(node);
                poition.y += 1;
                effectNode.transform.position = poition ? poition : v3_zeor;
                this.scene.addChild(effectNode);
            });
        }
        currDiance() {
            if (this.levelNode) {
                return 100;
            }
            else {
                return 100;
            }
        }
        projectPostionTo2D(pos, outPos) {
            this._projectPostionTo2D(pos, outPos);
            outPos.x = outPos.x / Laya.stage.clientScaleX;
            outPos.y = outPos.y / Laya.stage.clientScaleY;
        }
        projectPostionTo2D2(pos) {
            let outPos = new Laya.Vector4(0, 0, 0, 0);
            this._projectPostionTo2D(pos, outPos);
            return new Laya.Vector2(outPos.x / Laya.stage.clientScaleX, outPos.y / Laya.stage.clientScaleY);
        }
        _projectPostionTo2D(pos, outPos) {
            this._MainCamera.viewport.project(pos, this._MainCamera.projectionViewMatrix, outPos);
            return outPos;
        }
        set isGameOver(value) {
            this._isGameOver = value;
        }
        get isGameOver() {
            return this._isGameOver;
        }
        get comboCount() {
            return this._comboCount;
        }
        set comboCount(value) {
            this._comboCount = value;
            EventMgr.Int.emit(EventType.ATTACK_COMBO_CHANGE);
        }
        get cameraFollow() {
            return this._cameraFollow;
        }
        get playerController() {
            return this._playerController;
        }
        get level() {
            return GameData.getLevelItem(this._roomId);
        }
        get scene() {
            return this._scene;
        }
        set scene(value) {
            this._scene = value;
        }
        get levelNode() {
            return this._levelNode;
        }
        set levelNode(value) {
            this._levelNode = value;
        }
        get ComData() {
            return this._compData;
        }
        get isLoading() {
            return this._isLoading;
        }
        get propEnvironment() {
            return this._propEnvironment;
        }
        set propEnvironment(value) {
            this._propEnvironment = value;
        }
        get isNight() {
            return this._isNight;
        }
        set isNight(value) {
            this._isNight = value;
        }
        static get Int() {
            if (!this._Int) {
                this._Int = new SceneMgr();
            }
            return this._Int;
        }
    }
    SceneMgr.isLookModel = false;
    SceneMgr.deathT1 = 0;
    SceneMgr._Int = null;

    var E_CLIPDOLL_REWARD;
    (function (E_CLIPDOLL_REWARD) {
        E_CLIPDOLL_REWARD[E_CLIPDOLL_REWARD["COIN"] = 1] = "COIN";
        E_CLIPDOLL_REWARD[E_CLIPDOLL_REWARD["SKIN"] = 2] = "SKIN";
        E_CLIPDOLL_REWARD[E_CLIPDOLL_REWARD["SKIN2"] = 3] = "SKIN2";
        E_CLIPDOLL_REWARD[E_CLIPDOLL_REWARD["BLACKMAYI"] = 4] = "BLACKMAYI";
    })(E_CLIPDOLL_REWARD || (E_CLIPDOLL_REWARD = {}));

    class LogicSkin {
        constructor() {
            this.thiefIndex = 0;
            this.GroupDic = [];
            this.unlocks_temp = [];
        }
        initData() {
            for (let key in GameData.getSkin()) {
                let skin = GameData.getSkinItem(key);
                if (skin.UnLockType.indexOf(0) >= 0) {
                    if (skin.Type == 1) {
                        LocalCache$1.get("LogicSkin._skin", key);
                    }
                    this.unlocks_temp.push(skin.Id);
                }
            }
        }
        get skin() {
            return LocalCache$1.get("LogicSkin._skin", 0);
        }
        set skin(id) {
            LocalCache$1.set("LogicSkin._skin", id);
        }
        get weapon() {
            return LocalCache$1.get("LogicSkin._weapon", 5);
        }
        set weapon(id) {
            LocalCache$1.set("LogicSkin._weapon", id);
        }
        config(id) {
            return GameData.getSkinItem(id);
        }
        get unlocks() {
            return LocalCache$1.get("LogicSkin._unlocks", this.unlocks_temp);
        }
        set unlocks(value) {
            LocalCache$1.set("LogicSkin._unlocks", value);
        }
        get noUnlocks() {
            let res = [];
            for (let key in GameData.getSkin()) {
                let skin = GameData.getSkinItem(key);
                if (skin.Type == 1 && !this.has(Number(key)))
                    res.push(Number(key));
            }
            return res;
        }
        getSkin(id, isShowUI = false, isPark = false, closeCb = null) {
            if (this.has(id))
                return;
            GameSDK.OpenAutoFN();
            this.clearTry(id);
            this.unlocks.push(id);
            GameSDK.sendEvent("解锁" + this.config(id).Name, "1");
            LocalCache$1.set("LogicSkin._unlocks", this.unlocks);
            EventMgr.Int.emit(EventType.UnlockSkin, id);
            if (isShowUI) {
                UIMgr.instance.openUI(ModuleType.Reward, { Type: E_CLIPDOLL_REWARD.SKIN, SkinId: id });
            }
        }
        has(id) {
            return Sets$1.has(this.unlocks, id);
        }
        getSkinCache(id) {
            return LocalCache$1.get("LogicSkin.trySkin" + id, { type: 0, tryTime: Times.now, tryCount: 0, watchAdCount: 0, finalTryCount: 0 });
        }
        wathchAd(id, isPark = false) {
            let itemData = this.config(id);
            let tryData = LocalCache$1.get("LogicSkin.trySkin" + id, { type: 0, tryTime: Times.now, tryCount: 0, watchAdCount: 0, finalTryCount: 0 });
            tryData.watchAdCount += 1;
            let index = itemData.UnLockType.indexOf(8);
            if (index >= 0 && tryData.watchAdCount >= itemData.UnLockValue[index]) {
                this.getSkin(id, true, isPark);
                this.use(id, false);
                return true;
            }
            else {
                LocalCache$1.set("LogicSkin.trySkin" + id, tryData);
                return false;
            }
        }
        finalTry(id) {
            let itemData = this.config(id);
            let tryData = LocalCache$1.get("LogicSkin.trySkin" + id, { type: 0, tryTime: Times.now, tryCount: 0, watchAdCount: 0, finalTryCount: 0 });
            tryData.finalTryCount += 1;
            if (tryData.finalTryCount >= itemData.UnLockValue) {
                this.getSkin(id, true);
            }
            else {
                LocalCache$1.set("LogicSkin.trySkin" + id, tryData);
            }
            if (itemData.Type == 1) {
                EventMgr.Int.emit(EventType.ChangeSkin, id);
            }
        }
        get trySkin() {
            var datas = [];
            for (let key in GameData.getSkin()) {
                let id = GameData.getSkinItem(key).Id;
                let tryData = LocalCache$1.get("LogicSkin.trySkin" + id, { type: 0, tryTime: Times.now, tryCount: 0, watchAdCount: 0, finalTryCount: 0 });
                let data = { id: id, tryData: tryData };
                datas.push(data);
            }
            return datas;
        }
        set trySkin(datas) {
            for (var i = 0; i < datas.length; i++) {
                let data = datas[i];
                let id = data.id;
                let tryData = data.tryData;
                LocalCache$1.set("LogicSkin.trySkin" + id, tryData);
            }
        }
        use(id, isChangColor = true, isSendMgs = true) {
            let itemData = this.config(id);
            if (!this.has(id)) {
                let tryData = LocalCache$1.get("LogicSkin.trySkin" + id, { type: 0, tryTime: Times.now, tryCount: 0, watchAdCount: 0, finalTryCount: 0 });
                tryData.watchAdCount += 1;
                let index = itemData.UnLockType.indexOf(8);
                if (index >= 0 && tryData.watchAdCount >= itemData.UnLockValue[index]) {
                    this.getSkin(id, true);
                    this.use(id, false);
                }
                else {
                    LocalCache$1.set("LogicSkin.trySkin" + id, tryData);
                }
                index = itemData.UnLockType.indexOf(10);
                if (index >= 0) {
                    this.getSkin(id, false);
                    this.use(id, false);
                }
            }
            else {
                if (itemData.Type == 1) {
                    LocalCache$1.set("LogicSkin._skin", id);
                }
                else if (itemData.Type == 2) {
                    LocalCache$1.set("LogicSkin._weapon", id);
                }
            }
            if (isSendMgs) {
                EventMgr.Int.emit(EventType.ChangeSkin, id, isChangColor);
            }
        }
        getSkinLevel(skinId) {
            return LocalCache$1.get("LogicSkin._skin_level_" + skinId, 1);
        }
        setSkinLevel(skinId, level) {
            LocalCache$1.set("LogicSkin._skin_level_" + skinId, level);
        }
        getPetState() {
            return LocalCache$1.get("LogicSkin._petState", 0);
        }
        stPetState(value) {
            LocalCache$1.set("LogicSkin._petState", value);
            SceneMgr.Int.playerData.resetData();
        }
        takeoff(id) {
            this.config(id);
            if (!this.has(id)) {
                return;
            }
        }
        trySub(id) {
            let tryData = LocalCache$1.get("LogicSkin.trySkin" + id, null);
            if (tryData == undefined)
                return -1;
            let itemData = this.config(id);
            let now = Times.now - tryData.tryTime;
            if (now > itemData.TryTime * 60) {
                this.clearTry(id);
                return -1;
            }
            return now;
        }
        clearTry(id) {
            LocalCache$1.delete("LogicSkin.trySkin" + id);
        }
        getRandomUnlockId() {
            let skins = Sets$1.filter(this.noUnlocks, (v) => {
                let types = this.config(v).UnLockType;
                if (types.indexOf(1) >= 0)
                    return true;
                return false;
            });
            let id = Sets$1.random(skins);
            if (!id)
                return -1;
            return id;
        }
        getEndRandomUnlockIds(types = 1) {
            let skins = Sets$1.filter(this.noUnlocks, (v) => {
                let type = this.config(v).UnLockType;
                if (type.indexOf(types) >= 0)
                    return true;
                return false;
            });
            return skins;
        }
        getEndRandomUnlockId(types = 1) {
            let skins = Sets$1.filter(this.noUnlocks, (v) => {
                let type = this.config(v).UnLockType;
                if (type.indexOf(types) >= 0)
                    return true;
                return false;
            });
            let id = Sets$1.random(skins);
            if (!id)
                return -1;
            return id;
        }
        getRandomUnlockIdForVideo(types = 1) {
            let skins = Sets$1.filter(this.noUnlocks, (v) => {
                let type = this.config(v).UnLockType;
                if (type.indexOf(types) >= 0 && type.indexOf(1) < 0)
                    return true;
                return false;
            });
            let id = Sets$1.random(skins);
            if (!id)
                return -1;
            return id;
        }
        getRandomUnlockIdForVideoInOne(types = 1, remove = 0) {
            let skins = Sets$1.filter(this.noUnlocks, (v) => {
                let type = this.config(v).UnLockType;
                let index = this.config(v).UnLockType.indexOf(types);
                if (type.indexOf(types) >= 0 && type.indexOf(1) < 0 && v != remove) {
                    let info = this.getSkinCache(v);
                    if (info.watchAdCount + 1 >= this.config(v).UnLockValue[index]) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                return false;
            });
            let id = Sets$1.random(skins);
            if (!id)
                return -1;
            return id;
        }
        loadNode(PrefabName, callHandler = null) {
            let path = RescoureData.getPlayerUrlByName(PrefabName);
            Laya.loader.create(path, callHandler);
        }
    }
    LogicSkin.instance = new LogicSkin();
    LogicSkin.isGetBianshengbang = false;

    var ReportType;
    (function (ReportType) {
        ReportType["LOADING_START"] = "加载开始";
        ReportType["LOADING_END"] = "加载结束";
        ReportType["ENTER_GAME"] = "首次进入场景";
        ReportType["PLAYER_MOVE"] = "操作人物移动";
        ReportType["GET_FOOD"] = "首次获取食物";
        ReportType["MOVE_FOOD"] = "首次搬运食物";
        ReportType["GET_SOLDIER_ANT"] = "首次升级兵蚁";
        ReportType["POWER_UP"] = "首次升级属性";
        ReportType["GET_FIGHT_ANT"] = "首次升级大头蚁";
        ReportType["USE_WINGS"] = "首次使用翅膀";
        ReportType["FIRST_FISHING"] = "第一次下海捕鱼";
        ReportType["FIRST_PUT_FISH"] = "第一次将鱼放入鱼缸";
        ReportType["FIRST_GET_MONEY"] = "第一次收取钞票";
        ReportType["PLAYER_POWERUP"] = "人物能力升级";
        ReportType["TRY_BIKE"] = "自行车试用";
        ReportType["GET_BIKE"] = "永久解锁自行车";
        ReportType["FIRST_DIVING"] = "第一次潜水";
        ReportType["PLAYER_IN_MISTAKE"] = "进入神秘海域";
        ReportType["PLAYER_UNLOCK_BIG_WORLD"] = "解锁第一个场馆门用户数";
        ReportType["PLAYER_ENTER_BIG_WORLD"] = "首次进入城市场景";
        ReportType["PLAYER_FIRST_UNLOCK_SECOND"] = "首次进入城市场景并解锁第二场馆";
        ReportType["PLAYER_ENTER_SECOND_ROOM"] = "进入第二场馆";
        ReportType["GET_AQUAR_FISH"] = "首次获得观赏鱼";
        ReportType["INVATE_FRIEND"] = "邀请好友";
        ReportType["PLAYER_LEVELUP"] = "玩家升级";
        ReportType["PLAYER_DEATH"] = "玩家死亡";
        ReportType["PLAYER_DEATH_MISTAKE"] = "神秘海域死亡";
        ReportType["LOTS_CUSTOMER"] = "大量顾客视频";
        ReportType["DOUBLE_MONEY"] = "双倍金钱视频";
        ReportType["OTHER_MONEY"] = "场地内额外金钱视频";
        ReportType["LEVEL_UP_FISH"] = "升级额外5条鱼视频";
        ReportType["TRANPARENT_BAG"] = "透明背包视频";
        ReportType["LOOK_VIEW_UP"] = "增加视野视频";
        ReportType["GET_NET_FISH"] = "一件装满视频";
        ReportType["ISLAND_MONEY"] = "小岛额外金币宝箱视频";
        ReportType["ADD_OXYGEN"] = "增加氧气视频";
        ReportType["FREE_FISH"] = "场景内额外补充鱼视频";
        ReportType["FASTBACK"] = "一键回城";
    })(ReportType || (ReportType = {}));

    class ReportMgr {
        constructor() {
            this._reportNoSave = [
                ReportType.INVATE_FRIEND,
                ReportType.PLAYER_LEVELUP,
                ReportType.PLAYER_DEATH,
                ReportType.PLAYER_DEATH_MISTAKE,
                ReportType.LOTS_CUSTOMER,
                ReportType.DOUBLE_MONEY,
                ReportType.OTHER_MONEY,
                ReportType.LEVEL_UP_FISH,
                ReportType.TRANPARENT_BAG,
                ReportType.LOOK_VIEW_UP,
                ReportType.GET_NET_FISH,
                ReportType.ISLAND_MONEY,
                ReportType.ADD_OXYGEN,
                ReportType.FREE_FISH,
            ];
            this._reportNoSuf = [ReportType.LOADING_START, ReportType.LOADING_END];
        }
        static get inst() {
            if (!!!this._inst) {
                this._inst = new ReportMgr();
            }
            return this._inst;
        }
        sendReport(type, addSuf = true, args) {
            let copy = type;
            try {
                if (addSuf) {
                    if (this._reportNoSave.indexOf(type) < 0) {
                        if (this._hasLocal(type)) {
                            return;
                        }
                        else {
                            this._addLocal(type);
                        }
                    }
                }
                if (GameSDK.isNewPlayer) {
                    type = "新用户-" + type;
                }
                else {
                    type = "老用户-" + type;
                }
                type = this._getVersionStr(GameSDK.sdk.version) + "-" + type + ((this._reportNoSuf.indexOf(copy) >= 0 || !addSuf) ? "" : ("-等级" + LogicData.instance.level));
                GameSDK.sdk.sendEvent(type + (!!args ? JSON.stringify(args) : ""));
                console.log("【打点上报】" + type);
            }
            catch (e) {
                GameSDK.sdk.sendEvent("上报事件失败-" + copy + (!!e ? ("-" + JSON.stringify(e)) : ""));
            }
        }
        get _local() {
            return LocalCache$1.get("LogickData._reportGuide", "");
        }
        _hasLocal(report) {
            return this._local.indexOf(report) >= 0;
        }
        _addLocal(report) {
            let str = this._local + report + ",";
            LocalCache$1.set("LogickData._reportGuide", str);
        }
        _getVersionStr(version) {
            if (!!!version) {
                version = "";
            }
            return version.replace(/\./g, "");
        }
        forceReport(name, params = "") {
            let data = {
                'eventName': this._getVersionStr(SDKData.data.WECHAT_VERSION) + "-" + name,
                'params': params
            };
            SxyGame.instance.getPlatform();
            SxyGame.paramJoin(data);
            data.gameId = SDKData.data.GAMEID;
            data.platform = PlatType.WECHAT;
            data.session_key = SxyGame.session_key || "";
            data.openid = SxyGame.openid || "";
            data.uuid = SxyGame.instance.getUUID();
            data.avatar = SxyGame.avatar || "";
            data.action = "event";
            SxyGame.platform.request({
                url: SxyGame.logerUrl + "/index/api.do",
                data: data,
                header: {},
                method: "GET",
                fail: function (e) {
                    console.log(e);
                },
                success: function (res) {
                    200 == res.statusCode ? "" : "status error";
                }
            });
        }
    }

    class LogicData {
        constructor() {
            this.isOpen = false;
            this.isAuto = true;
            this.isFreeMap = false;
            this.isBaozou = false;
            this.freeMap = null;
            this.zhengxiangCount = 0;
            this.desktopCount = 0;
            this.guanzhuCount = 0;
            this.isOpenNeice = false;
            this.isNeice = false;
            this.isNeiceNight = false;
            this.countNeice = 1015;
            this._level = 1;
            this.isShare = false;
            this._addDiamonCount = 1;
            this.shareinfo = { share_index: 0, share_time: 0 };
            this.BAITIAN = [1, 2, 3, 4];
            this.WANSHAN = [5, 6, 7, 8, 9, 10, 11, 12];
            this.isGetTuzi = false;
            this.isShikongmengLevel = false;
            this.useDaXingxing = false;
        }
        get attackLevel() {
            return LocalCache$1.get("LogickData._attackLevel", 1);
        }
        set attackLevel(value) {
            LocalCache$1.set("LogickData._attackLevel", value);
        }
        get attack() {
            return LocalCache$1.get("LogickData.attack", 10);
        }
        addAttack(value) {
            let a = this.attack;
            a += value;
            LocalCache$1.set("LogickData.attack", a);
            if (SceneMgr.Int.playerData)
                SceneMgr.Int.playerData.resetData();
        }
        get lifeLevel() {
            return LocalCache$1.get("LogickData._lifeLevel", 1);
        }
        set lifeLevel(value) {
            LocalCache$1.set("LogickData._lifeLevel", value);
        }
        get life() {
            return LocalCache$1.get("LogickData.life", 40);
        }
        addLife(value) {
            let a = this.life;
            a += value;
            LocalCache$1.set("LogickData.life", a);
            if (SceneMgr.Int.playerData)
                SceneMgr.Int.playerData.resetData();
        }
        get bagLevel() {
            return LocalCache$1.get("LogickData._bagLevel", 1);
        }
        set bagLevel(value) {
            LocalCache$1.set("LogickData._bagLevel", value);
        }
        get bag() {
            return LocalCache$1.get("LogickData.bag", 2);
        }
        addBag(value) {
            LocalCache$1.set("LogickData.bag", value);
            if (SceneMgr.Int.playerData)
                SceneMgr.Int.playerData.resetData();
        }
        get speedLevel() {
            return LocalCache$1.get("LogickData._speedLevel", 1);
        }
        set speedLevel(value) {
            LocalCache$1.set("LogickData._speedLevel", value);
        }
        get speed() {
            return LocalCache$1.get("LogickData.speed", 100);
        }
        addSpeed(value) {
            LocalCache$1.set("LogickData.speed", value);
            if (SceneMgr.Int.playerData)
                SceneMgr.Int.playerData.resetData();
        }
        get exp() {
            return LocalCache$1.get("LogickData._exp", 0);
        }
        set exp(value) {
            LocalCache$1.set("LogickData._exp", value);
        }
        get level() {
            return this._level;
        }
        set level(value) {
            this._level = value;
            ReportMgr.inst.sendReport(ReportType.PLAYER_LEVELUP + this._level, false);
            LocalCache$1.set("LogickData._Level", this._level);
            EventMgr.Int.emit(EventType.OPEN_SIDE);
            if (SceneMgr.Int.playerData)
                SceneMgr.Int.playerData.resetData();
        }
        get roomId() {
            return LocalCache$1.get("LogickData._roomID", 1);
        }
        set roomId(value) {
            LocalCache$1.set("LogickData._roomID", value);
        }
        get unlocks() {
            return LocalCache$1.get("LogicRoom._unRoomlocks", [1]);
        }
        hasRoom(id) {
            return Sets$1.has(this.unlocks, id);
        }
        openRoom(roomId) {
            let arr = this.unlocks;
            arr.push(roomId);
            LocalCache$1.set("LogicRoom._unRoomlocks", arr);
        }
        get isDianTi() {
            return LocalCache$1.get("LogickData.isDianTi", 0);
        }
        set isDianTi(value) {
            LocalCache$1.set("LogickData.isDianTi", value);
        }
        get zoneId() {
            return LocalCache$1.get("LogickData._zoneId", 0);
        }
        set zoneId(value) {
            LocalCache$1.set("LogickData._zoneId", value);
        }
        get isFrist() {
            return LocalCache$1.get("LogickData._isFrist", 0);
        }
        set isFrist(value) {
            LocalCache$1.set("LogickData._isFrist", value);
        }
        get isShowScene() {
            return LocalCache$1.get("LogickData.isShowScene", 0);
        }
        set isShowScene(value) {
            LocalCache$1.set("LogickData.isShowScene", value);
        }
        get isOpenSpider() {
            return LocalCache$1.get("LogickData.isOpenSpider", 0);
        }
        set isOpenSpider(value) {
            LocalCache$1.set("LogickData.isOpenSpider", value);
        }
        get isDongxue() {
            return LocalCache$1.get("LogickData.isDongxue", 0);
        }
        set isDongxue(value) {
            LocalCache$1.set("LogickData.isDongxue", value);
        }
        get Transport() {
            return LocalCache$1.get("LogickData.Transport", 0);
        }
        set Transport(value) {
            LocalCache$1.set("LogickData.Transport", value);
        }
        initData() {
            this.level = LocalCache$1.get("LogickData._Level", 1);
            this.shareinfo = LocalCache$1.get("LogickData.shareinfo", this.shareinfo);
        }
        get unLockSkinIdByLevel() {
            let skinId = -1;
            if (this.level % 4 == 0) {
                skinId = LogicSkin.instance.getEndRandomUnlockId(7);
            }
            return skinId;
        }
        getShareReward() {
            let skinId = LogicSkin.instance.getEndRandomUnlockId(3);
            let shareGold = GameData.getConfigDataItem("ShareGold");
            if (skinId >= 0) {
                GameSDK.sendEvent("挂件分享解锁皮肤", "");
                LogicSkin.instance.getSkin(skinId, true);
            }
            else {
                LogicProp$1.instance.add(EPropNameById$1.diamonds, shareGold, true);
            }
        }
        get haidiAd() {
            return LocalCache$1.get("LogickData._HaiDiAd", 0);
        }
        set haidiAd(value) {
            LocalCache$1.set("LogickData._HaiDiAd", value);
        }
        getFreeMapAdCount(id) {
            return LocalCache$1.get("LogickData._freeMapAd_" + id, 0);
        }
        setFreeMapAdCount(id, count) {
            LocalCache$1.set("LogickData._freeMapAd_" + id, count);
        }
        get stairOpenData() {
            return LocalCache$1.get("LogickData._stairOpenData", [0]);
        }
        set stairOpenData(value) {
            LocalCache$1.set("LogickData._stairOpenData", value);
        }
        setStairOpened(index) {
            var datas = this.stairOpenData;
            datas.push(index);
            this.stairOpenData = datas;
        }
        checkOpenForIndex(index) {
            var datas = this.stairOpenData;
            if (datas.indexOf(index) < 0) {
                return true;
            }
            return false;
        }
        getRewardBox(layer) {
            let datas = GameData.getEndRewardBox();
            for (let key in datas) {
                if (datas[key].layer == layer) {
                    return datas[key];
                }
            }
        }
        getRewardBoxSkinId(layer) {
            let datas = GameData.getEndRewardBox();
            for (let key in datas) {
                if (datas[key].layer == layer) {
                    return datas[key].skin;
                }
            }
            return 9;
        }
        get EyuCount() {
            return LocalCache$1.get("LogickData._EyuCount", 1);
        }
        set EyuCount(value) {
            LocalCache$1.set("LogickData._EyuCount", value);
        }
        get addDiamonCount() {
            return LocalCache$1.get("LogickData._addDiamonCount", 1);
        }
        set addDiamonCount(value) {
            LocalCache$1.set("LogickData._addDiamonCount", value);
        }
        getFoodTime(index) {
            return LocalCache$1.get("LogickData._FoodTime_" + index, 0);
        }
        setFoodTime(index, time) {
            LocalCache$1.set("LogickData._FoodTime_" + index, time);
        }
        isHavePingTu(index) {
            var arr = this.pingTu;
            if (arr.indexOf(index) >= 0) {
                return true;
            }
            return false;
        }
        addPingTu(index) {
            var arr = this.pingTu;
            arr.push(index);
            this.pingTu = arr;
        }
        get pingTu() {
            return LocalCache$1.get("LogickData._PingTu", [0]);
        }
        set pingTu(arr) {
            LocalCache$1.set("LogickData._PingTu", arr);
        }
        isOpenJitan(index) {
            var arr = this.open_jitan;
            if (arr.indexOf(index) >= 0) {
                return true;
            }
            return false;
        }
        openJitan(index) {
            var arr = this.open_jitan;
            arr.push(index);
            this.open_jitan = arr;
        }
        get feijiTip1() {
            return LocalCache$1.get("LogickData._feijiTip1", 0);
        }
        set feijiTip1(value) {
            LocalCache$1.set("LogickData._feijiTip1", value);
        }
        get feijiTip2() {
            return LocalCache$1.get("LogickData._feijiTip2", 0);
        }
        set feijiTip2(value) {
            LocalCache$1.set("LogickData._feijiTip2", value);
        }
        get is_Guang() {
            return LocalCache$1.get("LogickData._is_Guang", 0);
        }
        set is_Guang(value) {
            LocalCache$1.set("LogickData._is_Guang", value);
        }
        get is_Fast() {
            return LocalCache$1.get("LogickData._is_Fast", 0);
        }
        set is_Fast(value) {
            LocalCache$1.set("LogickData._is_Fast", value);
            EventMgr.Int.emit(EventType.CHANGE_SANWU, value);
        }
        get is_SanWu() {
            return LocalCache$1.get("LogickData._is_SanWu", 0);
        }
        set is_SanWu(value) {
            LocalCache$1.set("LogickData._is_SanWu", value);
            EventMgr.Int.emit(EventType.CHANGE_SANWU, value);
            if (value) {
                GameSDK.sendEvent("三五出击", "");
            }
        }
        get is_JiuBao() {
            return LocalCache$1.get("LogickData._is_JiuBao", 0);
        }
        set is_JiuBao(value) {
            LocalCache$1.set("LogickData._is_JiuBao", value);
            if (value) {
                GameSDK.sendEvent("开启九宝琉璃塔", "");
            }
        }
        get open_jitan() {
            return LocalCache$1.get("LogickData._Open_jitan", [0]);
        }
        set open_jitan(arr) {
            LocalCache$1.set("LogickData._Open_jitan", arr);
        }
        get haveSpecialcodes() {
            return LocalCache$1.get("LogickData._Specialcode", [0]);
        }
        set haveSpecialcodes(value) {
            LocalCache$1.set("LogickData._Specialcode", value);
        }
        get zhangyuCount() {
            return LocalCache$1.get("LogickData._ZhangyuCount", 1);
        }
        set zhangyuCount(value) {
            LocalCache$1.set("LogickData._ZhangyuCount", value);
        }
        getSanwuOther(skinId) {
            if (skinId == 20) {
                return GameData.getSkinItem(21).PrefabName;
            }
            else if (skinId == 21) {
                return GameData.getSkinItem(20).PrefabName;
            }
            else {
                return "";
            }
        }
        get isCanShare() {
            let isGo = false;
            let bSignTody = false;
            if (this.shareinfo.share_time != 0) {
                if (this.checkIsTody(this.shareinfo.share_time)) {
                    bSignTody = true;
                }
            }
            if (bSignTody) {
                if (this.shareinfo.share_index < 6) {
                    isGo = true;
                    this.shareinfo.share_time = new Date().getTime();
                }
            }
            else {
                isGo = true;
                this.shareinfo.share_time = new Date().getTime();
                this.shareinfo.share_index = 1;
            }
            console.log("vedio to share => isGo: " + isGo + " , index:" + this.shareinfo.share_index + " , time:" + this.shareinfo.share_time);
            if (isGo) {
                LocalCache$1.set("LogickData.shareinfo", this.shareinfo);
                GameSDK.sendEvent("无视频调用分享用户", "");
            }
            return isGo;
        }
        addCanShare() {
            this.shareinfo.share_index = this.shareinfo.share_index + 1;
            LocalCache$1.set("LogickData.shareinfo", this.shareinfo);
        }
        checkIsTody(time) {
            var date = new Date(time);
            var dateNow = new Date();
            let bNewDay = false;
            if (date.getFullYear() == dateNow.getFullYear() &&
                date.getMonth() == dateNow.getMonth() &&
                date.getDate() == dateNow.getDate()) {
                bNewDay = true;
            }
            return bNewDay;
        }
        getClipboardData() {
        }
        set constellatoryId(value) {
            LocalCache$1.set("LogickData._constellatoryId", value);
        }
        get constellatoryId() {
            return LocalCache$1.get("LogickData._constellatoryId", 0);
        }
        get haveConstellatoryId() {
            return LocalCache$1.get("LogickData._haveConstellatoryId", [0]);
        }
        set haveConstellatoryId(value) {
            LocalCache$1.set("LogickData._haveConstellatoryId", value);
        }
        get openConstellatoryId() {
            return LocalCache$1.get("LogickData._openConstellatoryId", [0]);
        }
        set openConstellatoryId(value) {
            LocalCache$1.set("LogickData._openConstellatoryId", value);
        }
        get getConstellatoryId() {
            return LocalCache$1.get("LogickData._getConstellatoryId", [0]);
        }
        set getConstellatoryId(value) {
            var index = value.indexOf(0);
            if (index >= 0) {
                value.splice(index, 1);
            }
            LocalCache$1.set("LogickData._getConstellatoryId", value);
        }
        getBaitianConstellatoryId() {
            if (GameSDK.isCurrentVersion) {
                return 0;
            }
            var opens = this.openConstellatoryId;
            var gets = this.getConstellatoryId;
            var ids = [];
            for (var i = 0; i < this.BAITIAN.length; i++) {
                if (opens.indexOf(this.BAITIAN[i]) < 0 && gets.indexOf(this.BAITIAN[i]) < 0) {
                    ids.push(this.BAITIAN[i]);
                }
            }
            if (ids.length > 0) {
                return ids[Math.floor(Math.random() * ids.length)];
            }
            else {
                return 0;
            }
        }
        getWanShanConstellatoryIds() {
            if (GameSDK.isCurrentVersion) {
                return [];
            }
            var opens = this.openConstellatoryId;
            var gets = this.getConstellatoryId;
            var ids = [];
            for (var i = 0; i < this.WANSHAN.length; i++) {
                if (opens.indexOf(this.WANSHAN[i]) < 0 && gets.indexOf(this.WANSHAN[i]) < 0) {
                    ids.push(this.WANSHAN[i]);
                }
            }
            return ids;
        }
        getFlyConstellatoryId() {
            var list = [];
            var gets = this.getConstellatoryId;
            for (var i = 0; i < gets.length && list.length < 4; i++) {
                if (gets[i] > 0) {
                    list.push(gets[i]);
                }
            }
            return list;
        }
        set tuziCount(value) {
            LocalCache$1.set("LogickData._tuziCount", value);
        }
        get tuziCount() {
            return LocalCache$1.get("LogickData._tuziCount", 0);
        }
        get isShuishangleyue() {
            return LocalCache$1.get("LogickData._isShuishangleyue", 0);
        }
        set isShuishangleyue(value) {
            LocalCache$1.set("LogickData._isShuishangleyue", value);
        }
        get isShikongmeng() {
            return LocalCache$1.get("LogickData._isShikongmeng", 0);
        }
        set isShikongmeng(value) {
            LocalCache$1.set("LogickData._isShikongmeng", value);
        }
        get HighscoreZZ() {
            return LocalCache$1.get("LogickData._HighscoreZZ", 0);
        }
        set HighscoreZZ(value) {
            LocalCache$1.set("LogickData._HighscoreZZ", value);
        }
        get tryTaozhuan() {
            return LocalCache$1.get("LogickData._tryTaozhuan", [0]);
        }
        set tryTaozhuan(value) {
            LocalCache$1.set("LogickData._tryTaozhuan", value);
        }
        get daxingxingVideoCount() {
            return LocalCache$1.get("LogickData._DaxingxingVideoCount", 0);
        }
        set daxingxingVideoCount(value) {
            LocalCache$1.set("LogickData._DaxingxingVideoCount", value);
        }
        get isHaveDaxingxing() {
            return this.daxingxingVideoCount >= 3;
        }
        get aotemanVideoCount() {
            return LocalCache$1.get("LogickData._aotemanVideoCount", 0);
        }
        set aotemanVideoCount(value) {
            LocalCache$1.set("LogickData._aotemanVideoCount", value);
        }
        hveFishIds() {
            return LocalCache$1.get("LogickData._hveFish", []);
        }
        isHaveFishId(fishId) {
            let arr = this.hveFishIds();
            return arr.indexOf(fishId) >= 0;
        }
        saveGetFish(fishId) {
            let arr = this.hveFishIds();
            if (arr.indexOf(fishId) < 0) {
                arr.push(fishId);
                LocalCache$1.set("LogickData._hveFish", arr);
            }
        }
        getStandManTime(sideId) {
            return LocalCache$1.get("LogickData._ManTime" + sideId, 0);
        }
        setStandManTime(sideId, time) {
            LocalCache$1.set("LogickData._ManTime" + sideId, time);
        }
        getStandManFishs(sideId) {
            return LocalCache$1.get("LogickData._ManFish" + sideId, []);
        }
        setStandManFishs(sideId, fishs) {
            LocalCache$1.set("LogickData._ManFish" + sideId, fishs);
        }
        get haveShip() {
            return LocalCache$1.get("LogickData._haveShip", 0);
        }
        set haveShip(value) {
            LocalCache$1.set("LogickData._haveShip", value);
        }
        get haveSubmarine() {
            return LocalCache$1.get("LogickData._haveSubmarine", 0);
        }
        set haveSubmarine(value) {
            LocalCache$1.set("LogickData._haveSubmarine", value);
        }
        get haveNpc() {
            return LocalCache$1.get("LogickData._haveNpc", 0);
        }
        set haveNpc(value) {
            LocalCache$1.set("LogickData._haveNpc", value);
        }
        get isBike() {
            return LocalCache$1.get("LogickData._haveBike", 0);
        }
        setHaveBike() {
            LocalCache$1.set("LogickData._haveBike", 1);
        }
        get isTyeBike() {
            return LocalCache$1.get("LogickData._TyeBike", 0);
        }
        setTryBike() {
            LocalCache$1.set("LogickData._TyeBike", 1);
        }
        get isFastBack() {
            return LocalCache$1.get("LogickData._fastBack", 0);
        }
        set isFastBack(value) {
            LocalCache$1.set("LogickData._fastBack", value);
        }
        get isTryFastBack() {
            return LocalCache$1.get("LogickData._tryfastBack", 0);
        }
        set isTryFastBack(value) {
            LocalCache$1.set("LogickData._tryfastBack", value);
        }
        get siyecaoState() {
            return LocalCache$1.get("LogickData._siyecaoState", 1);
        }
        set siyecaoState(value) {
            LocalCache$1.set("LogickData._siyecaoState", value);
        }
        getUpgradeLevel(roomId, type, index) {
            return 0;
        }
        setUpgradeLevel(roomId, type, index, level) {
        }
    }
    LogicData.instance = new LogicData();

    const auto_btn_click_prefix = "click_";
    const auto_btn_click_node_prefix = "btn_";
    const auto_transition_prefix = "trans_";
    const auto_add_member_node_prefix = "c_";
    const auto_add_member_ok_node_prefix = [
        "text_",
        "btn_",
        "progress_",
        "comp_",
        "list_",
        "loader_",
        "img_",
        "graph_",
        "input_",
        "group_",
    ];
    class FguiBase extends fairygui.GComponent {
        constructor() {
            super(...arguments);
            this._controllerOnce = null;
        }
        static setExtension(packageName, compName, userClass) {
            fgui.UIObjectFactory.setExtension("ui://" + packageName + "/" + compName, userClass);
        }
        static button_disable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.gray();
            }
            button.enabled = false;
        }
        static button_enable(button) {
            if (button.filters && button.filters.length > 0) {
                let colorFilter = button.filters[0];
                colorFilter.reset();
            }
            button.enabled = true;
        }
        static get_transition(node, transName) {
            if (transName)
                return node.getTransition(transName);
            else
                return node.getTransitionAt(0);
        }
        static get_transition_all(node, transName) {
            let values = [];
            for (let value of node._transitions)
                if (value.name.indexOf(transName) == 0)
                    values.push(value);
            return values;
        }
        static find_children_transition_once(node, transName) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let res = null;
            res = node.getTransition(transName);
            if (res)
                return res;
            let _children = node._children;
            for (let value of _children) {
                if (value instanceof fairygui.GComponent) {
                    res = value.getTransition(transName);
                    if (res)
                        break;
                    res = this.find_children_transition_once(value, transName);
                    if (res)
                        break;
                }
            }
            return res;
        }
        static find_children_transition_names(node, trans_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!trans_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (node instanceof fairygui.GComponent) {
                    let trans = this.get_transition_all(node, trans_name);
                    if (trans.length > 0)
                        values.push(...trans);
                    Sets$1.push(values, this.find_children_transition_names(value, trans_name));
                }
            }
            return values;
        }
        ;
        static find_children_names_once_node(node, name) {
            if (!(node instanceof fairygui.GComponent))
                return null;
            let _children = node._children;
            let res = null;
            for (let value of _children) {
                if (value.name == name) {
                    res = value;
                    break;
                }
                if (node instanceof fairygui.GComponent)
                    res = this.find_children_names_once_node(value, name);
                if (res)
                    break;
            }
            return res;
        }
        static find_children_names(node, names, cb) {
            let values = [];
            for (let i = 0, l = names.length; i < l; i++) {
                let value = names[i];
                let data = this.find_children_names_once_node(node, value);
                if (data) {
                    values.push(data);
                    if (cb)
                        cb(data, value, i);
                }
            }
            return values;
        }
        static find_children_names_node(node, node_name) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            if (!node_name)
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (value.name == node_name) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets$1.push(values, this.find_children_names_node(value, node_name));
            }
            return values;
        }
        ;
        static find_children_names_node_prefix(node, prefix) {
            let values = [];
            if (!(node instanceof fairygui.GComponent))
                return values;
            let _children = node["_children"];
            for (let value of _children) {
                if (str_indexOf$1(value.name, prefix) == 0) {
                    values.push(value);
                }
                if (node instanceof fairygui.GComponent)
                    Sets$1.push(values, this.find_children_names_node_prefix(value, prefix));
            }
            return values;
        }
        ;
        static match_children_to_member(parent, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf$1(key, auto_add_member_node_prefix);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf$1(key, auto_add_member_node_prefix);
                    let children_name = key.slice(last_index);
                    for (let value of auto_add_member_ok_node_prefix) {
                        let index = str_indexOf$1(children_name, value);
                        if (index != -1) {
                            let node = FguiBase.find_children_names_once_node(parent, children_name);
                            if (!node) {
                                console.warn("自动添加节点失败:", key);
                            }
                            else {
                                caller[key] = node;
                                console.log("自动添加成员变量 节点名", node.name, "成员函数名:", key);
                            }
                            break;
                        }
                    }
                }
            }
        }
        ;
        static match_transition_prefix(node, caller) {
            for (let key in caller) {
                if (caller[key] != null)
                    continue;
                let member_index = str_indexOf$1(key, auto_transition_prefix);
                if (member_index == 0) {
                    let last_index = str_lastIndexOf$1(key, auto_transition_prefix);
                    let transition_name = key.slice(last_index);
                    let transition = this.find_children_transition_once(node, transition_name);
                    if (transition) {
                        caller[key] = transition;
                        console.log("自动添加成员动画 动画名", transition_name, "成员函数名:", key);
                    }
                }
            }
        }
        static onClick(node, cb, caller) {
            node.onClick(caller, (e) => {
                if (!FguiBase.enableClick) {
                    console.log("按钮事件已屏蔽");
                    return;
                }
                e.stopPropagation();
                if (FguiBase.clickSoundName)
                    AudioMgr$1.instance.play_sound(FguiBase.clickSoundName);
                cb.call(caller, e);
            });
        }
        static match_children_btn_event(parent, caller) {
            let btns = FguiBase.find_children_names_node_prefix(parent, auto_btn_click_node_prefix);
            for (let node of btns) {
                if (str_indexOf$1(node.name, auto_btn_click_node_prefix) == 0) {
                    let node_name = node.name.slice(str_lastIndexOf$1(node.name, auto_btn_click_node_prefix));
                    let member_name = auto_btn_click_prefix + node_name;
                    if (caller[member_name] && typeof caller[member_name] == "function") {
                        this.onClick(node, caller[member_name], caller);
                        console.log("自动注册btn事件 节点名", node.name, "成员函数名:", member_name);
                    }
                }
            }
        }
        static get_controller(node, name) {
            if (name)
                return node.getController(name);
            else {
                return node.controllers[0] || null;
            }
        }
        static createPackageItem(packageName, resName, userClass) {
            return fairygui.UIPackage.createObject(packageName, resName, userClass);
        }
        static insert_child(parent, level) {
            let node_name = level.toString();
            for (let i = 0, children = parent._children, length = children.length; i < length; i++) {
                let value = children[i];
                if (value.name == node_name)
                    return value;
                if (Number(value.name) > level) {
                    let childrenParent = new fairygui.GComponent();
                    childrenParent.name = node_name;
                    childrenParent.setPivot(0, 0);
                    parent.addChildAt(childrenParent, i);
                    return childrenParent;
                }
            }
            let childrenParent = new fairygui.GComponent();
            childrenParent.name = node_name;
            childrenParent.setPivot(0, 0);
            parent.addChild(childrenParent);
            return childrenParent;
        }
        ;
        constructFromXML() {
            super.constructFromXML(undefined);
            FguiBase.match_children_to_member(this, this);
            FguiBase.match_children_btn_event(this, this);
            FguiBase.match_transition_prefix(this, this);
            if (this.onConstructFromXML)
                this.onConstructFromXML();
        }
        dispose() {
            Laya.timer.clearAll(this);
            if (this.onDispose)
                this.onDispose();
            this._controllerOnce = null;
            super.dispose();
        }
        get_controller(name) {
            return FguiBase.get_controller(this, name);
        }
        get controllerOnce() {
            if (this._controllerOnce == null)
                this._controllerOnce = this.get_controller();
            return this._controllerOnce;
        }
        get_transition(transName) {
            return FguiBase.get_transition(this, transName);
        }
        find_children_names_node_prefix(prefix) {
            return FguiBase.find_children_names_node_prefix(this, prefix);
        }
        find_children_names_node(node_name) {
            return FguiBase.find_children_names_node(this, node_name);
        }
        find_children_names_once_node(node_name) {
            return FguiBase.find_children_names_once_node(this, node_name);
        }
        find_children_names(node_names, cb) {
            return FguiBase.find_children_names(this, node_names, cb);
        }
    }
    FguiBase.enableClick = true;
    FguiBase.clickSoundName = "";

    var EPropNameById;
    (function (EPropNameById) {
        EPropNameById[EPropNameById["diamonds"] = 1] = "diamonds";
        EPropNameById[EPropNameById["star"] = 2] = "star";
        EPropNameById[EPropNameById["Zuanshi"] = 3] = "Zuanshi";
    })(EPropNameById || (EPropNameById = {}));
    var EPropNameByIdZh;
    (function (EPropNameByIdZh) {
        EPropNameByIdZh[EPropNameByIdZh["\u94BB\u77F3"] = 1] = "\u94BB\u77F3";
        EPropNameByIdZh[EPropNameByIdZh["\u91D1\u5E01"] = 2] = "\u91D1\u5E01";
    })(EPropNameByIdZh || (EPropNameByIdZh = {}));
    class LogicProp {
        initData() {
        }
        add(id, count, isShowUI = false, mul = 1, closeCb = null) {
            let key = this.getCacheKey(id);
            let cur = this.get(id);
            let _useNumber = Maths$1.clampf(cur + count * mul, 0, this.config(id).MaxCount);
            if (cur != _useNumber)
                LocalCache$1.set(key, _useNumber);
            EventMgr.Int.emit(EventType.PropChange, id);
            if (isShowUI) {
                if (id == EPropNameById.diamonds) {
                    UIMgr.instance.openUI("comp_jinbidonghua1");
                }
                else if (id == EPropNameById.Zuanshi) {
                    UIMgr.instance.openUI("comp_jinbidonghua2");
                }
            }
        }
        has(id, count, isShowUI = false) {
            if (this.get(id) < count) {
                if (isShowUI) {
                    TipMgr.Int.showTips("钻石不足");
                }
                return false;
            }
            return true;
        }
        config(id) {
            return GameData.getPropItem(id);
        }
        get(id) {
            let key = this.getCacheKey(id);
            let count = this.config(id).StartCount;
            count = LocalCache$1.get(key, count);
            return count;
        }
        getCacheKey(type) {
            return "Prop_" + type;
        }
        get diamonds() {
            return this.get(EPropNameById.diamonds);
        }
        set diamonds(value) {
            let key = this.getCacheKey(EPropNameById.diamonds);
            LocalCache$1.set(key, value);
        }
    }
    LogicProp.instance = new LogicProp();

    class ConfigUI {
        constructor(value) {
            this.ui = null;
            this.value = null;
            this._event_refresh_gold_node = null;
            if (value)
                this.value = value;
            else
                this.value = {};
            if (this.value.propId == undefined)
                this.value.propId = EPropNameById.diamonds;
        }
        destroy() {
            this.ui = null;
            this.value = null;
            this._event_refresh_gold_node = null;
        }
        set_controller() {
            if (!this.value.open_controller_config || this.value.open_controller_config.length == 0)
                return;
            for (let value of this.value.open_controller_config) {
                let index = typeof value.index == "function" ? value.index() : value.index;
                FguiBase.get_controller(this.ui, value.name).selectedIndex = index;
            }
        }
        add_event(...event) {
            if (!this.value.event)
                this.value.event = [];
            this.value.event.push(...event);
        }
        auto_rigst_gold() {
            if (this.value.event_refresh_gold_node) {
                let node_name = typeof this.value.event_refresh_gold_node == "string" ? this.value.event_refresh_gold_node : this.value.event_refresh_gold_node.node_name;
                this._event_refresh_gold_node = this.ui.find_children_names_once_node(node_name);
                if (this._event_refresh_gold_node)
                    this.add_event({
                        type: EventType.PropChange,
                        caller: this,
                        callback: this.on_event_use_gold,
                        enableCall: [this.value.propId],
                    });
            }
        }
        on_event_use_gold(id) {
            if (id != this.value.propId)
                return;
            if (!this._event_refresh_gold_node)
                return;
            this._event_refresh_gold_node.text = LogicProp.instance.get(this.value.propId) + "";
            if (this.value.event_refresh_gold_node && this.value.event_refresh_gold_node.cb)
                this.value.event_refresh_gold_node.cb.call(this.value.event_refresh_gold_node.caller || this.ui);
        }
        enable_refresh_event() {
            if (!this.value.event || this.value.event.length == 0)
                return;
            for (let value of this.value.event) {
                if (value.enableCall) {
                    value.callback.apply(value.caller || this.ui, value.enableCall);
                }
            }
        }
        rigst_event(is_on) {
            if (!this.value.event || this.value.event.length == 0)
                return;
            for (let value of this.value.event) {
                if (value.node) {
                    let node = typeof value.node == "function" ? value.node() : value.node;
                    if (is_on)
                        node.on(value.type, value.caller || this.ui, value.callback);
                    else
                        node.off(value.type, value.caller || this.ui, value.callback);
                }
                else {
                    if (is_on)
                        EventMgr.Int.on(value.type, value.callback, value.caller || this.ui);
                    else
                        EventMgr.Int.off(value.type, value.callback, value.caller || this.ui);
                }
            }
        }
        play_sound() {
            let sound = Config$1[this.ui.UI_NAME].enable_play_sound;
            if (sound != undefined)
                AudioMgr$1.instance.play_sound(sound);
        }
        node_delay_show() {
            if (!this.value.enable_node_delay_show || this.value.enable_node_delay_show.length == 0)
                return;
            for (let value of this.value.enable_node_delay_show) {
                let delay = typeof value.delay == "number" ? value.delay : value.delay();
                if (delay != 0) {
                    let node = this.ui.find_children_names_once_node(value.node_name);
                    if (node) {
                        console.log(this.ui.UI_NAME, " 按钮延迟显示:", value.node_name);
                        node.visible = false;
                        Laya.timer.once(delay, this.ui, () => {
                            node.visible = true;
                        });
                    }
                }
            }
        }
        get banner_state() {
            return Config$1[this.ui.UI_NAME].banner_state;
        }
        show_banner() {
            console.log("bannerState:", this.banner_state);
        }
        hide_banner() {
        }
    }

    class UIBase extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.UI_NAME = "";
            this.ConfigUI = new ConfigUI({});
            this.openTrans = null;
            this.cache = {};
        }
        get fguiConfig() {
            return Config$1[this.UI_NAME];
        }
        _onCreate() {
            console.log(this.UI_NAME, ": _onCreate");
            this.ConfigUI.ui = this;
            this.openTrans = FguiBase$3.find_children_transition_names(this, "openPlay");
            this.ConfigUI.auto_rigst_gold();
            if (this.onMouseDown)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_DOWN,
                    callback: this.onMouseDown,
                    node: this
                });
            if (this.onMouseMove)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_MOVE,
                    callback: this.onMouseMove,
                    node: this
                });
            if (this.onMouseUp)
                this.ConfigUI.add_event({
                    type: Laya.Event.MOUSE_UP,
                    callback: this.onMouseUp,
                    node: this
                });
            if (this.onCreate)
                this.onCreate();
        }
        _onOpen() {
            console.log(this.UI_NAME, ": _onOpen");
            this.ConfigUI.set_controller();
            this.ConfigUI.rigst_event(true);
            this.ConfigUI.play_sound();
            this.ConfigUI.node_delay_show();
            this.ConfigUI.show_banner();
            this.ConfigUI.enable_refresh_event();
            for (let value of this.openTrans)
                value.play();
            if (this.onOpen)
                this.onOpen();
            this.open_loop();
        }
        ;
        open_loop() {
            if (this.onUpdate) {
                Laya.timer.clear(this, this._onUpdate);
                Laya.timer.frameLoop(1, this, this._onUpdate);
            }
        }
        _onUpdate() {
            if (this.onUpdate)
                this.onUpdate();
        }
        _onClose() {
            // floatHide();
            console.log(this.UI_NAME, ": _onClose");
            this.ConfigUI.rigst_event(false);
            this.ConfigUI.hide_banner();
            Laya.timer.clearAll(this);
            if (this.onClose)
                this.onClose();
        }
        _onDestroy() {
            console.log(this.UI_NAME, ": _onDestroy");
            this.ConfigUI.destroy();
            Laya.timer.clearAll(this);
            if (this.onDestroy)
                this.onDestroy();
        }
        createPackageItem(resName) {
            return FguiBase$3.createPackageItem(this.fguiConfig.package_name, resName, Config$1[this.UI_NAME].setExtension[resName]);
        }
        setExtension(compName, userClass) {
            FguiBase$3.setExtension(this.fguiConfig.package_name, compName, userClass);
        }
        closeUI(destroy = false, arm = null) {
            UIMgr.instance.closeUI(this.UI_NAME, destroy, arm);
        }
        click_close() {
            this.closeUI(Config$1[this.UI_NAME].click_close_destroy || false);
        }
        get layer() {
            return Config$1[this.UI_NAME].layer;
        }
        GetGameObject(name) {
            let tmp = this.cache[name];
            if (tmp)
                return tmp;
            tmp = FguiBase$3.find_children_names_once_node(this, name);
            if (tmp)
                this.cache[name] = tmp;
            return tmp;
        }
    }

    class AdMgr {
        constructor() {
            this._isInit = false;
            this._bottomChangeTime = 5 * 60 * 1000;
            this._showBanner = false;
            this._serverUrl = "https://api3.jpsdk.com/api";
            this._checkCount = 0;
            this.ALERT_CD = 30 * 1000;
            this._lastAlertTime = 0;
            this._showDoubleCount = 0;
            this._showCustomCount = 0;
        }
        static get inst() {
            if (!!!this._inst) {
                this._inst = new AdMgr();
            }
            return this._inst;
        }
        init() {
            if (this._isInit) {
                return;
            }
            this._isInit = true;
        }
        showBottomAd(show, hideOnShort = false) {
        }
        showBanner(show) {
        }
        showBottomCustom(show) {
        }
        showLeftAd(show) {
        }
        showRightAd(show) {
        }
        showInsertAd() {
        }
        showRectAd() {
        }
        login() {
        }
        _sendHttpByPost(url, data) {
            return new Promise((resolve, reject) => {
                var xhr = new Laya.HttpRequest();
                xhr.http.timeout = 10000;
                xhr.once(Laya.Event.COMPLETE, this, (e) => {
                    if (!!e && e.code == 0) {
                        resolve(e);
                    }
                    else {
                        reject(e);
                    }
                });
                xhr.once(Laya.Event.ERROR, this, (e) => {
                    reject(e);
                });
                xhr.send(url, JSON.stringify(data), "POST", "json", ["Content-type", "application/json"]);
            });
        }
        sendGetInvate() {
            return new Promise((resolve, reject) => {
                let data = {};
                data.module = "game";
                data.action = "getInviteUsers";
                data.token = this.token;
                this._sendHttpByPost(this._serverUrl, data).then(e => {
                    console.log("自身邀请信息-->", e);
                    resolve(e);
                }).catch(e => {
                    TipMgr.Int.showTips("获取邀请信息失败，请重新打界面");
                    reject(e);
                });
            });
        }
        checkLoginState() {
            return new Promise((resolve, reject) => {
                if (!!this.token) {
                    this._checkCount = 0;
                    resolve();
                }
                else {
                    this._checkCount++;
                    this.login().then(() => {
                        if (!!this.token) {
                            resolve();
                        }
                        else {
                            if (this._checkCount <= 3) ;
                            reject();
                        }
                    }).catch(() => {
                        if (this._checkCount <= 3) ;
                        reject();
                    });
                }
            });
        }
        checkAlertDouble() {
            if (SceneMgr.Int.playerData.isMoney || UIMgr.instance.getUIShowing(ModuleType.Tanchaung)) {
                return;
            }
            let add = false;
            if (this._showDoubleCount < 2) {
                add = true;
                this._showDoubleCount++;
            }
            let now = Date.now();
            if (now - this._lastAlertTime < this.ALERT_CD) {
                return;
            }
            if (!add) {
                this._showDoubleCount++;
            }
            let show = false;
            if (this._showDoubleCount == 2) {
                show = true;
            }
            else if (this._showDoubleCount > 2) {
                show = Math.random() <= 0.2;
            }
            if (show) {
                this._lastAlertTime = now;
                UIMgr.instance.openUI(ModuleType.Tanchaung, { type: 1, data: { type: 1 } });
            }
        }
        checkAlertCustom() {
            if (UIMgr.instance.getUIShowing(ModuleType.Tanchaung)) {
                return;
            }
            let add = false;
            if (this._showCustomCount < 2) {
                add = true;
                this._showCustomCount++;
            }
            let now = Date.now();
            if (now - this._lastAlertTime < this.ALERT_CD) {
                return;
            }
            if (!add) {
                this._showCustomCount++;
            }
            let show = false;
            if (this._showCustomCount == 2) {
                show = true;
            }
            else if (this._showCustomCount > 1) {
                show = Math.random() <= 0.2;
            }
            if (show) {
                this._lastAlertTime = now;
                UIMgr.instance.openUI(ModuleType.Tanchaung, { type: 1, data: { type: 2 } });
            }
        }
    }

    class UIMain extends UIBase {
        constructor() {
            super(...arguments);
            this.c_img_kongzi1 = null;
            this.c_img_kongzi2 = null;
            this.c_btn_lushipin = null;
            this.c_comp_chaopiao1 = null;
            this.c_comp_chaopiao2 = null;
            this.c_progress_star = null;
            this.c_btn_box = null;
            this.c_btn_diamond = null;
            this.c_btn_vip = null;
            this.c_btn_zuoqi = null;
            this.c_btn_dianti = null;
            this.c_btn_fenxiang = null;
            this.c_comp_Native = null;
            this.c_btn_showAd = null;
            this.c_btn_fanhui9 = null;
            this.c_btn_addDesk = null;
            this.c_btn_gengduo = null;
            this._playerHasTouch = false;
            this.beginPos = null;
            this.text_time_zuoqi = null;
            this.loader_icon_zuoqi = null;
            this.outPos = new Laya.Vector4(0, 0, 0, 0);
            this.isRecord = false;
        }
        onCreate() {
        }
        onOpen() {
            GameSDK.hideBanner();
            this.displayObject.addChildAt(SceneMgr.Int.clickSprite, 0);
            this.c_img_kongzi1.visible = false;
            this.c_img_kongzi2.visible = false;
            this.text_time_zuoqi = this.c_btn_zuoqi
                .getChildByPath("Progress_zuoqi")
                .asCom.getChildByPath("text_time").asTextField;
            this.loader_icon_zuoqi = this.c_btn_zuoqi
                .getChildByPath("Progress_zuoqi")
                .asCom.getChildByPath("loader_icon").asLoader;
            this.c_btn_box.visible = false;
            this.c_btn_diamond.visible = false;
            this.c_btn_vip.visible = false;
            this.c_btn_zuoqi.visible = false;
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDownHandler);
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_UP, this, this.onMouseUpHandler);
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_OUT, this, this.onMouseUpHandler);
            this.updatePorpCount();
            this.updateStar();
            EventMgr.Int.on(EventType.PropChange, this.updatePorpCount, this);
            EventMgr.Int.on(EventType.StarChange, this.updateStar, this);
            EventMgr.Int.on(EventType.FLY_STAR, this.onFlyStar, this);
            ReportMgr.inst.sendReport(ReportType.ENTER_GAME);
            this.c_btn_fenxiang.visible = false;
            // if (GameSDK.type == PlatType.VIVO || GameSDK.type == PlatType.OPPO) {
            //     this.c_btn_addDesk.visible = !GameSDK.isShortCutInstalled;
            // }
            // if (GameSDK.type == PlatType.VIVO) {
            //     this.c_btn_gengduo.visible = false;
            // }
            this.comNative();
            this.c_btn_gengduo.visible = this.c_btn_addDesk.visible = false;
            console.log("=========main=========")
            console.log(this)
            // if (!LogicData.instance.isOpen) {
            //     Laya.timer.once(GameSDK.data["YS_SHOW"] * 1000, this, () => {
            //         LogicData.instance.isOpen = true;
            //         this.c_comp_Native.showNativeView(this.c_btn_showAd, this.c_btn_fanhui9, this.comNative.bind(this), this.onLoadSuccesHandler.bind(this), this.onLoadFailHandler.bind(this), 1);
            //     });
            //     let _time = Math.floor(GameSDK.data["YS_BANNER"]);
            //     Laya.timer.loop(_time * 1000, this, () => {
            //         console.log("刷新——————————————");
            //         if (!GameSDK.isCurrentVersion) {
            //             this.c_comp_Native.showNativeView(this.c_btn_showAd, this.c_btn_fanhui9, this.comNative.bind(this), this.onLoadSuccesHandler.bind(this), this.onLoadFailHandler.bind(this), 1);
            //         }
            //     });
            // }
            // Laya.timer.once(4 * 60000, this, () => {
            //     this.showAdd();
            //     Laya.timer.loop(60000, this, () => {
            //         this.showAdd();
            //     });
            // });
        }
        click_addDesk() {
            console.log("添加到桌面:*****");
            GameSDK.shortCutInstalled((is_succes) => {
                this.c_btn_addDesk.visible = !is_succes;
                console.log("添加到桌面:", is_succes);
            });
        }
        showAdd() {
            GameSDK.shortCutInstalled((is_succes) => {
                console.log("添加到桌面:", is_succes);
            });
        }
        comNative() {
            this.c_comp_Native.visible = false;
            this.c_btn_showAd.visible = false;
        }
        onLoadFailHandler() {
            this.c_comp_Native.visible = false;
            this.c_btn_showAd.visible = false;
        }
        onLoadSuccesHandler() {
            this.c_comp_Native.visible = true;
            this.c_btn_showAd.visible = true;
        }
        onMouseDownHandler(e) {
            this._mouseDownPos = new Laya.Point(e.stageX, e.stageY);
            if (!this._playerHasTouch) {
                this._playerHasTouch = true;
                ReportMgr.inst.sendReport(ReportType.PLAYER_MOVE);
            }
            SceneMgr.Int.clickSprite.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMoveHandler);
            this.beginPos = new Laya.Point(e.stageX, e.stageY);
            this.c_img_kongzi1.visible = true;
            this.c_img_kongzi2.visible = true;
            this.c_img_kongzi1.x = e.stageX;
            this.c_img_kongzi1.y = e.stageY;
            this.c_img_kongzi2.x = e.stageX;
            this.c_img_kongzi2.y = e.stageY;
        }
        onMouseUpHandler(e) {
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMoveHandler);
            this.c_img_kongzi1.visible = false;
            this.c_img_kongzi2.visible = false;
        }
        onMouseMoveHandler(e) {
            if (!!this._mouseDownPos &&
                this._mouseDownPos.distance(e.stageX, e.stageY) >= 20) {
                this._mouseDownPos = null;
            }
            this.c_img_kongzi2.x = e.stageX;
            this.c_img_kongzi2.y = e.stageY;
            var p = new Laya.Point(e.stageX, e.stageY);
            var rotate = getRotate(this.beginPos, p);
            var dis = p.distance(this.beginPos.x, this.beginPos.y);
            MoveManager.instance.rotate = rotate * -1;
            MoveManager.instance.dis = Math.min(1.0, dis / 100);
        }
        updatePorpCount() {
            this.c_comp_chaopiao1.getChildByPath("text_shuzi").asTextField.text =
                LogicProp$1.instance.get(EPropNameById$1.diamonds) + "";
            this.c_comp_chaopiao2.getChildByPath("text_shuzi").asTextField.text =
                LogicProp$1.instance.get(EPropNameById$1.Zuanshi) + "";
        }
        updateStar() {
            let star = LogicRoom.instance.star;
            this.c_progress_star.getChildByPath("lbl_lvv").asTextField.text = star + "";
            let max = GameData.getLevelItem(LogicData.instance.roomId).MaxStar;
            let pro = Math.min(100, Math.floor((star / max) * 100));
            this.c_progress_star.getChildByPath("title").asTextField.text = pro + "%";
            this.c_progress_star.value = pro;
        }
        onFlyStar(propId, pos, flyCount = 5) {
            SceneMgr.Int.projectPostionTo2D(pos, this.outPos);
            for (var i = 0; i <= flyCount; i++) {
                let dengji = fairygui.UIPackage.createObject("common", "comp_money").asCom;
                dengji.getController("c1").selectedIndex = propId;
                dengji.x = this.outPos.x + (Math.random() * 100 - 50);
                dengji.y = this.outPos.y + (Math.random() * 100 - 50);
                this.addChild(dengji);
                let toPos = this.c_progress_star.displayObject.localToGlobal(new Laya.Point(10, 10));
                Laya.Tween.to(dengji, { x: toPos.x, y: toPos.y }, 1000, null, Laya.Handler.create(this, (money) => {
                    money.dispose();
                }, [dengji]), i * 20);
            }
        }
        click_diamond() {
            let BoxData = SceneMgr.Int.playerController.BoxData;
            SceneMgr.Int.playerController.ColliderPropBox(BoxData.prop.propId);
        }
        click_box() {
            let BoxData = SceneMgr.Int.playerController.BoxData;
            SceneMgr.Int.playerController.ColliderPropBox(BoxData.prop.propId);
        }
        click_vip() {
            let VipData = SceneMgr.Int.playerController.VipData;
            SceneMgr.Int.playerController.ColliderPropBox(VipData.prop.propId);
        }
        click_zuoqi() {
            let transportData = SceneMgr.Int.playerController.transportData;
            if (transportData.state == 1) {
                SceneMgr.Int.playerController.ColliderPropBox(transportData.prop.propId);
            }
        }
        updateBox() {
            let BoxData = SceneMgr.Int.playerController.BoxData;
            if (BoxData.state == 1) {
                if (BoxData.type == NBox.Diamond) {
                    this.c_btn_diamond.visible = true;
                    this.c_btn_diamond.getChildByPath("text_time").asTextField.text =
                        this.toTime(BoxData.showMax - BoxData.time);
                }
                else {
                    this.c_btn_box.visible = true;
                    this.c_btn_box.getChildByPath("text_time").asTextField.text =
                        this.toTime(BoxData.showMax - BoxData.time);
                }
            }
            else {
                this.c_btn_diamond.visible = this.c_btn_box.visible = false;
            }
        }
        updateVip() {
            let VipData = SceneMgr.Int.playerController.VipData;
            if (VipData.state == 1) {
                this.c_btn_vip.visible = true;
                this.c_btn_vip.getChildByPath("n5").asTextField.text = this.toTime(VipData.showMax - VipData.time);
            }
            else {
                this.c_btn_vip.visible = false;
            }
        }
        updateTransport() {
            let transportData = SceneMgr.Int.playerController.transportData;
            if (transportData.state == 1) {
                this.c_btn_zuoqi.visible = true;
                this.c_btn_zuoqi.getChildByPath("Progress_zuoqi").asProgress.value = 100;
                this.text_time_zuoqi.text = this.toTime(transportData.showMax - transportData.time);
                this.loader_icon_zuoqi.url = UIMgr.instance.iconUrl(ABox.GetIconName(transportData.type));
            }
            else if (transportData.state == 2) {
                this.c_btn_zuoqi.visible = true;
                this.c_btn_zuoqi.getChildByPath("Progress_zuoqi").asProgress.value = 0;
                this.text_time_zuoqi.text = this.toTime(transportData.useMax - transportData.time);
                this.loader_icon_zuoqi.url = UIMgr.instance.iconUrl(ABox.GetIconName(transportData.type));
            }
            else {
                this.c_btn_zuoqi.visible = false;
            }
        }
        onUpdate() {
            if (SceneMgr.Int.playerController) {
                this.updateBox();
                this.updateVip();
                this.updateTransport();
            }
            this.c_btn_dianti.visible = LogicData.instance.isDianTi == 1;
        }
        toTime(t) {
            let as = Math.floor(t / 1000);
            let m = Math.floor(as / 60);
            let s = Math.floor(as % 60);
            return (m < 10 ? "0" + m : "" + m) + ":" + (s < 10 ? "0" + s : "" + s);
        }
        click_setting(e) {
            UIMgr.instance.openUI(ModuleType.UISetting);
        }
        click_choujiang() {
            UIMgr.instance.openUI(ModuleType.Choujiang);
        }
        click_zhuangbei() {
            UIMgr.instance.openUI(ModuleType.Skin);
        }
        click_qiandao() {
            UIMgr.instance.openUI(ModuleType.Sign);
        }
        click_dianti() {
            UIMgr.instance.openUI(ModuleType.Dianti);
        }
        click_shuangbeishouyi() {
            if (SceneMgr.Int.playerData.isMoney == false) {
                GameSDK.showADVideo(this, (b) => {
                    if (b) {
                        SceneMgr.Int.playerData.start_Money(Laya.Handler.create(this, this.onStopMoney));
                    }
                }, "双倍收益");
            }
        }
        onStopMoney() { }
        click_wuxianbeibao() {
            if (SceneMgr.Int.playerData.isBag == false) {
                GameSDK.showADVideo(this, (b) => {
                    if (b) {
                        SceneMgr.Int.playerData.start_Bag(Laya.Handler.create(this, this.onStopBag));
                    }
                }, "无限背包");
            }
        }
        onStopBag() { }
        onClose() {
            Laya.timer.clearAll(this);
            SceneMgr.Int.clickSprite.removeSelf();
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_DOWN, this, this.onMouseDownHandler);
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_UP, this, this.onMouseUpHandler);
            SceneMgr.Int.clickSprite.off(Laya.Event.MOUSE_OUT, this, this.onMouseUpHandler);
            EventMgr.Int.off(EventType.PropChange, this.updatePorpCount, this);
            EventMgr.Int.off(EventType.FLY_STAR, this.onFlyStar, this);
            EventMgr.Int.off(EventType.StarChange, this.updateStar, this);
            AdMgr.inst.showRightAd(false);
            AdMgr.inst.showBottomAd(false);
        }
        startVideoRecord() {
            this.isRecord = true;
            this.c_btn_lushipin.selected = !this.isRecord;
            GameSDK.startVideoRecord();
        }
        click_lushipin() {
            if (this.isRecord) {
                this.isRecord = false;
                GameSDK.stopVideoRecord();
                this.c_btn_lushipin.selected = !this.isRecord;
            }
            else {
                GameSDK.shareVideoRecord((isSucees) => {
                    this.startVideoRecord();
                });
            }
        }
        click_gengduo() {
            console.log("moreGame");
            GameSDK.showGamePortal();
        }
        click_fenxiang() {
        }
    }

    class ButtonEffect extends Laya.Script {
        onAwake() {
            this.node = fgui.GObject.cast(this.owner);
        }
        onEnable() {
            if (this._tween)
                this._tween.clear();
            if (!GameSDK.isCurrentVersion) {
                Laya.timer.once(1300, this, () => {
                    this.showBtnMaxEffect();
                });
            }
        }
        showBtnMaxEffect() {
            if (this._tween)
                this._tween.clear();
            this._tween = Laya.Tween.to(this.node, { scaleX: 1.2, scaleY: 1.1 }, 600, null, Laya.Handler.create(this, () => {
                this._tween.clear();
                this.showBtnMinEffect();
            }));
        }
        showBtnMinEffect() {
            if (this._tween)
                this._tween.clear();
            this._tween = Laya.Tween.to(this.node, { scaleX: 1, scaleY: 1 }, 600, null, Laya.Handler.create(this, () => {
                this._tween.clear();
                this.showBtnMaxEffect();
            }));
        }
        onDestroy() {
            if (this._tween)
                this._tween.clear();
        }
    }

    var E_UISignItem_State;
    (function (E_UISignItem_State) {
        E_UISignItem_State[E_UISignItem_State["\u672A\u9886\u53D6"] = 0] = "\u672A\u9886\u53D6";
        E_UISignItem_State[E_UISignItem_State["\u5DF2\u9886\u53D6"] = 1] = "\u5DF2\u9886\u53D6";
    })(E_UISignItem_State || (E_UISignItem_State = {}));
    class LogicSign {
        constructor() {
            this.signinfo = { sign_index: 0, sign_time: 0 };
            this.signId = 4;
        }
        initData() {
            this.signinfo = LocalCache$1.get("LogicSign.signinfo", this.signinfo);
            this.signId = LocalCache$1.get("LogicSign.signId", this.signId);
        }
        save() {
            LocalCache$1.set("LogicSign.signinfo", this.signinfo);
            LocalCache$1.set("LogicSign.signId", this.signId);
        }
        saveinfo(signId, signinfo) {
            this.signId = signId;
            this.signinfo = signinfo;
            this.save();
        }
    }
    LogicSign.instance = new LogicSign();

    class BaseUI extends UIBase {
        findNode(node, path) {
            var list = path.split("/");
            for (var i = 0; i < list.length; i++) {
                node = node.getChild(list[i]).asCom;
                if (node == null) {
                    console.log("findNode: Not found", list[i]);
                    return null;
                }
            }
            return node;
        }
        childPath(path) {
            return this.findNode(this, path);
        }
        child(name) {
            return this.getChild(name);
        }
        childAt(index) {
            return this.getChildAt(index);
        }
        remove() {
            this.closeUI(true);
        }
        onDestroy() {
            this.onRemove();
        }
        onRemove() {
        }
        parseUI() {
        }
        onShow() { }
        ;
        onHide() { }
        ;
    }

    class UISign extends BaseUI {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_shuzi",
            });
            this.c_btn_adSkin = null;
        }
        onOpen() {
            console.log("========签到=======")
            showInterAd();
            this.updateUI();
            if (!this.c_btn_adSkin.displayObject.getComponent(ButtonEffect))
                this.c_btn_adSkin.displayObject.addComponent(ButtonEffect);
        }
        updateUI() {
            let bSignTody = false;
            if (LogicSign.instance.signinfo.sign_time != 0) {
                if (UISign.checkIsTody(LogicSign.instance.signinfo.sign_time)) {
                    bSignTody = true;
                }
            }
            let sign_index = LogicSign.instance.signinfo.sign_index % 7;
            if (sign_index == 0 && bSignTody)
                sign_index = 7;
            for (var i = 0; i < 7; ++i) {
                let node = this.GetGameObject("comp_day" + (i + 1)).asCom;
                let cfg = GameData.getSignItem(i + 1);
                console.log(cfg, i);
                if (cfg.Type == 1 && LogicSkin.instance.has(cfg.SkinId)) {
                    cfg = GameData.getSignItem(cfg.NextId);
                }
                let skin = GameData.getSkinItem(cfg.SkinId);
                if (i == 6) {
                    if (cfg.Type == 0) {
                        node.getChildByPath("text_reward_gold").asTextField.text = cfg.Gold + "";
                    }
                    else {
                        node.getChildByPath("text_reward_gold").asTextField.text = cfg.Gold + "";
                    }
                }
                else {
                    if (cfg.Type == 0) {
                        node.getChildByPath("text_gold").asTextField.text = cfg.Gold + "";
                    }
                    else {
                        node.getChildByPath("name_skin").asLoader.url = UIMgr.instance.iconUrl(skin.NameImgUrl);
                        node.getChildByPath("skin").asLoader.url = UIMgr.instance.iconUrl(skin.ImgUrl);
                    }
                }
                if (i == sign_index) {
                    node.getController("c1").selectedIndex = 1;
                }
                else if (i < sign_index) {
                    node.getController("c1").selectedIndex = 2;
                }
                else {
                    node.getController("c1").selectedIndex = 0;
                }
                cfg = this.getTodySign();
                if (cfg.Type == 1) {
                    this.GetGameObject("btn_adSkin").visible = false;
                }
                this.getController("c1").selectedIndex = bSignTody ? 1 : 0;
            }
            if (bSignTody == false) {
                {
                    this.getController("c2").selectedIndex = 0;
                }
            }
            AdMgr.inst.showInsertAd();
        }
        static checkIsTody(time) {
            var date = new Date(time);
            var dateNow = new Date();
            let bNewDay = false;
            if (date.getFullYear() == dateNow.getFullYear() &&
                date.getMonth() == dateNow.getMonth() &&
                date.getDate() == dateNow.getDate()) {
                bNewDay = true;
            }
            return bNewDay;
        }
        getTodySign() {
            let bSignTody = false;
            if (LogicSign.instance.signinfo.sign_time != 0) {
                if (UISign.checkIsTody(LogicSign.instance.signinfo.sign_time)) {
                    bSignTody = true;
                }
            }
            let index = LogicSign.instance.signinfo.sign_index;
            if (bSignTody)
                index--;
            return GameData.getSignItem((index % 7) + 1);
        }
        onClickBtn(e, name) {
            switch (name) {
                case "btn_ad":
                    GameSDK.showADVideo(this, (state) => {
                        if (state) {
                            this.getVidioAward(3);
                        }
                    }, "签到观看视频");
                    break;
                case "btn_get":
                    this.getVidioAward();
                    break;
            }
        }
        click_close1() {
            this.getVidioAward();
            this.closeUI();
        }
        click_close2() {
            this.getVidioAward();
            this.closeUI();
        }
        click_zhijielingqu() {
            this.getVidioAward();
            this.closeUI();
        }
        click_fabhui() {
            this.closeUI();
        }
        click_get() {
            this.getVidioAward();
            this.closeUI();
        }
        click_ad() {
            GameSDK.showADVideo(this, (state) => {
                if (state) {
                    this.getVidioAward(3);
                }
            }, "签到观看视频");
        }
        getVidioAward(beisu = 1) {
            let bSignTody = false;
            if (LogicSign.instance.signinfo.sign_time != 0) {
                if (UISign.checkIsTody(LogicSign.instance.signinfo.sign_time)) {
                    bSignTody = true;
                }
            }
            if (bSignTody) {
                return;
            }
            console.log("签到");
            LogicSign.instance.signinfo.sign_index++;
            LogicSign.instance.signinfo.sign_time = new Date().getTime();
            LogicSign.instance.save();
            this.updateUI();
            let info = this.getTodySign();
            if (info.Type == 0) {
                LogicProp$1.instance.add(EPropNameById$1.diamonds, info.Gold * beisu, true);
            }
            else {
                LogicProp$1.instance.add(EPropNameById$1.Zuanshi, info.Gold * beisu, true);
                this.closeUI();
            }
        }
    }

    class UIBattle extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count",
            });
        }
        onCreate() {
            this.initEvent();
        }
        initEvent() {
        }
        onOpen() {
        }
    }

    class UIShare extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count",
            });
            this.c_loader_img = null;
            this.c_loader_icon = null;
            this.c_text_count = null;
            this.c_comp_shareCom = null;
            this.c_comp_share = null;
            this._shareCount = 0;
            this._skinId = 0;
            this._shareGold = 200;
        }
        onCreate() {
            this.c_comp_share.onClick(this, this.onShareClickHandler.bind(this));
        }
        onOpen() {
            SceneMgr.Int.dramCameraToImage(this.c_loader_img.displayObject);
            FguiBase$3.get_controller(this.c_comp_shareCom, "c1");
            this._skinId = LogicSkin.instance.getEndRandomUnlockId(3);
            if (!!GameSDK.isCurrentVersion)
                this._skinId = -1;
            this._shareGold = GameData.getConfigDataItem("ShareGold");
            AdMgr.inst.showRightAd(false);
            AdMgr.inst.showBottomAd(false);
        }
        onClose() {
            AdMgr.inst.showRightAd(true);
            AdMgr.inst.showBottomAd(true);
        }
        onShareClickHandler() {
            this.click_share();
        }
        click_share() {
            GameSDK.shareVideoRecord((isSucees) => {
                if (isSucees) {
                    LogicData.instance.isShare = true;
                    this.closeUI(true);
                }
            });
        }
    }

    class UIAdExchangeMoney extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count",
            });
            this.c_btn_get = null;
        }
        onCreate() {
            this.c_btn_get.displayObject.addComponent(ButtonEffect);
        }
        onOpen() {
            FguiBase$3.find_children_names_once_node(this, "text_gold").asLabel.text = "+" + GameData.getConfigDataItem("VIDEO_ADD_GOLD");
        }
        click_get() {
            GameSDK.showADVideo(this, (state) => {
                if (state) {
                    LogicProp.instance.add(EPropNameById.diamonds, GameData.getConfigDataItem("VIDEO_ADD_GOLD"), true);
                    this.closeUI();
                }
            }, "免费补给");
        }
    }

    class UIGlodAnimFly extends UIBase {
        onCreate() {
            this.touchable = false;
        }
        onOpen() {
            AudioMgr$1.instance.play_sound(6);
            this._anim = this.getTransition("t0");
            this._anim.play(Laya.Handler.create(this, this.onPlayEndHandler), 1, 0, 0);
        }
        onPlayEndHandler() {
            this.click_close();
        }
    }

    var E_UISetting_Type;
    (function (E_UISetting_Type) {
        E_UISetting_Type[E_UISetting_Type["\u5F00\u542F"] = 0] = "\u5F00\u542F";
        E_UISetting_Type[E_UISetting_Type["\u5173\u95ED"] = 1] = "\u5173\u95ED";
    })(E_UISetting_Type || (E_UISetting_Type = {}));
    class UISetting extends UIBase {
        constructor() {
            super(...arguments);
            this.c_btn_yinyue = null;
            this.c_btn_yinxiao = null;
            this.c_btn_shock = null;
            this.c_btn_caidanqiang = null;
            this.c_img_guang = null;
            this.c_comp_shezhineirong = null;
        }
        onOpen() {
            this.c_btn_yinyue.changeStateOnClick = false;
            this.c_btn_yinxiao.changeStateOnClick = false;
            this.c_btn_shock.changeStateOnClick = false;
            this.refresh();
            GameSDK.showCustomAd("path");
            GameSDK.hideBanner();
            console.log(this)
            this.getChildAt(1).getChildAt(7).visible = false;
            this.getChildAt(1).getChildAt(5).visible = false;
            this.getChildAt(1).getChildAt(12).visible = false;
            this.c_btn_shock.visible = false;
        }
        click_yinyue() {
            if (AudioMgr$1.instance.is_music) {
                AudioMgr$1.instance.close_music();
            }
            else {
                AudioMgr$1.instance.open_music();
            }
            this.refresh();
        }
        click_xieyi() {
            GameSDK.hideBanner();
            UIMgr.instance.openUI("UIyinsi1", 2);
        }
        onClose() {
            GameSDK.hideBanner();
            GameSDK.closeCustomAd();
        }
        click_yinxiao() {
            if (AudioMgr$1.instance.is_sound) {
                AudioMgr$1.instance.close_sound();
            }
            else {
                AudioMgr$1.instance.open_sound();
            }
            this.refresh();
        }
        click_shock() {
            if (LogicShock.instance.is_open())
                LogicShock.instance.close();
            else
                LogicShock.instance.open();
            this.refresh();
        }
        refresh() {
            if (this.c_btn_yinxiao) {
                this.c_btn_yinxiao.selected = !AudioMgr$1.instance.is_sound;
            }
            if (this.c_btn_yinyue) {
                this.c_btn_yinyue.selected = !AudioMgr$1.instance.is_music;
            }
            this.c_btn_shock.selected = !LogicShock.instance.is_open();
        }
        click_caidanqiang() {
            UIMgr.instance.openUI(ModuleType.ExChangeCode);
            this.closeUI();
        }
        click_guang() {
            if (LogicData.instance.is_Guang)
                LogicData.instance.is_Guang = 0;
            else
                LogicData.instance.is_Guang = 1;
            this.refresh();
        }
        click_liuchang() {
            if (LogicData.instance.is_Fast)
                LogicData.instance.is_Fast = 0;
            else
                LogicData.instance.is_Fast = 1;
            this.refresh();
        }
        click_fanhui() {
            this.closeUI();
        }
    }

    class UILoad extends UIBase {
    }

    class UIComboEffect extends UIBase {
        onCreate() {
            this.touchable = false;
        }
        onOpen() {
            this.controllerOnce.setSelectedIndex(this.openData);
            this._anim = this.getTransition("t0");
            this._anim.play(Laya.Handler.create(this, this.onPlayEndHandler), 1, 0, 0);
        }
        onPlayEndHandler() {
            this.click_close();
        }
    }

    class UIFailEffect extends UIBase {
        onCreate() {
            this.touchable = false;
        }
        onOpen() {
            this._anim = this.getTransition("t0");
            this._anim.play(Laya.Handler.create(this, this.onPlayEndHandler), 1, 0, 0);
        }
        onPlayEndHandler() {
            this.click_close();
        }
    }

    class UIAdShare extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count",
            });
            this.c_loader_img = null;
            this.c_comp_share = null;
            this._shareCount = 0;
            this._skinId = 0;
            this._shareGold = 200;
        }
        onCreate() {
            this.c_comp_share.onClick(this, this.onShareClickHandler.bind(this));
        }
        onOpen() {
            SceneMgr.Int.dramCameraToImage(this.c_loader_img.displayObject);
        }
        onShareClickHandler() {
            this.click_share();
        }
        click_share() {
            GameSDK.shareVideoRecord((isSucees) => {
                this.closeUI(true, isSucees);
            });
        }
    }

    class UIRank extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count",
            });
            this.c_comp_selfRank = null;
            this.c_list_paihang = null;
        }
        onOpen() {
            UserData.getUserData(this.updataSecletHander, this, false);
            this.c_comp_selfRank.visible = false;
            this.c_list_paihang.visible = false;
        }
        updataSecletHander() {
            UserData.requestRankList(this._requestRankComplete, this);
        }
        _requestRankComplete(code, res) {
            this.c_comp_selfRank.visible = true;
            this.c_list_paihang.visible = true;
            this.c_list_paihang.removeChildren();
            var rankMy = -1;
            if (code == 0) {
                rankMy = res.rankMy.rank;
                let rankList = res.rankList;
                for (var i = 0; i < rankList.length; ++i) {
                    let value = rankList[i];
                    this.c_list_paihang.addItem().init(value, i + 1);
                }
                this.showNoRankList(6 - rankList.length);
            }
            else {
                this.showNoRankList(6);
            }
            var myData = {
                userid: UserData.userData.userid,
                avatar: UserData.userData.avatar,
                nickname: UserData.userData.nickname,
                score: LogicProp$1.instance.get(EPropNameById$1.tooth),
                compose_num: rankMy
            };
            if (rankMy > 0) {
                this.c_comp_selfRank.init(myData, rankMy);
            }
            else {
                this.c_comp_selfRank.visible = false;
            }
        }
        showNoRankList(coutn) {
            for (var i = 0; i < coutn; i++) {
                this.c_list_paihang.addItem().init(null, i + 1);
            }
        }
    }

    class UIRankItem extends UIBase {
        constructor() {
            super(...arguments);
            this.c_loader_icon = null;
            this.c_text_mingci = null;
            this.c_loader_touxiang = null;
            this.c_text_fenshu = null;
            this.c_text_id = null;
            this._data = 0;
            this._rank = 0;
        }
        init(value, rank) {
            this._data = value;
            this._rank = rank;
            if (this._data) {
                if (this._rank <= 3) {
                    this.getController("c1").selectedIndex = 0;
                    this.c_loader_icon.url = UIMgr.instance.iconUrlPack("img_rank" + this._rank, "paihangbang");
                }
                else {
                    this.getController("c1").selectedIndex = 1;
                    this.c_text_mingci.text = "" + this._rank;
                }
                this.c_loader_touxiang.url = this._data.avatar;
                this.c_text_fenshu.text = "最佳分数:" + this._data.score;
                this.c_text_id.text = this._data.nickname;
            }
            else {
                this.getController("c1").selectedIndex = 2;
            }
        }
        click_xiangqing() {
            UserData.getPlayerDetail(this._data, this._showView.bind(this));
        }
        _showView(data) {
            if (data == undefined || data.length <= 0) {
                GameSDK.showToast("暂无详情", 1000);
                return;
            }
            UIMgr.instance.openUI(ModuleType.UIXiangqing, { info: data });
        }
    }

    class LookSceneShow3D {
        constructor() {
            this.scene = null;
            this.camera = null;
            this._RenderTexture_sprite = null;
            this.cubeNodes = [];
            this.info = null;
            this.initScene();
        }
        initScene() {
            let urls = [
                RescoureData.LOOK_SCENE,
            ];
            ResourcesMgr$1.instance.loadDir(urls, () => {
                this.onLoadSceneCompleteHandler(ResourcesMgr$1.instance.get(RescoureData.LOOK_SCENE));
            }, null, true);
        }
        onLoadSceneCompleteHandler(scene) {
            this.scene = scene;
            Laya.stage.addChildAt(this.scene, 0);
            this.camera = this.scene.getChildByName("Camera").getChildByName("MainCamera");
            this.drawImage(this._RenderTexture_sprite);
            this.createCube();
        }
        clearRenderTexture() {
            if (this._RenderTexture_sprite)
                this._RenderTexture_sprite.graphics.clear();
            this._RenderTexture_sprite = null;
        }
        setRenderTexture(sprite) {
            this._RenderTexture_sprite = sprite;
            this.drawImage(sprite);
        }
        addInfo(info) {
            this.info = info;
            this.createCube();
        }
        drawImage(sprite) {
            if (this.camera && sprite) {
                this.camera.clearColor.setValue(0, 0, 0, 0);
                this.camera.clearFlag = Laya.BaseCamera.CLEARFLAG_SKY;
                this.camera.renderingOrder = -1;
                this.camera.renderTarget = new Laya.RenderTexture(sprite.width, sprite.height, Laya.BaseTexture.FORMAT_R8G8B8A8);
                sprite.graphics.drawImage(new Laya.Texture(this.camera.renderTarget, Laya.Texture.DEF_UV));
            }
        }
        createCube() {
        }
        addChild(node, zIndex = null) {
            if (zIndex == null)
                zIndex = this.scene.numChildren;
            this.scene.addChildAt(node, zIndex);
        }
        destroy() {
            this.clearRenderTexture();
            if (this.scene) {
                this.scene.removeSelf();
            }
            for (var i = 0; i < this.cubeNodes.length; i++) {
                this.cubeNodes[i].destroy();
            }
            this.cubeNodes = [];
        }
    }

    class UIXiangqing extends UIBase {
        constructor() {
            super(...arguments);
            this.c_loader_bg = null;
        }
        onOpen() {
            this._scene3D = new LookSceneShow3D();
            this._scene3D.setRenderTexture(this.c_loader_bg.displayObject);
            let info = this.openData.info;
            this._scene3D.addInfo(info);
        }
        onClose() {
            this._scene3D.destroy();
        }
    }

    class UIInvate extends UIBase {
        constructor() {
            super(...arguments);
            this.c_comp_tanchuang = null;
            this.c_btn_add1 = null;
            this.c_btn_add2 = null;
            this.c_img_head1 = null;
            this.c_img_head2 = null;
            this.c_text_cishu = null;
        }
        onOpen() {
            if (!!!this.openData) {
                this.openData = 0;
            }
            this.c_img_head1.visible = this.openData <= 0;
            this.c_img_head2.visible = this.openData <= 1;
            if (LogicData.instance.Transport > 0) {
                this.c_comp_tanchuang.getController("c1").selectedIndex = 1;
                this.c_text_cishu.text = 0 + "/2";
            }
            else {
                this.c_comp_tanchuang.getController("c1").selectedIndex = 0;
                this.c_text_cishu.text = this.openData + "/2";
            }
            AdMgr.inst.showBottomAd(false);
            {
                this.c_comp_tanchuang.getController("c2").selectedIndex = 0;
            }
        }
        onClose() {
            AdMgr.inst.showBottomAd(true);
        }
        _onClickShare() {
            ReportMgr.inst.sendReport(ReportType.INVATE_FRIEND, false);
            GameSDK.shareMsg(this, s => {
            }, "邀请好友");
        }
        click_add1() {
            this._onClickShare();
        }
        click_add2() {
            this._onClickShare();
        }
        click_yaoqing() {
            this._onClickShare();
        }
        click_close1() {
            super.click_close();
        }
        click_close2() {
            super.click_close();
        }
        click_close3() {
            super.click_close();
        }
        click_try() {
        }
    }

    class SceneShow3D {
        constructor() {
            this._RenderTexture_sprite = null;
            this.initScene();
            this.initCamera();
            this.initLight();
        }
        initScene() {
            this.scene = new Laya.Scene3D();
            Laya.stage.addChildAt(this.scene, 0);
        }
        initCamera() {
            this.camera = new Laya.Camera(0, 0.01, 1000);
            this.scene.addChild(this.camera);
            this.camera.transform.position = new Laya.Vector3(0.042, 0.458, 1.895);
            this.camera.transform.rotation = new Laya.Quaternion(-0.1851228, 0, 0, 0.9827154);
            this.camera.orthographic = true;
            this.scene.ambientColor = new Laya.Vector3(0.57647, 0.57647, 0.57647);
            this.camera.orthographicVerticalSize = 1;
        }
        initLight() {
            var directionLight = new Laya.DirectionLight();
            this.scene.addChild(directionLight);
            directionLight.color = new Laya.Vector3(1, 1, 1);
            directionLight.transform.position = new Laya.Vector3(0, 3, 0);
            directionLight.transform.rotation = new Laya.Quaternion(0.1421868, 0.2078838, 0.9192984, -0.3024198);
            directionLight.intensity = 1;
        }
        clearRenderTexture() {
            if (this._RenderTexture_sprite)
                this._RenderTexture_sprite.graphics.clear();
            this._RenderTexture_sprite = null;
        }
        setRenderTexture(sprite) {
            this._RenderTexture_sprite = sprite;
            this.camera.clearColor.setValue(0, 0, 0, 0);
            this.camera.clearFlag = Laya.BaseCamera.CLEARFLAG_SKY;
            this.camera.renderingOrder = -1;
            this.camera.renderTarget = new Laya.RenderTexture(sprite.width, sprite.height, Laya.BaseTexture.FORMAT_R8G8B8A8);
            sprite.graphics.drawImage(new Laya.Texture(this.camera.renderTarget, Laya.Texture.DEF_UV));
        }
        addChild(node, zIndex = null) {
            if (zIndex == null)
                zIndex = this.scene.numChildren;
            this.scene.addChildAt(node, zIndex);
        }
        get playerNode() {
            if (!this._playerNode) {
                this._playerNode = new Laya.Sprite3D;
                this.scene.addChild(this._playerNode);
                this._playerNode.transform.localPosition = new Laya.Vector3(0, -0.60, 0);
                this._playerNode.transform.rotationEuler = v3_zeor;
            }
            return this._playerNode;
        }
        destroy() {
            this.clearRenderTexture();
            if (this.scene) {
                this.scene.destroy();
                this.scene = null;
            }
            this.camera = null;
        }
    }

    class UISkin extends UIBase {
        constructor() {
            super(...arguments);
            this.ConfigUI = new ConfigUI({
                event_refresh_gold_node: "text_cur_gold_count_2",
            });
            this.c_loader_mode = null;
            this.c_list_01 = null;
            this._curSelectionId = -1;
            this.c_text_jiesuogold = null;
            this.c_comp_chaopiao1 = null;
            this.c_comp_chaopiao4 = null;
            this.c_comp_chaopiao3 = null;
            this.c_comp_chaopiao2 = null;
            this.c_btn_gensui = null;
            this.c_btn_chengzuo = null;
        }
        onCreate() {
        }
        onOpen() {
            this.controllerOnce.setSelectedIndex(0);
            this._scene3D = new SceneShow3D();
            this._scene3D.setRenderTexture(this.c_loader_mode.displayObject);
            let skins = GameData.getSkin();
            this.c_list_01.removeChildren();
            let arr = [];
            for (let key in skins) {
                if (skins[key].Type == 1) {
                    arr.push(skins[key]);
                }
            }
            this.controllerOnce.setSelectedIndex(0);
            for (var i = 0; i < arr.length; ++i) {
                let value = arr[i];
                this.c_list_01.addItem().init(Number(value.Id));
            }
            let count = 1;
            for (let j = 0; j < count; j += 1) {
                this.c_list_01.addItem().init(-1);
            }
            this.c_list_01.on(fairygui.Events.CLICK_ITEM, this, this.on_event_list_click_item);
            let skin = Number(LogicSkin.instance.skin);
            this._curSelectionId = skin;
            this.c_btn_gensui.visible = this.c_btn_chengzuo.visible = skin != 0;
            this.refresh_mode(skin);
            this.refresh_items();
            AdMgr.inst.showRightAd(false);
            AdMgr.inst.showBottomAd(false);
            this.updatePorpCount();
            EventMgr.Int.on(EventType.PropChange, this.updatePorpCount, this);
            this.getController("c2").selectedIndex = LogicSkin.instance.getPetState();
        }
        on_event_list_click_item(item, e) {
            if (!item.value)
                return;
            UISkin.isWathch = false;
            UISkin.isComplete = false;
            if (item.value) {
                if (LogicSkin.instance.has(item.value.Id)) {
                    LogicSkin.instance.use(item.value.Id);
                    this._curSelectionId = item.value.Id;
                }
                else {
                    let index = item.value.UnLockType.indexOf(1);
                    if (index >= 0) {
                        if (LogicProp$1.instance.has(EPropNameById$1.diamonds, item.value.UnLockValue[index])) {
                            let count = 0 - item.value.UnLockValue[index];
                            LogicProp$1.instance.add(EPropNameById$1.diamonds, count);
                            LogicSkin.instance.getSkin(item.value.Id, true);
                            LogicSkin.instance.use(item.value.Id, false);
                            GameSDK.sendEvent("金币解锁" + item.value.Name, "");
                            this.closeUI();
                            return;
                        }
                        else {
                            TipMgr.Int.showTips("金币不足");
                        }
                    }
                    else if (item.value.UnLockType.indexOf(4) >= 0) {
                        TipMgr.Int.showTips("该皮肤在彩蛋墙中解锁");
                        return;
                    }
                    else {
                        TipMgr.Int.showTips("还未解锁该皮肤");
                    }
                }
                if (UISkin.isWathch == false) {
                    this.refresh_items();
                    this.refresh_mode(this._curSelectionId);
                }
            }
        }
        refresh_mode(id) {
            let preafbName = "";
            let scale = 0.3;
            let pos = new Laya.Vector3(0, 0, 0);
            let Euler = new Laya.Vector3(0, -45, 0);
            let itemData = GameData.getSkinItem(id);
            if (!itemData) {
                preafbName = "Egg01";
                scale = 0.5;
            }
            else {
                preafbName = itemData.PrefabName;
                scale = itemData.Scale;
                if (itemData.Type == 1) ;
                else {
                    if (itemData.Id != 5) {
                        Euler = new Laya.Vector3(0, 0, -60);
                        pos.x = -0.4;
                    }
                    else {
                        pos.y = 0.2;
                    }
                }
            }
            LogicSkin.instance.loadNode(preafbName, Laya.Handler.create(this, (node) => {
                this._scene3D.playerNode.destroyChildren();
                node = Laya.Sprite3D.instantiate(node);
                this._scene3D.playerNode.addChild(node);
                node.transform.localPosition = pos;
                node.transform.localRotationEuler = Euler;
                node.transform.localScale = new Laya.Vector3(scale, scale, scale);
            }));
        }
        refresh_items() {
            if (this.controllerOnce.selectedIndex == 0) {
                for (let value of this.c_list_01._children) {
                    if (value.value)
                        value.refresh(value.value.Id == this._curSelectionId, 1);
                    else
                        value.refresh(false, 1);
                }
            }
            else if (this.controllerOnce.selectedIndex == 1) {
                for (let value of this.c_list_01._children) {
                    if (value.value)
                        value.refresh(value.value.Id == this._curSelectionId, 1);
                    else
                        value.refresh(false, 1);
                }
            }
        }
        click_suiji() {
            let skinId = LogicSkin.instance.getEndRandomUnlockId(1);
            if (skinId > 0) {
                let needCount = GameData.getConfigDataItem("RANDOM_UNLOCK_GOLD");
                if (LogicProp$1.instance.has(EPropNameById$1.diamonds, needCount, true)) {
                    LogicProp$1.instance.add(EPropNameById$1.diamonds, -needCount);
                    LogicSkin.instance.getSkin(skinId, true);
                    this.refresh_items();
                    this.closeUI();
                }
            }
            else {
                TipMgr.Int.showTips("皮肤都已经解锁");
            }
        }
        click_gensui() {
            LogicSkin.instance.stPetState(0);
            this.refresh_items();
        }
        click_chengzuo() {
            LogicSkin.instance.stPetState(1);
            this.refresh_items();
        }
        updatePorpCount() {
            this.c_comp_chaopiao1.getChildByPath("text_shuzi").asTextField.text = LogicProp$1.instance.get(EPropNameById$1.diamonds) + "";
            this.c_comp_chaopiao4.getChildByPath("text_shuzi").asTextField.text = LogicProp$1.instance.get(EPropNameById$1.tooth) + "";
            this.c_comp_chaopiao2.getChildByPath("text_shuzi").asTextField.text = LogicProp$1.instance.get(EPropNameById$1.fish) + "";
            this.c_comp_chaopiao3.getChildByPath("text_shuzi").asTextField.text = LogicProp$1.instance.get(EPropNameById$1.chip) + "";
        }
        onClose() {
            if (this._scene3D) {
                this._scene3D.destroy();
                this._scene3D = null;
            }
            AdMgr.inst.showRightAd(true);
            AdMgr.inst.showBottomAd(true);
            EventMgr.Int.off(EventType.PropChange, this.updatePorpCount, this);
        }
        click_fanhui() {
            this.closeUI();
        }
        click_ad() {
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    LogicProp$1.instance.add(EPropNameById$1.diamonds, GameData.getConfigDataItem("VIDEO_ADD_GOLD"), true);
                }
            }, "皮肤商城看广告获得金币");
        }
        click_juese() {
            this.controllerOnce.setSelectedIndex(0);
            let skin = Number(LogicSkin.instance.skin);
            this._curSelectionId = skin;
            let skins = GameData.getSkin();
            let arr = [];
            for (let key in skins) {
                if (skins[key].Type == 1) {
                    arr.push(skins[key]);
                }
            }
            let index = 0;
            for (let value of this.c_list_01._children) {
                if (index < arr.length) {
                    value.init(Number(arr[index].Id));
                }
                else {
                    value.init(-1, 1);
                }
                index++;
            }
            this.refresh_items();
            this.refresh_mode(skin);
        }
        click_bozi() {
            this.controllerOnce.setSelectedIndex(1);
            let skin = Number(LogicSkin.instance.weapon);
            this._curSelectionId = skin;
            let skins = GameData.getSkin();
            let arr = [];
            for (let key in skins) {
                if (skins[key].Type == 2) {
                    arr.push(skins[key]);
                }
            }
            let index = 0;
            for (let value of this.c_list_01._children) {
                if (index < arr.length) {
                    value.init(Number(arr[index].Id));
                }
                else {
                    value.init(-1, 1);
                }
                index++;
            }
            this.refresh_items();
            this.refresh_mode(skin);
        }
    }
    UISkin.isWathch = false;
    UISkin.isComplete = false;

    var E_UISkinItem_state;
    (function (E_UISkinItem_state) {
        E_UISkinItem_state[E_UISkinItem_state["\u5DF2\u89E3\u9501"] = 0] = "\u5DF2\u89E3\u9501";
        E_UISkinItem_state[E_UISkinItem_state["\u6B63\u5728\u4F7F\u7528"] = 1] = "\u6B63\u5728\u4F7F\u7528";
        E_UISkinItem_state[E_UISkinItem_state["\u9009\u4E2D\u672A\u89E3\u9501"] = 2] = "\u9009\u4E2D\u672A\u89E3\u9501";
        E_UISkinItem_state[E_UISkinItem_state["\u672A\u89E3\u9501"] = 3] = "\u672A\u89E3\u9501";
    })(E_UISkinItem_state || (E_UISkinItem_state = {}));
    class UISkinItem extends FguiBase$3 {
        constructor() {
            super(...arguments);
            this.c_loader_tubiao = null;
            this.c_comp_jiesuofangshi = null;
            this.value = null;
            this.c_btn_shengji = null;
            this.c_text_Level = null;
            this.c_text_miaoshu1 = null;
            this.c_text_miaoshu2 = null;
            this.c_text_miaoshu3 = null;
            this.c_text_miaoshu4 = null;
            this.c_comp_jiantou1 = null;
            this.c_comp_jiantou2 = null;
            this.c_comp_jiantou3 = null;
            this.c_comp_jiantou4 = null;
            this.textList = [];
            this.jiantous = [];
            this.xiaoList = [];
            this.c_comp_xiao1 = null;
            this.c_comp_xiao2 = null;
            this.c_comp_xiao3 = null;
            this.moneys = null;
            this.isMaxLevel = false;
        }
        init(id, type = 1) {
            this.textList = [];
            this.jiantous = [];
            this.xiaoList = [];
            this.textList.push(this.c_text_miaoshu1);
            this.textList.push(this.c_text_miaoshu2);
            this.textList.push(this.c_text_miaoshu3);
            this.textList.push(this.c_text_miaoshu4);
            this.jiantous.push(this.c_comp_jiantou1);
            this.jiantous.push(this.c_comp_jiantou2);
            this.jiantous.push(this.c_comp_jiantou3);
            this.jiantous.push(this.c_comp_jiantou4);
            this.xiaoList.push(this.c_comp_xiao1);
            this.xiaoList.push(this.c_comp_xiao2);
            this.xiaoList.push(this.c_comp_xiao3);
            if (type == 1) {
                if (id == -1) {
                    this.value = null;
                    this.c_loader_tubiao.url = UIMgr.instance.iconUrl("img_pifu00");
                }
                else {
                    this.value = LogicSkin.instance.config(id);
                    this.c_loader_tubiao.url = UIMgr.instance.iconUrlPack(this.value.ImgUrl, "pifu");
                }
            }
        }
        get cur() {
            if (this.value.Type == 1) {
                return LogicSkin.instance.skin;
            }
        }
        refresh(isSelection = false, type) {
            let c1 = this.get_controller();
            if (type == 1) {
                if (this.value) {
                    this.c_comp_jiesuofangshi.visible = true;
                    let has = LogicSkin.instance.has(this.value.Id);
                    if (isSelection) {
                        c1.setSelectedIndex(has ? E_UISkinItem_state["正在使用"] : E_UISkinItem_state["选中未解锁"]);
                    }
                    else {
                        c1.setSelectedIndex(has ? E_UISkinItem_state["已解锁"] : E_UISkinItem_state["未解锁"]);
                    }
                    let c2 = this.c_comp_jiesuofangshi.getController("c2");
                    if (has) {
                        c2.selectedIndex = 0;
                        this.c_loader_tubiao.url = UIMgr.instance.iconUrlPack(this.value.ImgUrl, "pifu");
                        this.showSkinValue(this.value.Id, LogicSkin.instance.getSkinLevel(this.value.Id), true);
                        this.showUpgradeMoneys(this.value.Id, LogicSkin.instance.getSkinLevel(this.value.Id));
                    }
                    else {
                        this.showSkinValue(this.value.Id, LogicSkin.instance.getMaxLevel(this.value.Id));
                        if (this.value.Type == 1)
                            this.c_loader_tubiao.url = UIMgr.instance.iconUrlPack(this.value.ImgUrl_1, "pifu");
                        c2.selectedIndex = this.value.UnLockType[this.value.UnLockType.length - 1];
                    }
                }
                else {
                    c1.setSelectedIndex(4);
                    this.c_comp_jiesuofangshi.visible = false;
                }
            }
        }
        showSkinValue(skinId, level, isPetState = false) {
            let list = LogicSkin.instance.getSKinValues(skinId, level);
            if (this.value.Type == 1 && isPetState) {
                if (LogicSkin.instance.getPetState() == 0) {
                    list = list.slice(0, 2);
                }
                else {
                    list = list.slice(2, 4);
                }
            }
            let by = (201 - list.length * 37) / 2;
            for (var i = 0; i < this.textList.length; i++) {
                if (i < list.length) {
                    this.textList[i].visible = true;
                    this.jiantous[i].visible = true;
                    this.textList[i].y = by;
                    this.jiantous[i].y = by + 5;
                    by += 37;
                    this.textList[i].text = list[i].name + "+" + list[i].value;
                }
                else {
                    this.textList[i].visible = false;
                    this.jiantous[i].visible = false;
                }
            }
        }
        showUpgradeMoneys(skinId, level) {
            let maxLevel = LogicSkin.instance.getMaxLevel(skinId);
            this.c_text_Level.text = "Lv:" + level;
            if (level + 1 <= maxLevel) {
                this.isMaxLevel = false;
                this.c_btn_shengji.getController("c1").selectedIndex = 0;
                this.moneys = LogicSkin.instance.getUpgradeMoneys(skinId, level + 1);
                let by = (150 - this.moneys.length * 42) / 2;
                for (var i = 0; i < this.xiaoList.length; i++) {
                    if (i < this.moneys.length) {
                        this.xiaoList[i].visible = true;
                        this.xiaoList[i].y = by;
                        by += 42;
                        this.xiaoList[i].getChildByPath("text_shuliang").asTextField.text = this.moneys[i].value + "";
                        this.xiaoList[i].getChildByPath("loader_tubiao").asLoader.url = UIMgr.instance.iconUrlPack(LogicProp$1.instance.getIcon(this.moneys[i].propId), "common");
                    }
                    else {
                        this.xiaoList[i].visible = false;
                    }
                }
            }
            else {
                this.isMaxLevel = true;
                this.c_btn_shengji.getController("c1").selectedIndex = 1;
            }
        }
        click_shengji(e) {
            e.stopPropagation();
            if (this.isMaxLevel) {
                TipMgr.Int.showTips("最高等级");
            }
            else {
                let ishas = true;
                for (var i = 0; i < this.moneys.length; i++) {
                    if (LogicProp$1.instance.has(this.moneys[i].propId, this.moneys[i].value, false) == false) {
                        LogicProp$1.instance.showNoMoneyTis(this.moneys[i].propId);
                        ishas = false;
                        UIMgr.instance.openUI(ModuleType.Buji, { propId: this.moneys[i].propId, count: this.moneys[i].value });
                        break;
                    }
                }
                if (ishas) {
                    for (var i = 0; i < this.moneys.length; i++) {
                        LogicProp$1.instance.add(this.moneys[i].propId, this.moneys[i].value * -1);
                    }
                    let level = LogicSkin.instance.getSkinLevel(this.value.Id) + 1;
                    LogicSkin.instance.setSkinLevel(this.value.Id, level);
                    this.showSkinValue(this.value.Id, level);
                    this.showUpgradeMoneys(this.value.Id, level);
                }
            }
        }
    }

    class UIReward extends UIBase {
        constructor() {
            super(...arguments);
            this.c_loader_img = null;
            this.c_loader_scene = null;
            this.c_btn_gengduopifu = null;
            this.c_btn_sousuo = null;
        }
        onOpen() {
            this._scene3D = new SceneShow3D();
            this._scene3D.setRenderTexture(this.c_loader_img.displayObject);
            this.updateReward();
        }
        updateReward() {
            let lbl_num = FguiBase$3.find_children_names_once_node(this, "text_shuliang").asLabel;
            this.c_loader_img.url = "";
            if (this.openData.Type == E_CLIPDOLL_REWARD.COIN) {
                this.c_loader_img.visible = false;
                AudioMgr$1.instance.play_sound(6);
                lbl_num.text = "+" + this.openData.Value + "";
            }
            else if (this.openData.Type == E_CLIPDOLL_REWARD.SKIN || this.openData.Type == E_CLIPDOLL_REWARD.SKIN2) {
                this.c_loader_img.visible = true;
                AudioMgr$1.instance.play_sound(6);
                lbl_num.text = "";
                let info = GameData.getSkinItem(this.openData.SkinId || this.openData.Value);
                if (info) {
                    let pre = info.PrefabName;
                    let scale = info.Scale * 0.6;
                    let euler = new Laya.Vector3(0, -45, 0);
                    let pos = info.Type == 1 ? new Laya.Vector3(0, 0.1, 0) : new Laya.Vector3(0, 0, 0);
                    LogicSkin.instance.loadNode(pre, Laya.Handler.create(this, (skin, node) => {
                        if (this._scene3D && this._scene3D.playerNode && node) {
                            this._scene3D.playerNode.destroyChildren();
                            node = Laya.Sprite3D.instantiate(node);
                            this._scene3D.playerNode.addChild(node);
                            node.transform.localPosition = pos;
                            node.transform.localRotationEuler = euler;
                            node.transform.localScale = new Laya.Vector3(node.transform.localScale.x * scale, node.transform.localScale.y * scale, node.transform.localScale.z * scale);
                        }
                    }, [info]));
                }
            }
            else if (this.openData.Type == E_CLIPDOLL_REWARD.BLACKMAYI) {
                this.c_loader_img.visible = true;
                AudioMgr$1.instance.play_sound(6);
                this.openData.Count;
                let scale = 5;
                let euler = new Laya.Vector3(0, -45, 0);
                let pos = new Laya.Vector3(0, 0.14, 0);
                ResourcesMgr$1.instance.load(RescoureData.getPlayerUrlByName("mayi_1"), (node) => {
                    if (this._scene3D && this._scene3D.playerNode && node) {
                        this._scene3D.playerNode.destroyChildren();
                        node = Laya.Sprite3D.instantiate(node);
                        this._scene3D.playerNode.addChild(node);
                        node.transform.localPosition = pos;
                        node.transform.localRotationEuler = euler;
                        node.transform.localScale = new Laya.Vector3(scale, scale, scale);
                    }
                });
            }
            else {
                console.log("不支持奖励类型");
            }
        }
        addReward(times = 1) {
            if (this.openData.Type == E_CLIPDOLL_REWARD.COIN) {
                LogicProp.instance.add(EPropNameById.diamonds, this.openData.Value * times, true);
            }
            else if (this.openData.Type == E_CLIPDOLL_REWARD.SKIN) {
                let info = GameData.getSkinItem(this.openData.SkinId || this.openData.Value);
                if (info) {
                    LogicSkin.instance.getSkin(this.openData.SkinId || this.openData.Value, true);
                    LogicSkin.instance.use(this.openData.SkinId || this.openData.Value, false);
                }
            }
            this.closeUI();
        }
        click_gengduopifu() {
            this.addReward();
            UIMgr.instance.openUI(ModuleType.Skin);
        }
        click_anniu2() {
            this.addReward();
        }
        click_wzd() {
            this.addReward();
        }
        click_anniu() {
            this.closeUI();
        }
        click_lijilingqu2() {
            console.log("click_lijilingqu");
            this.addReward();
        }
        click_zhijielingqu() {
            console.log("click_zhijielingqu");
            this.addReward();
        }
        click_sanbeilingqu() {
            console.log("click_sanbeilingqu");
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.addReward(3);
                }
            }, "娃娃机看广告");
        }
        click_huanyige() {
            console.log("click_huanyige");
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    let arr = [];
                    for (var i = 0; i < 5; ++i) {
                        if (i != (this.openData.Id - 1))
                            arr.push(i);
                    }
                    let ret = arr[Maths$1.minToMax(0, arr.length - 1)];
                    this.openData = GameData.getDollMachineItem(ret + 1);
                    this.updateReward();
                    let c1 = this.getController("c1");
                    c1.selectedIndex = 2;
                }
            }, "更换字看广告");
        }
        onClose() {
            if (this._scene3D) {
                this._scene3D.destroy();
                this._scene3D = null;
            }
        }
        click_sousuo() {
            UIMgr.instance.openUI(ModuleType.Sousou);
            this.closeUI();
        }
    }

    class UITrySkin extends UIBase {
        constructor() {
            super(...arguments);
            this.c_loader_mode = null;
            this.skinId = 0;
            this.index = 0;
        }
        onOpen() {
            this.skinId = this.openData.skinId;
            this.index = this.openData.index ? this.openData.index : 0;
            this._scene3D = new SceneShow3D();
            this._scene3D.setRenderTexture(this.c_loader_mode.displayObject);
            {
                this.getController("c1").selectedIndex = 0;
            }
            this.refresh_mode(this.skinId);
        }
        refresh_mode(id) {
            let itemData = GameData.getSkinItem(id);
            let preafbName = itemData.PrefabName;
            let scale = 0.5;
            LogicSkin.instance.loadNode(preafbName, Laya.Handler.create(this, (node) => {
                if (node && this._scene3D && this._scene3D.playerNode) {
                    this._scene3D.playerNode.destroyChildren();
                    node = Laya.Sprite3D.instantiate(node);
                    this._scene3D.playerNode.addChild(node);
                    node.transform.localPosition = v3_zeor;
                    node.transform.localRotationEuler = new Laya.Vector3(0, -45, 0);
                    node.transform.localScale = new Laya.Vector3(scale, scale, scale);
                }
            }));
        }
        click_close1() {
            this.closeUI();
        }
        click_close2() {
            this.closeUI();
        }
        click_close3() {
            this.closeUI();
        }
        click_ad() {
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.onFuhuaComplete();
                }
            }, "使用");
        }
        onFuhuaComplete() {
            LogicSkin.instance.use(this.skinId, false);
            EventMgr.Int.emit("StartTryWeapon", this.index);
            this.closeUI();
        }
        onClose() {
            if (this._scene3D) {
                this._scene3D.destroy();
                this._scene3D = null;
            }
        }
    }

    class UIJiesuan extends UIBase {
        constructor() {
            super(...arguments);
            this.c_list_01 = null;
        }
        onOpen() {
            this.c_list_01.removeChildren();
            let arr = [];
            let meat = this.openData.meat;
            if (meat > 0) {
                arr.push({ icon: "img_huobi5", count: meat });
            }
            for (var i = 0; i < arr.length; ++i) {
                this.c_list_01.addItem().init(arr[i]);
            }
            {
                this.getController("c2").selectedIndex = 0;
            }
        }
        click_close1() {
            this.onResetFuhuo();
        }
        click_close2() {
            this.onResetFuhuo();
        }
        click_close3() {
            this.onResetFuhuo();
        }
        click_ad() {
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.onFastFuhuo();
                }
            }, "BOSS");
        }
        onFastFuhuo() {
            SceneMgr.Int.playerController.onFastFuhuo();
            this.closeUI();
        }
        onResetFuhuo() {
            SceneMgr.Int.playerController.onResetFuhuo();
            this.closeUI();
        }
    }

    class UIYongyou extends UIBase {
        constructor() {
            super(...arguments);
            this.c_loader_icon = null;
            this.c_text_num = null;
        }
        init(data) {
            this.c_loader_icon.url = UIMgr.instance.iconUrl(data.icon);
            this.c_text_num.text = data.count + "";
        }
    }

    class UIchoujiang extends UIBase {
        constructor() {
            super(...arguments);
            this.c_comp_card1 = null;
            this.c_comp_card2 = null;
            this.c_comp_card3 = null;
            this.c_comp_card4 = null;
            this.c_comp_card5 = null;
            this.c_comp_card6 = null;
            this.cardList = [];
            this.randCards = [];
            this.weights = [];
            this.index = 0;
            this.time = 1000;
            this.getIndex = 0;
            this.runtimes = [
                200, 150, 100, 50, 20,
                20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
                50, 100, 150, 200, 250, 300, 350
            ];
            this.runIndex = 0;
        }
        onOpen() {
            this.cardList = [];
            this.randCards = [];
            this.weights = [];
            this.cardList.push(this.c_comp_card1);
            this.cardList.push(this.c_comp_card2);
            this.cardList.push(this.c_comp_card3);
            this.cardList.push(this.c_comp_card4);
            this.cardList.push(this.c_comp_card5);
            this.cardList.push(this.c_comp_card6);
            this.initRandCardData();
            this.initShowDatas();
            this.getController("c1").selectedIndex = 1;
            {
                this.getController("c2").selectedIndex = 0;
            }
            this.startMoveNormal();
        }
        startChou() {
            this.getController("c1").selectedIndex = 2;
            let rand = Math.floor(Math.random() * 100);
            for (var i = 0; i < this.weights.length; i++) {
                if (rand <= this.weights[i]) {
                    this.getIndex = i;
                    break;
                }
            }
            Laya.timer.clearAll(this);
            this.runIndex = 0;
            Laya.timer.once(this.runtimes[this.runIndex], this, this.onRun);
        }
        onRun() {
            this.index++;
            if (this.index >= this.cardList.length)
                this.index = 0;
            for (var i = 0; i < this.cardList.length; i++) {
                this.cardList[i].getChildByPath("img_guang").asImage.visible = i == this.index;
            }
            this.runIndex++;
            if (this.runIndex < this.runtimes.length) {
                Laya.timer.once(this.runtimes[this.runIndex], this, this.onRun);
            }
            else {
                this.toGetIndex();
            }
        }
        toGetIndex() {
            if (this.index == this.getIndex) {
                this.onGetReward();
            }
            else {
                Laya.timer.once(500, this, this.onGet);
            }
        }
        onGet() {
            this.index++;
            if (this.index >= this.cardList.length)
                this.index = 0;
            for (var i = 0; i < this.cardList.length; i++) {
                this.cardList[i].getChildByPath("img_guang").asImage.visible = i == this.index;
            }
            if (this.index == this.getIndex) {
                this.onGetReward();
            }
            else {
                Laya.timer.once(500, this, this.onGet);
            }
        }
        startMoveNormal() {
            this.time = 500;
            this.onOnce();
            Laya.timer.once(this.time, this, this.onOnce);
        }
        onOnce() {
            this.index++;
            if (this.index >= this.cardList.length)
                this.index = 0;
            for (var i = 0; i < this.cardList.length; i++) {
                this.cardList[i].getChildByPath("img_guang").asImage.visible = i == this.index;
            }
            Laya.timer.once(this.time, this, this.onOnce);
        }
        onGetReward() {
            Laya.timer.clearAll(this);
            let data = this.randCards[this.getIndex];
            console.log("onGetReward : " + data.gold);
            switch (data.reward) {
                case 1:
                    LogicProp$1.instance.add(EPropNameById$1.diamonds, data.gold, true);
                    break;
                case 2:
                    LogicProp$1.instance.add(EPropNameById$1.fish, data.gold, true);
                    break;
                case 3:
                    LogicProp$1.instance.add(EPropNameById$1.tooth, data.gold, true);
                    break;
                case 4:
                    LogicProp$1.instance.add(EPropNameById$1.chip, data.gold, true);
                    break;
            }
            Laya.timer.once(1000, this, () => {
                this.closeUI();
            });
        }
        initRandCardData() {
            let arr = [[], [], [], [], [], []];
            for (let key in GameData.getRandCard()) {
                let data = GameData.getRandCardItem(key);
                arr[data.Layer - 1].push(data);
            }
            for (var i = 0; i < arr.length; i++) {
                this.randCards.push(arr[i][Math.floor(Math.random() * arr[i].length)]);
            }
            for (var i = 0; i < this.randCards.length; i++) {
                let r = Math.floor(Math.random() * this.randCards.length);
                let temp = this.randCards[i];
                this.randCards[i] = this.randCards[r];
                this.randCards[r] = temp;
            }
            let w = 0;
            for (var i = 0; i < this.randCards.length; i++) {
                w += this.randCards[i].Weight;
                this.weights.push(w);
            }
        }
        initShowDatas() {
            for (var i = 0; i < this.cardList.length; i++) {
                let comp = this.cardList[i];
                comp.getChildByPath("loader_tubiao").asLoader.url = UIMgr.instance.iconUrl(this.getIcon(this.randCards[i].reward));
                comp.getChildByPath("text_shuliang").asTextField.text = this.randCards[i].gold + "";
            }
        }
        getIcon(id) {
            switch (id) {
                case 1:
                    return "img_huobi1";
                case 2:
                    return "img_huobi2";
                case 3:
                    return "img_huobi4";
                case 4:
                    return "img_huobi3";
            }
        }
        click_close1() {
            this.closeUI();
        }
        click_close2() {
            this.closeUI();
        }
        click_close3() {
            this.closeUI();
        }
        click_ad() {
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.startChou();
                }
            }, "BOSS");
        }
        onClose() {
            Laya.timer.clearAll(this);
        }
    }

    class UIhuode extends UIBase {
        constructor() {
            super(...arguments);
            this.propId = 0;
            this.propType = 0;
            this.propCount = 0;
            this.c_comp_tanchuang = null;
            this.c_loader_icon = null;
            this.c_text_22 = null;
            this.c_text_4 = null;
            this.c_comp_native = null;
            this.c_btn_qukankan = null;
            this.c_btn_close1 = null;
        }
        onOpen() {
            showInterAd();
            this.propId = this.openData.propId;
            this.propType = this.openData.propType;
            this.propCount = this.openData.propCount;
            switch (this.propType) {
                case NBox.Diamond:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 3;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("com_diamond");
                    this.c_text_4.text = this.propCount + "";
                    break;
                case NBox.Money:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 0;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("com_chaopiao3");
                    this.c_text_22.text = this.propCount + "";
                    break;
                case NBox.Transport_Carpet:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 2;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("TransportPopupCarpet");
                    break;
                case NBox.Transport_Monocycle:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 2;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("TransportPopupMonocycle");
                    break;
                case NBox.Transport_Suitcase:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 2;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("TransportPopupLuggage");
                    break;
                case NBox.Transport_Unicorn:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 2;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("TransportPopupPony");
                    break;
                case NBox.VIP_CUSTOMER:
                    this.c_comp_tanchuang.getController("c1").selectedIndex = 1;
                    this.c_loader_icon.url = UIMgr.instance.iconUrl("VipImage");
                    break;
            }
            {
                this.c_comp_tanchuang.getController("c2").selectedIndex = 0;
            }
            // floatShow();
            this.comNative();
            GameSDK.hideBanner();
            if (!GameSDK.isCurrentVersion) {
                this.c_comp_native.showNativeView(this.c_btn_qukankan, this.c_btn_close1, this.comNative.bind(this), this.onLoadSuccesHandler.bind(this), this.onLoadFailHandler.bind(this), 1);
            }
        }
        comNative() {
            this.c_comp_native.visible = false;
            this.c_btn_qukankan.visible = false;
        }
        onLoadFailHandler() {
            this.c_comp_native.visible = false;
            this.c_btn_qukankan.visible = false;
            GameSDK.showBanner();
        }
        onLoadSuccesHandler() {
            this.c_comp_native.visible = true;
            this.c_btn_qukankan.visible = true;
            GameSDK.hideBanner();
        }
        click_close2() {
            this.closeUI();
        }
        click_close3() {
            this.closeUI();
        }
        click_ad() {
            let tip = "";
            switch (this.propType) {
                case NBox.Diamond:
                    tip = "视频获取钻石";
                    break;
                case NBox.Money:
                    tip = "视频获取钞票";
                    break;
                case NBox.Transport_Carpet:
                case NBox.Transport_Monocycle:
                case NBox.Transport_Suitcase:
                case NBox.Transport_Unicorn:
                    tip = "视频获取交通工具";
                    break;
                case NBox.VIP_CUSTOMER:
                    tip = "视频VIP顾客";
                    break;
            }
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.onFastFuhuo();
                }
            }, tip);
        }
        onFastFuhuo() {
            SceneMgr.Int.playerController.usePropBox(this.propId);
            this.closeUI();
        }
    }

    class UIShengji extends UIBase {
        constructor() {
            super(...arguments);
            this.roomId = 0;
            this.type = NType.NULL;
            this.level = 0;
            this.moneys = null;
            this.stars = null;
            this.pos3D = null;
            this.c_text_dengji = null;
            this.c_btn_shengji1 = null;
            this.c_btn_shengji2 = null;
            this.c_btn_shengji3 = null;
            this.ids = null;
            this.curId = 0;
        }
        onOpen() {
            this.roomId = this.openData.roomId;
            this.level = this.openData.level;
            this.type = this.openData.type;
            this.moneys = this.openData.moneys;
            this.stars = this.openData.stars;
            this.pos3D = this.openData.pos;
            this.curId = this.level;
            this.initIds();
            this.initShow();
            this.c_text_dengji.text = "等级 " + this.getShowLevel() + "";
            this.c_btn_shengji1.getChildByPath("btn_1").asButton.displayObject.on(Laya.Event.CLICK, this, this.onShengjiClick1);
            this.c_btn_shengji2.getChildByPath("btn_1").asButton.displayObject.on(Laya.Event.CLICK, this, this.onShengjiClick2);
            this.c_btn_shengji3.getChildByPath("btn_2").asButton.displayObject.on(Laya.Event.CLICK, this, this.onShengjiClick3);
            AdMgr.inst.showInsertAd();
            AdMgr.inst.showBottomAd(false);
        }
        onShengjiClick1(e) {
            e.stopPropagation();
            this.sendRoomLevel(this.ids[0], 0);
        }
        onShengjiClick2(e) {
            e.stopPropagation();
            this.sendRoomLevel(this.ids[1], 1);
        }
        onShengjiClick3(e) {
            e.stopPropagation();
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    this.sendRoomLevel(this.ids[2], 2);
                }
            }, "看视频选择房间装饰");
        }
        click_shengji1() {
            EventMgr.Int.emit("UPDATE_ROOM_SET", this.roomId, this.ids[0]);
        }
        click_shengji2() {
            EventMgr.Int.emit("UPDATE_ROOM_SET", this.roomId, this.ids[1]);
        }
        click_shengji3() {
            EventMgr.Int.emit("UPDATE_ROOM_SET", this.roomId, this.ids[2]);
        }
        sendRoomLevel(level, index) {
            if (this.curId != level) {
                this.curId = level;
                EventMgr.Int.emit("UPDATE_ROOM_SET", this.roomId, level);
            }
            LogicProp$1.instance.add(EPropNameById$1.diamonds, this.moneys[index], true);
            LogicRoom.instance.star += this.stars[index];
            EventMgr.Int.emit(EventType.FLY_STAR, EPropNameById$1.star, this.pos3D, this.stars[index]);
            this.closeUI();
        }
        initIds() {
            this.ids = [];
            if (this.level == 21 || this.level == 22 || this.level == 23) {
                this.ids.push(21, 22, 23);
            }
            else {
                this.ids.push(31, 32, 33);
            }
        }
        initShow() {
            this.c_btn_shengji1.getChildByPath("loader_tubiao").asLoader.url = UIMgr.instance.iconUrl(this.getIcon(this.ids[0]));
            this.c_btn_shengji1.getChildByPath("text_11").asTextField.text = "+" + this.moneys[0] + "";
            this.c_btn_shengji1.getChildByPath("text_22").asTextField.text = "+" + this.stars[0] + "";
            this.c_btn_shengji2.getChildByPath("loader_tubiao").asLoader.url = UIMgr.instance.iconUrl(this.getIcon(this.ids[1]));
            this.c_btn_shengji2.getChildByPath("text_11").asTextField.text = "+" + this.moneys[1] + "";
            this.c_btn_shengji2.getChildByPath("text_22").asTextField.text = "+" + this.stars[1] + "";
            this.c_btn_shengji3.getChildByPath("loader_tubiao").asLoader.url = UIMgr.instance.iconUrl(this.getIcon(this.ids[2]));
            this.c_btn_shengji3.getChildByPath("text_11").asTextField.text = "+" + this.moneys[2] + "";
            this.c_btn_shengji3.getChildByPath("text_22").asTextField.text = "+" + this.stars[2] + "";
        }
        getShowLevel() {
            if (this.level == 1) {
                return 1;
            }
            else if (this.level == 21) {
                return 2;
            }
            else if (this.level == 22) {
                return 2;
            }
            else if (this.level == 23) {
                return 2;
            }
            else if (this.level == 31) {
                return 3;
            }
            else if (this.level == 32) {
                return 3;
            }
            else if (this.level == 33) {
                return 3;
            }
        }
        getIcon(id) {
            if (this.type == NType.Room_Big) {
                if (id == 21) {
                    return "room05";
                }
                else if (id == 22) {
                    return "room06";
                }
                else if (id == 23) {
                    return "room08";
                }
                else if (id == 31) {
                    return "room09";
                }
                else if (id == 32) {
                    return "room03";
                }
                else if (id == 33) {
                    return "room12";
                }
            }
            else {
                if (id == 21) {
                    return "room07";
                }
                else if (id == 22) {
                    return "room02";
                }
                else if (id == 23) {
                    return "room10";
                }
                else if (id == 31) {
                    return "room04";
                }
                else if (id == 32) {
                    return "room01";
                }
                else if (id == 33) {
                    return "room11";
                }
            }
        }
        onClose() {
            AdMgr.inst.showBottomAd(true);
        }
    }

    class UIshengjiyuangong extends UIBase {
        constructor() {
            super(...arguments);
            this.c_btn_shengji1 = null;
            this.c_btn_shengji2 = null;
            this.upgradeList = [];
        }
        onOpen() {
            this.upgradeList = [];
            for (let key in GameData.getUpgrade()) {
                this.upgradeList.push(GameData.getUpgradeItem(key));
            }
            this.updateSpeed();
            this.updateBag();
            AdMgr.inst.showInsertAd();
            AdMgr.inst.showBottomAd(false);
            AdMgr.inst.showLeftAd(false);
            console.log("=======升级员工=======")
            console.log(this)
        }
        click_shengji1() {
            let upgrade = this.getNextLevel(LogicData.instance.speedLevel);
            if (upgrade) {
                if (LogicProp$1.instance.has(EPropNameById$1.Zuanshi, upgrade.Gold)) {
                    LogicProp$1.instance.add(EPropNameById$1.Zuanshi, upgrade.Gold * -1, false);
                    this.upgradeSpeed(upgrade);
                }
                else {
                    GameSDK.showADVideo(this, (b) => {
                        if (b) {
                            this.upgradeSpeed(upgrade);
                        }
                    }, "视频升级速度");
                }
            }
            else {
                TipMgr.Int.showTips("最高等级");
            }
        }
        click_shengji2() {
            let upgrade = this.getNextLevel(LogicData.instance.bagLevel);
            if (upgrade) {
                if (LogicProp$1.instance.has(EPropNameById$1.Zuanshi, upgrade.Gold)) {
                    LogicProp$1.instance.add(EPropNameById$1.Zuanshi, upgrade.Gold * -1, false);
                    this.upgradeBag(upgrade);
                }
                else {
                    GameSDK.showADVideo(this, (b) => {
                        if (b) {
                            this.upgradeBag(upgrade);
                        }
                    }, "视频升级背包");
                }
            }
            else {
                TipMgr.Int.showTips("最高等级");
            }
        }
        upgradeSpeed(upgrade) {
            LogicData.instance.speedLevel += 1;
            LogicData.instance.addSpeed(upgrade.PlayerSpeed);
            this.updateSpeed();
        }
        upgradeBag(upgrade) {
            LogicData.instance.bagLevel += 1;
            LogicData.instance.addBag(upgrade.PlayerBag);
            this.updateBag();
        }
        updateBag() {
            let level = LogicData.instance.bagLevel;
            this.c_btn_shengji2.getChildByPath("text_lv").asTextField.text = "Lv " + level;
            let upgrade = this.getNextLevel(level);
            if (upgrade) {
                if (LogicProp$1.instance.has(EPropNameById$1.Zuanshi, upgrade.Gold)) {
                    this.c_btn_shengji2.getController("c2").selectedIndex = 0;
                    this.c_btn_shengji2.getChildByPath("text_shuzi").asTextField.text = "" + upgrade.Gold;
                }
                else {
                    this.c_btn_shengji2.getController("c2").selectedIndex = 1;
                }
            }
            else {
                this.c_btn_shengji2.getController("c2").selectedIndex = 2;
            }
        }
        updateSpeed() {
            let level = LogicData.instance.speedLevel;
            this.c_btn_shengji1.getChildByPath("text_lv").asTextField.text = "Lv " + level;
            let upgrade = this.getNextLevel(level);
            if (upgrade) {
                if (LogicProp$1.instance.has(EPropNameById$1.Zuanshi, upgrade.Gold)) {
                    this.c_btn_shengji1.getController("c2").selectedIndex = 0;
                    this.c_btn_shengji1.getChildByPath("text_shuzi").asTextField.text = "" + upgrade.Gold;
                }
                else {
                    this.c_btn_shengji1.getController("c2").selectedIndex = 1;
                }
            }
            else {
                this.c_btn_shengji1.getController("c2").selectedIndex = 2;
            }
        }
        getNextLevel(level) {
            if (level < this.upgradeList.length) {
                return this.upgradeList[level];
            }
            else {
                return null;
            }
        }
        onClose() {
            AdMgr.inst.showBottomAd(true);
            AdMgr.inst.showLeftAd(true);
        }
    }

    class UIdianti extends UIBase {
        constructor() {
            super(...arguments);
            this.c_comp_room1 = null;
            this.c_comp_room2 = null;
            this.rooms = null;
        }
        onOpen() {
            this.rooms = [];
            this.rooms.push(GameData.getLevelItem(1));
            this.rooms.push(GameData.getLevelItem(2));
            this.updateIcon();
            this.updateRoom1();
            this.updateRoom2();
        }
        updateRoom1() {
            if (LogicData.instance.roomId == this.rooms[0].Id) {
                this.c_comp_room1.getController("c1").selectedIndex = 1;
            }
            else {
                this.c_comp_room1.getController("c1").selectedIndex = 3;
            }
        }
        updateRoom2() {
            if (LogicData.instance.hasRoom(this.rooms[1].Id)) {
                if (LogicData.instance.roomId == this.rooms[1].Id) {
                    this.c_comp_room2.getController("c1").selectedIndex = 1;
                }
                else {
                    this.c_comp_room2.getController("c1").selectedIndex = 3;
                }
            }
            else {
                if (LogicProp$1.instance.has(EPropNameById$1.diamonds, this.rooms[1].Rewards)) {
                    this.c_comp_room2.getController("c1").selectedIndex = 0;
                }
                else {
                    this.c_comp_room2.getController("c1").selectedIndex = 2;
                }
            }
        }
        updateIcon() {
            this.c_comp_room1.getChildByPath("loader_icon").asLoader.url = UIMgr.instance.iconUrl(this.rooms[0].IconUrl);
            this.c_comp_room1.getChildByPath("text_jiudian").asTextField.text = this.rooms[0].Name;
            this.c_comp_room2.getChildByPath("loader_icon").asLoader.url = UIMgr.instance.iconUrl(this.rooms[1].IconUrl);
            this.c_comp_room2.getChildByPath("text_jiudian").asTextField.text = this.rooms[1].Name;
            this.c_comp_room2.getChildByPath("n15").asTextField.text = this.rooms[1].Rewards + "";
            this.c_comp_room1.getChildByPath("btn_qianwang").asButton.displayObject.on(Laya.Event.CLICK, this, this.onGotoRoom1);
            this.c_comp_room2.getChildByPath("btn_huode").asButton.displayObject.on(Laya.Event.CLICK, this, this.onGoldOpenRoom2);
            this.c_comp_room2.getChildByPath("btn_huode2").asButton.displayObject.on(Laya.Event.CLICK, this, this.onVideoOpenRoom2);
            this.c_comp_room2.getChildByPath("btn_qianwang").asButton.displayObject.on(Laya.Event.CLICK, this, this.onGotoRoom2);
        }
        onGotoRoom1() {
            LogicData.instance.roomId = this.rooms[0].Id;
            SceneMgr.Int.gotoRoom(this.rooms[0].Id, Laya.Handler.create(this, this.click_close));
        }
        onGotoRoom2() {
            LogicData.instance.roomId = this.rooms[1].Id;
            SceneMgr.Int.gotoRoom(this.rooms[1].Id, Laya.Handler.create(this, this.click_close));
        }
        onGoldOpenRoom2() {
            if (LogicProp$1.instance.has(EPropNameById$1.diamonds, this.rooms[1].Rewards)) {
                LogicProp$1.instance.add(EPropNameById$1.diamonds, this.rooms[1].Rewards * -1, false);
                LogicData.instance.openRoom(this.rooms[1].Id);
                this.updateRoom2();
            }
        }
        onVideoOpenRoom2() {
            GameSDK.showADVideo(this, (b) => {
                if (b) {
                    LogicData.instance.openRoom(this.rooms[1].Id);
                    this.updateRoom2();
                }
            }, "视频开启房间");
        }
        click_close() {
            this.closeUI();
        }
    }

    class UIyinsi extends UIBase$1 {
        constructor() {
            super(...arguments);
            this.c_btn_butongyi = null;
        }
        onOpen() {
            if (this.openData && this.openData == 2) {
                this.c_btn_butongyi.visible = false;
            }
            else {
                this.c_btn_butongyi.visible = true;
            }
        }
        click_close() {
            if (this.openData == 2) {
                UIMgr.instance.closeUI("UIyinsi1");
            }
            else {
                UIMgr.instance.closeUI("UIyinsi1");
                UIMgr.instance.openUI("UIyinsi2");
            }
        }
        click_tongyi() {
            if (this.openData == 2) {
                UIMgr.instance.closeUI("UIyinsi1");
            }
            else {
                this.closeUI(true);
                Laya.LocalStorage.setItem("firstXieyi", "1");
                UIMgr.instance.closeUI("UIyinsi1");
            }
        }
        click_butongyi() {
            UIMgr.instance.closeUI("UIyinsi1");
            UIMgr.instance.openUI("UIyinsi2");
        }
        click_yonghuxieyi() {
            UIMgr.instance.openUI("UIwendang", 2);
            console.log("AAAAA");
        }
        click_chanpinyinsishuoming() {
            console.log("BBBBBB");
            UIMgr.instance.openUI("UIwendang", 1);
        }
    }

    class UIyinsi2 extends UIBase$1 {
        onOpen() {
        }
        click_jixu() {
            UIMgr.instance.closeUI("UIyinsi1");
            UIMgr.instance.closeUI("UIyinsi2");
            Laya.LocalStorage.setItem("firstXieyi", "1");
        }
        click_tuichu() {
            let obj = {};
            qg.exitApplication(obj);
        }
        click_yinsizhengce() {
            UIMgr.instance.openUI("UIwendang", 1);
        }
        click_fuwuxieyi() {
            UIMgr.instance.openUI("UIwendang", 2);
        }
    }

    class UIwendang extends UIBase$1 {
        constructor() {
            super(...arguments);
            this.c_text_wenan = null;
            this.c_loader_biaoti = null;
        }
        onCreate() {
        }
        onOpen() {
            if (this.openData == 1) {
                this.c_text_wenan.text = "我司隐私政策\n前言\n生效时间：2021年11月16日\n更新时间：2022年1月10日\n我司产品与/或服务是由我司（以下简称\“我们\”）为用户（以下简称\“您\”）提供的休闲娱乐产品与/或服务，包括但不限于\"我司\"应用，详见关键词定义），以及我们不时为您提供的其他产品与/或服务。我们根据《中华人民共和国网络安全法》相关法律法规并参考《信息安全技术个人信息安全规范》（GB/T-35273），以及其他相关法律法规制定《我司隐私政策》（以下简称\“本政策\”）并保护您的个人信息安全。所有我司产品与或服务均适用本政策。我司产品与/或服务的适用对象为\“通过平台验证/授权的用户\”。对于儿童，必须由其监护人阅读本政策并同意本政策的全部内容后，我们方才向该儿童提供我司产品与/或服务。本政策介绍了我们向您提供我司产品与/或服务过程中收集、使用、存储、委托处理、共享、转让、公开批露您个人信息的目的、方式、范围和信息安全保护措施，以及我们为您提供的访问、更新、删除等控制个人信息的权利和方法。请您结合我们的《我司用户服务协议》阅读本政策。以下是我们的特别提示，请您重点关注：\n1.对所有重点内容，我们采用\“加粗\”的书写方式进行提示。\n2.对个人敏感信息，我们用\“加粗斜体\” 的书写方式进行特别提醒，希望您在阅读时特别关注。在您向我们提供您的任何个人敏感信息前，您已慎重考虑并在此确认该等提供是适当的，您在此同意您个人敏感信息可按照本政策所述的目的和方式进行处理。\n3.我们尤其重视对个人信息的保护。我们将遵循正当必要、知情同意、目的明确、安全保障、依法利用的原则，收集、使用、存储、委托处理、共享、转让、公开披露您的个人信息。根据中国法律法规，您确认并承诺您是使用我司产品与/ 或服务的儿童的监护人，或者已满 18 周岁的成年用户。\n4.我们会严格依据本政策以及您的同意处理您的个人信息。如您不同意本政策，您应当停止使用我司产品与 / 或服务。\n目录\n1.我们会获取哪些信息，作用用途说明\n2.如何使用 Cookie\n3.如何使用第三方 SDK 数据\n4.关于数据的跨境传输\n5.如何委托处理、共享、转让、公开披露您的个人信息\n6.您如何管理您的个人信息\n7.如何保护您的个人信息\n8.如何存储您的个人信息\n9.如何更新本政策\n10.如何联系我们\n11.附则\n12.关键词定义\n1. 我们会获取哪些信息，作用用途说明\n我们会根据合法正当、必要、透明的原则，基于本政策所述的目的，收集和使用您的个人信息。如果我们将您的个人信息用于本政策未载明的其它用途，或基于其他特定目的而收集您的个人信息，我们将以合理的方式告知您，并在使用前再次征得您的同意。\n1.1向您提供产品与/或服务过程中我们主动收集的个人信息\n在符合法律法规前提下，为了更好地为您提供优质的服务，我们会收集和使用您在使用我司产品与/或服务过程中产生的如下信息：\n1.1.1设备信息\n当您使用\"我司\"应用或应用切换到后台时，我们会收集您的设备信息，包括浏览器类型、运营商信息和使用情况、设备的相关信息（IP地址）、设备型号、操作系统版本号、AndoridID（仅限安卓）。这些信息是设备的唯一标识，我们可能会将这些信息进行关联，以便我们能够为您提供一致的服务。为免疑义，我们可能采集您设备的Mac地址、IMEI号上传到我们的服务器，仅用于产品BUG的实时排查和定位，监控产品稳定性。\n当您使用我们的软件时，我们可能会根据您在软件安装及使用中的具体权限，接收并记录您的相关设备信息，包括设备型号、唯一设备标识符、操作系统信息，以便我们为您提供一致的服务。\n1.1.2位置信息\n当您使用\"我司\"应用时，我们使用的友盟sdk会自动收集您在使用\"我司\"应用时的位置信息，友盟sdk收集位置信息，为开发者提供反舞弊功能，剔除作弊设备；同时校正用户的地域分布数据，使报表数据更加准确。\n1.1.3日志信息\n当您使用\"我司\"应用时，我们会自动收集您在使用\"我司\"应用时的详细情况并作为网络日志进行保存，包括浏览器类型、浏览记录、网络诊断、卡顿信息、点击事件、关卡成功或失败情况，以便我们统计\"我司\"应用的使用情况，优化\"我司\"应用，为您提供更好的服务体验。\n当您使用我们的软件时，我们会自动收集您使用的详细情况，并作为网络日志进行保存，包括您IP地址、浏览器类型、浏览记录，以便我们统计官网的使用情况，为您提供更好的体验和服务。\n1.1.4设备权限调用汇总\n我们在提供服务过程中，会调用您的主要设备权限汇总如下：\n权限名\n权限功能说明\n使用场景或目的\nINTERNET\n访问网络的权限\n请求广告,上报应用错误log时需要连接网络\nACCESS_NETWORK_STATE\n获取网络信息状态\n请求配置和广告时需要判断网络链接是否有效\nREAD_LOGS\n读取系统日志文件\nAPP出现错误或异常退出时需要上传日志\nACCESS_WIFI_STATE\n获取 WIFI 状态\n在下载应用、播放音频时，我们需要访问您的WIFI状态，我们将根据是否连接WiFi，来确定本应用、音频等资源加载方式，以优化您的使用体验。\nREAD_PHONE_STATE\n读取手机状态和身份：提供读取手机设备标识等信息\n读取设备通话状态和识别码，识别手机设备ID，用于信息展示、账号登录、安全保障等主要功能\nREAD_EXTERNAL_STORAGE\n读取SD上的内容：提供读取手机储存空间内数据的功能\n读取已下载的本应用文件,读取应用储存数据\nWRITE_EXTERNAL_STORAGE\n修改/删除SD卡中的内容：提供写入外部储存功能\n保存存储下载的本应用文件,保存应用使用数据\nREQUEST_INSTALL_PACKAGES\n允许安装第三方应用\n广告sdk会在用户同意后安装第三方app\nWAKE_LOCK\n屏幕常亮\n在播放激励视频广告时需要保持屏幕常亮，以免黑屏\nQUERY_ALL_PACKAGES\n读取已安装应用列表\n当用户点击广告后，sdk需要读取已安装应用列表判断是安装应用还是打开应用。\n详细内容请访问《权限使用说明》。您可以在设备的设置功能中选择关闭部分或全部权限。在不同设备中，权限显示方式及关闭方式可能有所不同，若您是安卓机型，您需要在手机【设置】-【应用设置】-【应用权限管理】中，选择本应用，并关闭您需要撤回的权限/信息。具体请参考设备及系统开发方说明或指引。\n1.2我们从第三方获取的您的个人信息\n1.2.1我们可能会在您的同意范围内从第三方（我们的合作方）处收集并使用您的个人信息。我们保证依照与第三方签订的合同以及相关法律规定处理您的个人信息，同时请您详细阅读该第三方的隐私政策/个人信息保护政策及用户协议。如您拒绝第三方在提供服务时收集、使用或者传递您的个人信息，将可能导致您无法使用我司产品与/或服务。\n1.2.2第三方登录：当您使用第三方账号（包括微信、QQ、华为、OPPO账号、vivo账号等其他渠道）登录时，可选择授权我们读取并获得您在该第三方平台上公开的信息。当您使用微信账号等第三方账号登录时，第三方账号将与我们共享您的信息详情见此处。获取上述信息是为了记住您作为我司用户的登录身份，以便向您提供更优质的产品与/或服务，并且我们仅会在您同意的范围内使用此类信息。当您使用第三方账号注册或登录后，您的第三方账号会与我司账号进行绑定。\n1.3征得同意的例外\n根据法律法规，以下情形中收集和使用您的个人信息无需征得您的同意：\n1.3.1与履行法律法规规定的义务相关的；\n1.3.2与国家安全、国防安全直接相关的；\n1.3.3与公共安全、公共卫生、重大公共利益直接相关的；\n1.3.4与犯罪侦查、起诉、审判和判决执行等直接相关的；\n1.3.5出于维护您或其他用户的生命、财产等重大合法权益相关但又很难得到本人同意的；\n1.3.6所涉及的个人信息是您自行向社会公众公开的；\n1.3.7根据您要求签订和履行合同所必需的；\n1.3.8从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道；\n1.3.9维护所提供的我司产品与/或服务的安全稳定运行所必需的，例如发现、处置我司产品与/或服务的故障；\n1.3.10法律法规规定的其他情形。\n2. 如何使用 Cookie\n2.1Cookie\n当您使用我司产品与/或服务时，我们会在您的计算机或移动设备上存储名为Cookie的小型数据文件，通常包含标识符、站点名称以及一些号码和字符。当您登录账号时，借助于Cookie，我们可以在您和使用我司产品与/或服务时识别您是否属于我们的用户；还可以实现直接从一个页面跳转到另一个页面，而不必在每个页面上重新登录。\n2.2如何使用Cookie\n我们使用该等信息判断用户是否已经登录、提升服务/产品质量及优化用户体验。我们不会将Cookie用于本政策所述目的之外的任何其他用途。\n2.3如何管理追踪技术\n在网页端，我们不会将上述追踪技术用于本政策所述目的之外的任何用途。您可根据自己的偏好管理或删除某些类别的追踪技术。有关详情，请参见https://aboutcookies.org/。另外，很多网络浏览器均设有\“禁止追踪\”（DoNotTrack）功能，该功能可向网站发布\“禁止追踪\”的请求。如果您的浏览器启用了\“禁止追踪\”功能，我们的所有网站都会尊重您的选择。如需详细了解如何更改浏览器设置，请访问相关链接。\n当您在非登陆状态下浏览页面时，为向您提供相应服务，我们会收集实现浏览功能所必需收集Cookie信息，但会在一个月内删除这些Cookie信息。\n请您知悉，倘若您拒绝使用或清除已有的追踪技术，则需要在每一次访问时亲自更改用户设置，并且，我们可能无法向您提供更加优质的使用体验，部分服务亦可能会无法正常运作。\n3. 如何使用第三方 SDK 数据\n3.1 我们的应用集成BuglySDK，为了更真实地为开发者还原Crash场景服务的，并不涉及用户隐私信息：\nCrash环境：Crash信息及线程堆栈，ROM/RAM/SD卡容量、网络/语言等状态。\nApp信息：包名、版本、所属进程名。\n设备信息：IMEI等设备识别，用于判断Crash设备统计。\n3.2 我们的应用集成第三方广告平台SDK，需要收集您的设备Mac地址、唯一设备识别码（IMEI/androidID/IDFA/OPENUDID/GUID、SIM卡IMSI信息）以提供统计分析服务。我们会对合作方获取信息的软件工具开发包（SDK）进行严格的安全检测，以保护数据安全。\n3.3 为方便阅读，其他更多SDK数据请查看接入的相关第三方SDK。\n4. 关于数据的跨境传输\n我们的产品不存在跨境传输的数据，且所有数据在传输前，均会事先获得您的明示授权或同意。\n5. 如何委托处理、共享、转让、公开披露您的个人信息\n5.1委托处理\n为了向您提供更完善、优质的产品和服务，某些功能可能由我们的技术服务合作方提供，我们可能会委托合作方处理您的某些个人信息。对我们委托处理您个人信息的公司、组织和个人，我们会与其签署严格的保密协定，明确双方责任、处理事项、处理期限、处理性质和处理目的等，要求他们仅按照我们的要求、本政策以及其他任何相关的保密和安全措施来处理个人信息。如果您拒绝我们的合作方在提供服务时收集为提供服务所必需的个人信息，将可能导致您无法使用我司产品与/或服务来享用该合作方提供的服务。我们的合作伙伴包括：\n5.1.1分析与/或统计服务SDK提供商。为了更好地分析与/或统计我司用户的使用情况，我们可能委托数据分析与/或统计的服务提供商处理您的设备信息、用户点击记录，用于维护或改进我司产品与/或服务，并提升用户体验。\n5.1.2技术服务SDK提供商。我们可能会委托该服务的合作伙伴（如语音技术服务提供商、云服务提供商）处理您的语音，以便提供发音准确性测评，更好地提升用户体验。我们亦可能委托该服务的合作伙伴（如应用异常情况技术服务提供商）处理您系统版本、生成ID、手机样式，以便提供\"我司\"应用的异常情况分析处理。\n5.2共享\n对于您的个人信息，我们仅在本政策所述的目的和范围内或根据法律法规的要求收集和使用，并严格保密。除非存在以下一种或多种情形（相关法域另有规定的除外），我们不会与第三方公司、组织或个人共享您的个人信息：\n5.2.1基于您自行提出的要求、或事先获得您的明示授权或同意；\n5.2.2与我们履行法律法规规定的义务相关的；\n5.2.3与国家安全、国防安全直接相关的；\n5.2.4与公共安全、公共卫生、重大公共利益直接相关的；\n5.2.5与犯罪侦查、起诉、审判和判决执行等直接相关的；\n5.2.6出于维护您和/或您孩子或其他个人的生命、财产等重大合法权益但又很难得到本人同意的；\n5.2.7您自行向社会公众公开的您和/或您孩子个人信息；\n5.2.8从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道。\n5.2.9与我们的业务合作伙伴进行必要的信息共享；\n为了向您提供更完善、优质的产品和服务，某些我司服务将由合作方提供，因此，我们可能会与合作方共享您的某些个人信息。我们仅会出于合法、正当、必要、特定、明确的目的共享的个人信息，并且只会共享为您提供服务所必要的个人信息。我们不会共享可以识别您身份的个人信息，除非法律法规另有规定。该等共享的合作方为数据控制者，以其自己的名义获得您的同意以处理您的个人信息。合作方可能有其独立的隐私政策和用户协议，我们建议您认真阅读并遵守第三方的用户协议及隐私政策。如果您拒绝我们的合作方在提供服务时收集为提供服务所必需的个人信息，将可能导致您无法使用我司产品与/或服务来享用该合作方提供的服务。在您购买我司产品与/或服务时，我们可能会与我们的合作伙伴（含渠道合作方）共享您的信息，例如，我们向支付宝提供交易金额、交易商品、订单号、交易时间，以便您能够完成支付并顺利购买。\n请您知悉，随着服务的更新和升级，您可能通过使用我们的服务或第三方提供的功能，主动公开、共享您的相关信息（如微信好友/朋友圈/QQ等）。在这种情况下，共享信息将被视为即时并广泛的传播。一旦您进行了此类信息共享，很难确保当您需要删除信息时，您所共享的信息在所有接受转发的互联网平台中被全部删除。在一些情况下，即使您从我们的服务中删除了您共享的信息，该类信息仍然可能会留存在公众可获知的领域，仍可由其他用户或与我们没有关联且不受我们控制的第三方独立地缓存、复制或存储，以及通过其他用户或该等第三方在公众可获知的领域保存。\n5.2.10其他法律法规规定的情形。\n请您知悉：\n（1）我们共享您的个人信息仅为了更精准地向您提供服务。除此以外，我们不会共享可以识别您身份的个人信息，除非法律法规另有规定。\n（2）通过我司产品与/或服务或第三方提供的功能，您可以主动公开、共享您的相关状态（如微信转发）。在这种情况下，共享信息将被视为即实并广泛的传播。一旦您进行了此等共享，很难确保当您需要删除信息时，您所共享的信息在所有接受转发的互联网平台中被全部删除。在一些情况下，即使您从我司产品与/或服务中删除了被共享的信息，该等信息仍然可能会留存在公众可获知的领域，仍可由其他用户或与我们没有关联及不受我们控制的第三方独立地缓存、复制或存储，或通过其他用户或该等第三方在公众可获知的领域保存。\n5.3转让\n原则上我们不会将您的个人信息控制权向其它公司、组织或个人进行转让，但在以下情况除外：\n5.3.1基于您自行提出的要求、或事先获得您的明示授权或同意；\n5.3.2与我们履行法律法规规定的义务相关的；\n5.3.3与国家安全、国防安全直接相关的；\n5.3.4与公共安全、公共卫生、重大公共利益直接相关的；\n5.3.5与犯罪侦查、起诉、审判和判决执行等直接相关的；\n5.3.6出于维护您和/或您孩子或其他个人的生命、财产等重大合法权益但又很难得到本人同意的；\n5.3.7您自行向社会公众公开的个人信息；\n5.3.8从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道；\n5.3.9发生公司合并、收购或破产清算，运营主体的变更时的转让。\n请您知悉：如具备上述事由确需转让，我们将在转让前向您告知转让信息的目的、类型、信息受让方（如涉及敏感信息，我们还将告知涉及的敏感信息的内容），并在征得您同意后再转让，但法律法规另有规定的除外。\n5.4公开披露\n原则上我们不会向社会或不特定人群发布您的个人信息，但以下情况除外：\n5.4.1基于与您的约定的；\n5.4.2根据法律法规应当披露的。\n请您知悉：\n（1）如具备上述事由确需公开披露，我们会在披露前向您告知公开披露的目的、信息的类型（如涉及敏感信息，我们还将告知涉及的敏感信息的内容）并在征得您同意后再公开披露，但法律法规另有规定的除外。\n（2）即使已经取得您的同意，我们也仅会处于合法、正当、必要、特定、明确的目的公开披露您的个人信息，并尽量对公开披露内容中的个人信息进行去标识化处理。\n6. 您如何管理您的个人信息\n6.1访问或更正您的个人信息\n6.1.1您有权随时登录并访问您的账户，查看您个人信息，包括您的账号信息和您的个人档案。如您发现我们收集、存储、使用、披露的您的个人信息有错误的，或者在法律法规规定的其他情况下，您可以更正您的个人信息。\n6.1.2如您希望访问或更正您其他个人信息，或在行使上述权利过程中遇到困难，您可通过本政策第10条提供的联系方式联系我们，我们将在核实您的身份后15日内及时响应您的请求，但法律法规另有规定的或本政策另有约定的除外。\n6.2删除您的个人信息\n6.2.1在以下情形中，您可以向我们提出删除您个人信息的请求，但已做数据匿名化处理或法律法规另有规定的除外：\n6.2.1.1我们违反法律、行政法规的规定或与您的约定，收集、存储、使用、转移、披露您的个人信息的；\n6.2.1.2我们超出目的范围或者必要期限收集、存储、使用、转移、披露您个人信息的；\n6.2.1.3您撤回同意的；\n6.2.1.4您通过注销等方式终止使用我司产品与/或服务的。\n6.2.1.5其他法律法规等规定的情形。\n6.2.2如您希望删除您的个人信息，您可以您可通过本政策第10条提供的联系方式联系我们。对于您的请求，我们原则上将于收到您的请求并在验证您用户身份后的15日内做出答复。\n6.2.3您在此同意，一旦删除请求被响应，您的个人信息将被删除。\n6.2.4请您知悉，我们可能不会将响应的信息立即从备份系统中删除，但会在备份系统更新时进行删除。\n6.3更改您授权同意的范围\n6.3.1请您知悉，为了您能正常使用我司产品与/或服务，您需要向我们提供一些基本的个人信息。如果您希望更改或撤回您授权同意，您可以在设备的设置功能中选择关闭部分或全部权限。在不同设备中，权限显示方式及关闭方式可能有所不同，具体请参考设备及系统开发方说明或指引。您也可以通过本政策第10条提供的联系方式联系我们，对于您的请求，我们原则上将于收到您的请求并在验证您用户身份后的15日内做出答复。\n6.3.2当您更改您的同意范围后，我们将不再收集和使用您相应的个人信息，但请您理解，在您更改您的同意范围后，我们无法再为您提供与之对应的我司产品与/或服务。您在此同意，您更改同意范围或撤回同意的行为不会影响我们基于您之前授权对您个人信息的处理和存储。\n6.4注销您的账号\n6.4.1除非法律法规另有规定或本政策另有约定，您也可以通过本政策第10条提供的联系方式联系我们来注销账号，对于您的请求，我们原则上将于收到您的请求并在验证您用户身份后的15日内做出答复。\n6.4.2请您知悉，在注销账号后，除非根据法律法规或根据监管部门的要求保留或存储您的个人信息，否则我们将即时删除您的个人信息或作匿名化处理。请您知悉，我们可能不会将该等信息立即从备份系统中删除，但会在备份系统更新时进行删除。\n6.4.3您注销账号的行为是不可逆的，一旦您的账号被注销，我们将不再收集您的个人信息，也不再为您提供我司产品与/或服务。因此我们建议您谨慎选择注销账号。\n6.5获取您的个人信息副本\n6.5.1在技术措施允许的情况下，我们也可以根据您的要求，将您的个人信息提供给第三方。\n6.6响应您的上述请求\n6.6.1为实现本政策第6.1-6.6条所述的用户权利，请您通过Email: tangyongqin@newto.cn与我们联系。为确保安全，我们可能会先要求您通过提交相应证明以验证自己的身份，然后再处理您的请求。对于您的请求，我们原则上将于收到您的请求并在验证您用户身份后的15日内做出答复。\n6.6.2对于您合理的请求，我们原则上不收取费用。对于与您的身份不直接关联的信息、无端重复信息，或者需要过多技术手段（例如，需要开发新系统或从根本上改变现行惯例）、给他人合法权益带来风险或者不切实际的请求，我们可能会予以拒绝。\n6.6.3如您对您的数据主体权利存在任何疑问、意见或建议的，也可通过Email: tangyongqin@newto.cn联系我们。\n7. 如何保护您的个人信息\n我们十分重视您的个人信息安全，为此我们采用了符合行业标准的安全技术措施及配套的组织架构和管理体系等多层面保护措施，以最大程度防止您的个人信息被泄露、毁损、误用、未授权访问、未授权披露或更改，具体包括：\n7.1数据安全技术措施\n7.1.1在数据安全传输方面，我们采用了传输层安全协议等密码技术，通过Https等方式防止传输链路被窃听、截取，建立安全的隐私数据环境，保证数据的私密性和完整性。我们还对您的信息采取加密存储等额外的安全保护措施。\n7.1.2在数据访问和使用的安全控制方面，我们实施了严格的数据权限控制机制，采取多重身份认证技术，并对能够处理您的个人信息的行为进行监控，避免数据被违规访问和未授权使用。我们还对数据生命周期的全流程进行监控，防止您的个人信息遭遇未授权的访问、公开披露、使用、修改、人为或意外的损坏或丢失等。\n7.2数据安全组织和管理措施\n7.2.1根据有关法规要求，我们成立了专门负责个人信息保护的部门。我们还建立了相关的内控管理流程，对可能接触到您个人信息的工作人员以最小授权为原则，严格设定信息访问权限，控制个人信息的知悉范围。\n7.2.2我们建立了数据分级分类制度、业务数据安全使用规范、数据合作规范等障对您个人信息的处置在收集、传输、使用、存储、转移、销毁等环节均满足法律法规的安全要求。根据有关法规要求，对需要访问个人信息的工作人员，我们会要求其经过个人信息保护负责人或者其授权的管理人员审批，记录访问情况，并采取技术措施，避免违法复制、下载个人信息。\n7.2.3我们组织员工参加安全与隐私保护相关培训并要求其完成规定的考核，加强员工对于保护个人信息重要性的认知。\n7.2.4我们还采取了其他可行的安全组织和管理措施。\n7.3合作协议条款保证\n7.3.1在我们从第三方间接收集您的个人信息前，我们会明确以书面形式（如合作协议、承诺书）要求该第三方在已经取得您明示同意后收集以及处理（如共享等）您的个人信息，在书面协议层面要求第三方对个人信息来源的合法性和合规性作出承诺，如第三方有违反行为的，我们会明确要求对方承担相应的法律责任。\n7.3.2在我们向业务合作伙伴共享您的个人信息前，我们会严格要求合作伙伴承担信息保护义务与责任，为此，我们还会要求业务合作伙伴签署数据处理协议或在合作协议中列明有关数据保护的条款，并要求业务合作伙伴在合作前签署。协议严格约定了业务合作伙伴的用户信息保密义务，包括信息的保管、使用和流转等均应满足我们的管控要求，接受我们的审核、监督和审计，一旦有任何违反，我们会要求对方承担相应的法律责任。\n7.4安全事件的处理\n7.4.1如不幸发生个人信息安全事件，我们将立即启动应急预案，采取补救措施，如造成或可能造成严重后果，我们将立即向有关部门报告，并向您告知安全事件的基本情况和可能的影响、我们已采取或将要采取的处置措施、您可自主防范和降低风险的建议、对您的补救措施等。我们将及时将事件相关情况以邮件、电话等方式告知您，难以逐一告知时，我们会采取合理、有效的方式发布公告。\n7.4.2请您知悉并理解，互联网并非绝对安全的环境，我们强烈建议您通过安全方式、使用复杂密码，协助我们保证您的账号安全。如您发现自己的个人信息泄密，尤其是您的账号或密码发生泄露，请您立即根据本政策第10条提供的联系方式联络我们，以便我们采取相应措施来保护您的信息安全。\n8. 如何存储您的个人信息\n8.1 我们会将在中国境内收集和产生的个人信息存储在中国境内。\n8.2 如需发生数据跨境传输，我们会向您告知您数据出境的目的、接收方，并征得您的同意，我们会确保数据接收方有充足的数据保护能力来保护您的个人信息。\n8.3 我们承诺，除非法律法规另有要求，您个人信息的存储时间将处于实现您授权使用的目的所必需的最短时间。\n8.4 如我们因经营不善或其他原因出现停止运营的情况，除非法律法规另有要求，我们会将此类情况向您告知，停止对您个人信息的收集，并删除已收集的个人信息或做匿名化处理。\n9. 如何更新本政策\n9.1 我们保留不时更新或修改本政策的权利。我们会在本页面上发布对本政策所做的任何变更。但是未经您明确同意，我们不会削减您按照本政策所应享有的权利。该等变更构成本政策的一部分。历史版本可参见这里。\n9.2 请您仔细阅读变更后的本政策内容。如果您不同意本政策，或对本政策修改、更新的内容有异议，您可以选择注销账号并不再使用我司产品与/或服务。但请您知悉，您账号注销之前、停止使用本服务之前的行为和活动仍受本政策的约束。如有资费相关问题，请阅读《我司用户服务协议》。\n9.3 若涉及重大、实质性变更，我们会依据具体情况，以显著的方式通知您。\n重大、实质性变更的情形包括但不限于以下情形：\n9.3.1我们的服务模式发生重大变化。如处理个人信息的目的、处理的个人信息类型、个人信息的使用方式等；\n9.3.2您参与个人信息处理方面的权利及其行使方式发生重大变化。\n10. 如何联系我们\n10.1我们设立了专门负责个人信息保护的部门，如您在执行或使用我司产品与/或服务时遇到与隐私保护相关的任何问题（包括问题咨询、投诉等），您可以通过以下方式与我们取得联系：（i）Email: tangyongqin@newto.cn；（ii）点击本应用APP中的【我的】-【联系我们】；（iii）我们提供的其他联系方式。\n11.2我们会在收到您的意见及建议并在验证您用户身份后的15日内尽快向您回复。如无法响应您的请求，我们会在法律规定的最大时限要求内，向您发送通知并解释原因。\n11.3如您对我们的回复不满意，或我们对您个人信息的处理方式侵害了您的合法权益，且在您向我们反馈后我们无法提供让您满意的回复且拒绝改进的，您可以向相关监管机构进行投诉和举报。\n11. 附则\n11.1本政策的解释及争议解决均应适用中国法律。与本政策相关的任何纠纷，双方应协商友好解决；若不能协商解决，您在此同意将争议提交至成都市高新区人民法院。\n11.2如果有管辖权的任何法院裁定或判决本政策的任何条款无效，则该条款将从本政策中移除，但该条款的无效不影响本政策其余条款的效力。本政策的其余条款将继续执行。\n11.3本政策的标题仅为方便阅读而设计，不影响本政策任何条款的含义或解释。\n12. 关键词定义\n12.1 用户或您：指使用我司产品与/或服务的儿童的监护人、已满18周岁的成年用户。\n13.2 儿童或您孩子：指您所监护的年龄不超过14周岁的未成年人。\n13.3 个人信息：指以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人身份或者反映特定自然人活动情况的各种信息。个人信息包括个人基本信息、个人身份信息、个人生物识别信息、网络身份标识信息、个人健康生理信息、个人教育工作信息、个人财产信息、个人通信信息、联系人信息、个人上网记录、个人常用设备信息等。为免疑义，个人信息包括但不限于个人敏感信息。\n12.4 个人敏感信息：指一旦泄露、非法提供或滥用可能危害人身和财产安全，极易导致个人名誉、身心健康受到损害或歧视性待遇等的个人信息。个人敏感信息包括个人财产信息、个人健康生理信息、个人生物识别信息、个人身份信息、网络身份标识信息等。\n12.5 去标识化：指通过对个人信息的技术处理，使其在不借助额外信息的情况下，无法识别您的过程。\n12.6 匿名化：指通过对个人信息的技术处理，使得您无法被识别，且处理后的信息不能被复原的过程。\n12.7 中国或中国境内：指中华人民共和国（仅为本政策之目的，不包含香港特别行政区、澳门特别行政区和台湾地区）。\n12.8 设备：设备是指可用于访问我司产品和或或服务的装置，例如台式计算机、笔记本电脑、平板电脑、智能手机、智能大屏、智能手表、智能音箱等。\n更新时间：2021年10月14日";
                this.c_loader_biaoti.url = "ui://jyvm79orfkj2s";
            }
            else {
                this.c_text_wenan.text = "用户服务协议\n生效时间：2021年11月16日\n更新时间：2022年1月10日\n本合作协议是甲方（指我司及/或其指定的关联公司，以下简称\“公司\”）与乙方（指以个人身份在我司关联的玩家，以下简称\“用户\”）之间就我司的应用（包括、APP、小程序等）使用事宜达成的具有法律效力的协议。\n为使用本软件及服务，您须仔细阅读并同意遵守《用户服务协议》（以下简称\“本协议\”）。您的下载、安装、使用、申请及获取账号、登录等行为即视为您已阅读并同意上述协议的约束。本公司有权不时地对本协议条款做任何修改和补充，并在本软件及服务中公布。对本协议条款的修改和补充将在公布时立即生效。您继续登录和使用本软件及服务即视为接受修订后的本协议。否则，您有权通过停止登录且拒绝使用本软件及服务的方式来终止本协议。\n您承诺遵守适用的法律、法规、规章及其他政府规定。用户发生违法或犯罪行为，或者本公司有相关证据合理怀疑用户可能存在违法、犯罪或违反本协议的行为的，本公司有权中止或终止对该用户的服务，有权在本公司及互联网络上公布该用户的违法、违约行为，有权向有关机关报案并配合有关机关的调查活动，包括但不限于披露该用户的所有用户信息、交易记录及其他信息，本公司实施上述任何及全部行为所造成的后果、风险及责任由用户自行承担。用户签署本协议即视为理解并接受上述条款，永久性不可撤销地授权本公司公开相关信息及采取相应措施。\n本协议内容包括本协议正文以及本公司已经发布的或将来可能发布的各类规则、声明、说明。所有规则、声明、说明为本协议不可分割的一部分，与本协议正文具有同等法律效力。\n如果您代表某个机构而非您个人注册、登录和使用本软件及服务，则您将被认为获得充分授权代表该机构同意本协议条款以及本协议条款不时的修改和补充。如果您未满18周岁，请在法定监护人的陪同下阅读本协议及其他上述协议，并在征得监护人同意的前提下使用本应用并特别注意本协议第十条约定的未成年人使用条款。未成年人行使和履行本协议项下的权利和义务即视为已获得了监护人的认可。\n乙方应仔细阅读并充分理解本协议后点击【\“同意\”】按钮。\n乙方应当清楚，当乙方点击【\“同意\”】按钮后，即表示乙方与\"我司\"科技签订本协议并生效，乙方在使用\"我司\"科技的产品及服务过程中不得违反本协议的约定。\n.总则\n签署本协议前，乙方已充分了解甲方软件的各项规则及要求，且有条件及有能力履行本协议约定的义务。乙方对本协议下所有条款及定义等内容均已明确知悉并有能力承担因此所产生的相应责任，并无疑义。\n1.本软件及服务可能不时开放不同功能，每一功能的使用及其限制将受制于针对该功能的特定业务规则。本公司有权制定及不时修订该等特定业务规则，并予以公示。您使用或继续使用该等功能即视为您同意并接受该等规则及其修订。\n2.账号的所有权归属本公司，用户完成注册手续后，仅获得账号的使用权，且该使用权仅属于申请注册人本人。账号申请注册人不得以任何方式向第三方有偿或无偿提供账号使用权，包括但不限于转让、赠与、租用、借用、许可使用。账号申请注册人违反上述约定的，因此导致的后果、责任均由其自行承担，给本公司造成损失的，应予全额赔偿，本公司并有权收回账户使用权。\n3.您应妥善保管账号及/或与账号绑定的微信账号，准确输入该等信息将作为您访问登录及使用本软件及服务的关键环节。您知悉并同意，任何在您账号项下发生的行为均将视为您或经您合法授权的行为，并将由您承担一切法律后果。如果您发现有人未经授权使用您的账号，您应立即向本公司反馈，否则未经授权的使用行为均视为用户本人行为。尽管有前述约定，任何情况下，本公司均不对您因账号、登录信息错误、遗失、被盗，或因您未能确保账号信息安全的其他情形而造成的任何损失或损害，承担任何责任。\n4.您在此授予本公司保护您账号安全的相关权利，本公司可定期或不定期采用不同的方式对您账号的使用安全进行检查、验证，包括但不限于主动联系您进行【身份验证、短消息验证、邮箱认证】等。如您无法完成验证或无正当理由拒绝验证的，本公司可合理怀疑您的账号出现异常或被盗，因而中止向该账号提供服务或采取进一步措施。\n.乙方\n为避免疑义，乙方特此确认其向甲方提供如下信息，并保证该信息真实、有效、完整：姓名、订单号、手机号码、商品信息、userID。\n1.甲方提供的应用分为免费和付费。对于现阶段免费提供的服务内容，甲方有权随时根据甲方政策的调整将其变更为收费服务，如果发生该等变更的，甲方将提前告知用户，如果用户不同意的，可以停止使用该服务。对于收费的服务内容，甲方有权自行确定该等服务的价格并不时调整，调整后的价格将在软件中进行公示，如果用户不同意调整后的价格的，则用户可以在其原购买的收费服务到期后停止付费购买收费服务。如果用户在甲方调整价格并公示后，仍继续购买收费服务的，则视为用户同意该调整后的价格。\n2.甲方不时将对付费服务提供优惠政策或开展优惠活动，该等优惠政策或优惠活动以软件上的实时信息为准，用户知悉并认可，甲方有权自行决定是否提供优惠政策或开展优惠互动，以及优惠政策或优惠活动的内容、条件和有效期，并不时进行调整或终止。\n3.如果用户通过合法方式获得了相关付费服务的优惠券或折扣等其他优惠方式的，则用户知悉并认可，该等优惠券或折扣必须满足一定条件才能使用，以优惠券上的信息提示和优惠券使用说明、或甲方公示的折扣使用说明为准。优惠券或折扣不兑现（即不直接兑换现金）、不找零（即订单金额不足抵用券金额的，抵用券剩余金额无效）、过期作废；优惠券或折扣仅限同一用户账号使用，严禁出售、转让或共享，如经甲方发现存在出售、转让或共享优惠券或折扣等其他优惠方式的，该优惠券或折扣将予以作废处理，且甲方有权视情节严重程度予以封号处理，并保留追究相关责任人法律责任的权利。\n.用户注意事项\n1.您理解并同意，本软件及服务的某些功能可能会让第三方知晓用户的信息，包括但不限于：用户的软件好友可以查询用户头像、名字等可公开的个人资料，您同意本公司无须就此类事项向您承担任何责任。\n2.基于互联网的开放性属性，您知悉用户将图片等资料上传到互联网上，有可能会被其他组织或个人复制、转载、擅改或做其它非法用途，您必须充分意识到此类风险的存在。您明确同意使用本软件及服务所存在的风险将完全由您自行承担；因您使用本软件及服务而产生的一切后果也由您自行承担。\n3.用户使用本软件及服务的特定功能时，本公司可能会调用第三方系统或者通过第三方支持用户的使用或访问，使用或访问的结果由该第三方提供（包括但不限于第三方通过本公司公众账号提供的服务，或通过开放平台接入的内容等），本公司不对第三方提供服务及内容的安全性、准确性、有效性及其他事项作出任何承诺或承担任何责任，相关风险及责任由用户自行承担。您在使用该等第三方产品或服务时，除遵守本协议约定外，还应遵守第三方的用户协议。如因本软件使用的第三方软件或技术引发的任何纠纷，应由该第三方负责解决，本公司不承担任何责任。本公司不对第三方软件或技术提供客服支持，若您需要获取支持，请与第三方联系。\n4.您理解并同意，不论在何种情况下，本公司均不对由于互联网连接故障，电脑、通讯或其他系统的故障，电力故障，罢工，劳动争议，暴乱，起义，骚乱，火灾，洪水，风暴，爆炸，不可抗力，战争，政府行为，国际、国内法院的命令，第三方的不作为或任何本公司不能合理控制的原因而造成的本软件及服务不能访问、信息及数据的延误、停滞或错误，不能提供或延迟提供服务，承担任何责任。\n5.您理解并同意，本公司有权决定将本软件及服务作商业用途，本公司承诺在推广过程中严格按照本协议约定保护您的个人信息，同时您亦可以根据系统设置选择屏蔽、拒绝接收相关推广信息。\n6.您理解并同意，本公司会将会尽其商业上的合理努力保障您在本软件及服务中的数据存储安全，但是，本公司并不能就此提供完全保证，包括但不限于以下情形：\n（1）本公司不对您在本软件及服务中相关数据的删除或储存失败负责；\n（2）本公司有权根据实际情况自行决定单个用户在本软件及服务中数据的最长储存期限，并在服务器上为其分配数据最大存储空间等。您可根据自己的需要自行备份本软件及服务中的相关数据；\n（3）如果您停止使用本软件及服务或服务被终止或取消，本公司可以从服务器上永久地删除您的数据。服务停止、终止或取消后，本公司没有义务向您返还任何数据。\n.软件安装、卸载及更新\n1.甲方可能为不同的终端设备开发了不同的软件版本，您应当根据实际情况选择下载合适的版本进行安装。\n2.下载安装程序后，您需要按照该程序提示的步骤正确安装。为提供更加优质、安全的服务，在本软件安装时甲方可能推荐您安装其他软件，您可以选择安装或不安装。如果您不再需要使用本软件或者需要安装新版软件，可以自行卸载。如果您愿意帮助甲方改进产品服务，请告知卸载的原因。\n3.为了改善用户体验、完善服务内容，本公司将不断努力开发新的功能或版本，并为您不时提供软件更新（这些更新可能会采取软件替换、修改、功能强化、版本升级等形式）。\n4.为了保证本软件及服务的安全性和功能的一致性，本公司有权不经向您特别通知而对本软件进行更新，或者对本软件的部分功能效果进行改变或限制。本软件新版本发布后，旧版本的软件可能无法使用，请您随时核对并下载最新版本，因未能及时下载及使用最新版本导致的使用不能及相关风险将由您承担。如果您继续使用本软件及服务，则视为您同意接受更新后的本软件及服务。如果您拒绝接受更新后的本软件及服务，您应立即停止登录及使用本软件及服务；该等情形下，您仍需就您在停止使用前已发生的行为承担全部责任。\n5.您理解并同意，本公司有权因本软件及服务维护、升级或其他原因而暂停服务、调整服务功能或终止服务，本公司将事先在软件上进行公示或通知。您同意本公司无须就此向您承担任何责任。\n.用户行为规范\n（一）信息内容合法性规范\n用户使用本软件及服务过程中所制作、复制、发布、传播的任何内容（包括但不限于应用账号头像、名字、用户说明等信息，或文字、语音、图片等发送、回复，以及使用应用账号或本软件及服务所产生的其他内容）的合法性。用户承诺不利用应用账号或本软件及服务制作、复制、发布、传播下干扰软件正常运营，以及侵犯其他用户或第三方合法权益的内容，包括但不限于：\n1.发布、传送、传播、储存法律法规禁止的内容。\n2.发布、传送、传播、储存侵害他人名誉权、肖像权、知识产权、商业秘密等合法权利的内容。\n3.涉及他人隐私、个人信息或资料的。\n4.发表、传送、传播骚扰、广告信息、过度营销信息及垃圾信息或含有任何性或性暗示的信息。\n5.违反中华人民共和国宪法确定的基本原则的，危害国家安全的、泄露国家秘密、颠覆国家政权、破坏国家统一的。\n6.煽动地域歧视、地域仇恨、民族仇恨、民族歧视、破坏民族团结的。\n7.破坏国家宗教政策，宣扬邪教和迷信的，以非法民间组织名义活动的。\n8.包含恐怖、淫秽、色情、赌博、暴力血腥、高危险性、凶杀恐怖、教唆犯罪、危害表演者自身或他人身心健康内容的。\n9.危害网络安全、利用网络从事危害国家安全、荣誉和利益的，不符合应当遵守法律法规、社会主义制度、国家利益、公民合法利益、公众秩序、社会道德风尚和信息真实性等\“七条底线\”要求的。\n10.含有虚假、有害、胁迫、侵害他人隐私、骚扰、侵害、中伤、粗俗、猥亵、或其它道德上令人反感的内容。\n11.其他违反法律法规、政策及公序良俗、社会公德或干扰软件正常运营和侵犯其他用户或第三方合法权益内容的信息。\n（二）软件使用合法性规范\n1.用户使用本软件及服务的行为须尊重及维护本公司对软件的知识产权及软件的正常稳定运营，用户承诺不实施任何可能侵犯软件知识产权或影响软件正常运营的行为，包括但不限于：\n（a）删除或修改本软件上关于著作权的信息；\n（b）对本软件进行反向工程、反向汇编、反向编译，或者以其他方式尝试发现本软件的源代码；\n（c）对本公司拥有知识产权的内容进行使用、出租、出借、复制、模仿修改、转载、汇编、发表、出版、建立镜像站点等；\n（d）对本软件或者本软件运行过程中释放到任何终端内存中的数据、软件运行过程中客户端与服务器端的交互数据，以及本软件运行所必需的系统数据，进行复制、修改、增加、删除、挂接运行或创作任何衍生作品，形式包括但不限于使用插件、外挂或非经授权的第三方工具/服务接入本软件和相关系统；\n（e）通过修改或伪造软件运行中的指令、数据，增加、删减、变动软件的功能或运行效果，或者将用于上述用途的软件、方法进行运营或向公众传播，无论这些行为是否为商业目的；\n（f）通过非本公司开发、授权的第三方软件、插件、外挂、系统，登录或使用本软件及服务，或制作、发布、传播上述工具；\n（g）自行或者授权他人、第三方软件对本软件及其组件、模块、数据进行干扰；\n（h）故意制作、传播计算机病毒等破坏性程序的；\n（i）其他违反法律法规规定、侵犯其他用户合法权益、干扰本软件及服务正常运营的行为。\n1.用户使用本软件及服务过程中不得发生下列行为：\n（a）提交、发布虚假信息，或冒充、利用他人名义的；\n（b）强制、诱导其他用户点击链接页面或分享信息的；\n（c）虚构事实、隐瞒真相以误导、欺骗他人的；\n（d）侵害他人名誉权、肖像权、知识产权、商业秘密等合法权利的；\n（e）将应用账号或其任何功能以任何方式提供给第三方，或用于任何商业性用途；\n（f）利用应用账号或本软件及服务从事任何违法犯罪活动的；\n（g）制作、发布与以上行为相关的方法、工具，或对此类方法、工具进行运营或传播，无论这些行为是否为商业目的；\n（h）利用技术手段批量建立虚假账号；\n（i）其他违反法律法规规定、侵犯其他用户合法权益、干扰本软件及服务正常运营的行为。\n（三）违约处理\n1.如果本公司发现或收到他人举报或投诉用户违反本协议约定，本公司有权不经通知随时对相关内容进行删除、屏蔽，并视行为情节对违规账号处以包括但不限于警告、限制、中断、终止或禁止使用部分或全部功能、账号封禁直至注销的处罚，并公告处理结果。\n2.您理解并同意，本公司有权依合理判断对违反有关法律法规或本协议规定的行为进行处罚，对违法违规的任何用户采取适当的法律行动，并依据法律法规保存有关信息向有关部门报告等，用户应独自承担由此而产生的一切法律责任。\n3.您理解并同意，因您违反本协议或相关服务条款的规定，导致或产生第三方主张的任何索赔、要求或损失，您应当独立承担责任；本公司因此遭受损失的，您也应当一并赔偿。\n4.您理解并同意，如果您注册的账号在任何连续【180】日内未实际使用，则本公司有权删除该账号并停止为该用户提供相关服务。\n.未成年人使用条款\n1.若用户是未满18周岁的未成年人，用户应在监护人的指导并获得监护人同意的情况下，认真阅读并同意本协议后，方可使用本软件及服务。\n2.本公司重视对未成年人个人信息的保护，未成年用户在填写个人信息时，请加强个人保护意识并谨慎对待，并应在取得监护人的同意以及在监护人指导下正确使用本软件及服务。\n3.为更好地保护未成年人隐私权益，本公司司特别提醒您慎重发布包含未成年人素材的内容，一经发布，即视为您已获得权利人同意在本软件及服务展示未成年人的肖像、声音等信息，且允许本公司司依据本协议使用、处理该等与未成年人相关的内容。\n4.监护人特别提示：如您的被监护人使用本软件及服务的，您作为监护人应指导并监督被监护人的注册和使用行为，如您的被监护人申请注册账号，公司将视为其已取得您的同意。\n5.未成年人用户及其监护人理解并确认，如您违反法律法规、本协议内容，则您及您的监护人应依照法律规定承担因此而可能导致的全部法律责任。\n.支付与资费政策\n1.我们在提供本应用应用产品与／或服务时，会对您（注册用户）需要提供付费服务，向您收取一定的费用，以完成付费充值。目前，充值服务类型主要有按特定时长的订阅服务（包括但不限于月卡、季卡、年卡）。如您不同意支付该等费用，则无法使用收费服务部分的内容。\n2.我们有权决定付费本应用应用产品与／或服务的资费标准。我们可能会因铁皮人产品与／或服务的服务类型和服务周期不同，制定不同的资费标准，详细约定以各款应用公布、实际展示的资费标准为准。\n此外，需要特别提示您，根据App Store、华为应用商店的政策，其可能会向您提供自动扣费服务，请您在选择使用前仔细阅读App Store、华为应用商店的相关政策。若您希望取消自动扣费功能的，请您根据App Store、华为应用商店的相关政策及退订规则操作或与苹果公司、华为公司取得联系。\n1.您理解并同意，您支付前述服务费用的方式包括通过我们接入的第三方支付工具（如微信支付、支付宝等）向我们进行付款，当然您也可以向App Store、华为应用商店等第三方应用商店进行充值以完成您的支付。如支付工具有更新，我们会在支付页面上及时更新支付规则并通知您，详细约定以本应用公布、实际展示的支付规则为准。\n2.您理解并同意，因使用第三方支付工具进行支付而可能产生的任何商业风险（包括但不限于交易信息输入错误、不法分子利用您账户或银行卡等有价卡等进行违法活动等）均有可能给您造成相应的经济损失。我们在充分履行本协议条款和规则的义务和符合法律规定的前提下，不对您的前述风险和损失承担任何责任。我们善意提醒您，在与第三方建立法律关系前，您应审慎阅读第三方的用户服务协议、隐私政策等法律文件。\n3.如您需取消当前订阅，请您联系Email: tangyongqin@newto.cn。但是，如您使用App Store、华为应用商店自动扣费服务的，可以根据App Store、华为应用商店的退款政策向苹果公司、华为公司主张取消订阅服务及／或处理退款事宜。\n.保密和知识产权保护\n1.受国际版权公约、中华人民共和国著作权法、专利法、及其他知识产权方面的法律法规的保护，甲方平台的产品与/或服务及所使用的软件、界面、交互等元素、LOGO、商标、标识、图形、文字、文本、声音、音频、视频、肖像、图片、技术、材料等的所有知识产权归甲方所有和享有。\“知识产权\”包括在专利法、版权法、商标法、反不正当竞争法中等法律规定的任何和所有权利、任何和所有其它所有权以及其中的任何和所有应用、更新、扩展和恢复。\n2.对于乙方发表到甲方平台上的任何内容，用户同意甲方在全世界范围内具有免费的、永久性的、不可撤销的、非独家的和完全再许可的权利和许可，以使用、复制、修改、改编、出版、翻译、据以创作衍生作品、传播、表演和展示此等内容（整体或部分），和/或将此等内容编入当前已知的或以后开发的其他任何形式的作品、媒体或技术中。并且，用户许可本公司有权利就任何主体侵权而单独采取法律行动（包括但不限于诉讼、举报、律师函等形式）。\n3.乙方对本协议的内容以及在本合同签订、履行过程中知悉、获取的甲方资料和信息，除甲方做出相反的书面说明外，均应视为甲方的商业秘密。未经甲方书面同意不得向任何第三方泄漏。乙方因违反保密义务而给甲方造成损失的，应负相应的赔偿责任。\n4.尽管有上述规定，但本条款不适用以下信息：\n.依据法律法规的规定应当提供，行政、司法等职权部门要求提供的信息；\n.披露方同意接受方向第三方提供的信息；\n.不违反本协议的情况下，接受方从第三方合法正当接受的，不受保密限制的信息；\n.接受方未违反本协议的情况下即已公开或可以公开获得的信息；\n.法律法规所要求披露的信息。\n1.无论本协议是否变更、解除或终止，本协议保密条款不受其限制而继续有效，双方都应继续承担保密条款约定的保密义务。\n2.甲方为培训课程所制作的全部资料，在教学过程中产生的全部资料，甲方网站上所显示、使用或提供的软件、程序及内容，未经甲方同意，乙方在任何时候均不得以商业目的（包括但不限于将资料上传到乙方或其他方自媒体平台等）对上述资料进行利用；不得以任何方式翻译、复制、传播、编辑上述资料；不得删除、掩盖或更改甲方的版权声明、商标或其他权利声明/标签。\n.违约责任\n1.用户发生如下情形之一的，视为违约：\n（1）使用平台服务时违反有关法律法规规定的；\n（2）违反本协议或平台发布的规则的。\n1.如果本公司发现或收到他人举报您有违约行为的，本公司有权根据自身的判断，不经通知直接采取以下一项或多项处理措施：\n（1）对相关内容进行删除、屏蔽；\n（2）书面警告，以短信、邮件、站内信等一种或多种形式通知您要求您限期纠正该等行为；\n（3）限制、暂停、终止您使用部分或全部服务；\n（4）不退还任何的服务费用，且不进行任何的赔偿或补偿；\n（5）其他根据平台规则可采取的措施。\n1.如您的行为使本公司遭受损失的（包括但不限于被相关行政机关进行行政处罚或被第三人主张赔偿的），您应赔偿本公司的全部损失（包括但不限于直接经济损失、商誉损失及对外支付的赔偿金、和解款、律师费、诉讼费等经济损失）。\n.不允诺担保、责任有限及免责\n1.不允诺担保：甲方软件的用户提问、回答、发言仅代表用户个人观点，与甲方无关，且甲方不对用户发表的回答或评论的正确性、准确性、真实性进行保证。甲方为按现状提供，包含瑕疵及缺陷，甲方不提供任何其他担保。甲方不允诺其他无论是明示的还是默示的保证和担保，包括但不限于对特定目的的适销性和适应性，不侵权，以及任何出自交易过程或商业惯例的保证和条件。从甲方或他处获取的任何建议或信息，不论是口头的还是书面的，都不会对甲方产生本协议明确约定之外的其他保证和担保。\n2.责任有限：适用法律所允许的最大范围内，不论出于何种原因，甲方对您的全部责任为您为使用甲方的产品和服务而向甲方支付的费用总额。如果甲方免费向您提供了甲方服务，则甲方无义务对您承担任何赔偿责任。任何情况下，甲方不对出自本协议或与本协议有关的或与甲方的运行有关的任何特殊的、偶然的、惩罚性或间接的损害（包括但不限于数据损失、利润损失或营业损失）或采购替代产品承担责任，不论该等责任是基于合同，担保，侵权（包括过失），严格责任或其他，也不论甲方是否被事先告知了损失或损害发生的可能性。即使本协议约定的有限补救措施未能实现其根本目的，前述的责任限制依然适用。\n3.免责：如因下所列任何原因而造成的用户资料泄露、丢失、被盗用或被篡改等，甲方均有权获得免责：\n（1）任何因政府管制而造成的暂时性关闭等影响网络正常浏览的不可抗力原因；\n（2）任何计算机系统问题、黑客攻击、计算机病毒侵入或发作的原因；\n（3）任何因网络安全问题导致的账户或银行卡信息泄露，该风险可能会给用户造成经济损失，用户承诺自行承担向侵权方追究责任及追究责任不能的后果；\n（4）任何因用户个人原因导致的用户资料泄露、丢失、被盗用或被篡改等；\n（5）其他不能归责于甲方的原因。\n.合同终止与解除\n1.存在以下情况之一的，本公司将有权终止协议：\n（1）您主动中止或终止，包括但不限于课程到期未进行续费等；\n（2）因为您的违约行为，本公司主动中止或终止提供服务的；\n（3）因国家或相关政府监管部门要求或发生不可抗力事件时，本公司中止或终止服务的；\n（4）其他根据法律法规应中止或终止服务的。\n1.中止或终止服务后，本公司有权利但无需确保您收到特别提示或通知。当您发现无法登录或享受服务时，可以咨询客服人员。\n2.中止或终止后的处理\n（1）除法律规定的责任外，本公司对本服务的中止或终止对您和第三人不承担任何责任；\n（2）已收取的费用按照退款制度予以退还；\n（3）在本公司正在进行的交易，本公司将根据情况合理判断，是否继续进行或终止相关交易，并视情况决定是否进行退费或扣除相关费用作为违约金。\n1.除本协议另有约定情况外，本协议自您选择接受或使用本服务后生效，直至您终止本服务/注销账号时终止。\n.争议解决\n1.在本协议执行期间如果双方发生争议，双方应友好协商解决。如果协商不成，任何一方可向甲方所在地有管辖权的人民法院提请诉讼。\n2.诉讼期间，除争议内容以外，双方均应继续履行本协议约定的其他内容。\n.其他\n1.本协议自乙方注册提交信息之日起生效，本协议最终解释权归本公司所有，并保留一切解释和修改的权力。本协议其他条款未明示授权的其他一切权利仍由甲方保留，您在行使这些权利时须另外取得甲方的书面许可。甲方如果未行使前述任何权利，并不构成对该权利的放弃。\n2.若本协议的任何条款被享有合法管辖权的法院裁定为无效或不可执行，则该等条款应在最低必要范围内予以限制或排除，并以最能体现本用户协议意图的新条款予以替换，以使本用户协议继续完全有效。\n3.本用户协议构成甲方及乙方之间使用本软件相关的整体协议，并在此取代及取消甲方及乙方之间先前存在的与该等使用相关的任何书面或口头协议或理解（如有）。\n4.本协议的任何条款无论因何种原因无效或不具可执行性，其余条款仍有效，对双方具有约束力。\n5.乙方注册的账号和/或与账号绑定的微信账号是乙方接受平台服务的唯一身份凭证，由乙方负责保管。如因乙方原因造成损失，由乙方承担。\n6.乙方在使用软件时不可将个人隐私、商业秘密、国家机密等不得公开的信息发表、上传至甲方软件，也不可将该等信息通过甲方软件的服务传播给其他人。如因乙方原因造成损失，由乙方承担。\n7.乙方注册的账号/或与账号绑定的微信账号是乙方接受平台服务的唯一身份凭证，由乙方自行负责保管，禁止赠与、借用、租用、转让或者售卖。如因此给甲方造成损害，由乙方承担。\n8.如果您对本协议有任何疑问、意见或建议，通过以下方式与甲方联系：Email: games@sxybyte.com。";
                this.c_loader_biaoti.url = "ui://jyvm79orfkj2t";
            }
        }
        click_fanhui() {
            UIMgr.instance.closeUI("UIwendang");
        }
    }

    var E_UI_Banner_Type;
    (function (E_UI_Banner_Type) {
        E_UI_Banner_Type[E_UI_Banner_Type["NONE"] = 0] = "NONE";
        E_UI_Banner_Type[E_UI_Banner_Type["SHOW"] = 1] = "SHOW";
        E_UI_Banner_Type[E_UI_Banner_Type["HIDE"] = 2] = "HIDE";
    })(E_UI_Banner_Type || (E_UI_Banner_Type = {}));
    const ConfigJumpPackageUrl = "res/fgui/jumpgame";
    const ConfigCommonPackageUrl = "res/fgui/common";
    const Config$1 = {
        "Loading": {
            class: UILoading,
            package_name: "loading",
            component_name: "ui_loading",
            loadUrl: "loading/",
            isShowLoad: false,
            layer: 0,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.NONE,
            setExtension: {},
            preUrls: () => []
        },
        "Main": {
            class: UIMain,
            package_name: "main",
            component_name: "ui_zhujiemian",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 1,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.NONE,
            setExtension: {},
            preUrls: () => []
        },
        "Battle": {
            class: UIBattle,
            package_name: "main",
            component_name: "ui_game",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 1,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.NONE,
            setExtension: {},
            preUrls: () => []
        },
        "Sign": {
            class: UISign,
            package_name: "qiandao",
            component_name: "qiandao",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {},
            preUrls: () => []
        },
        "Share": {
            class: UIShare,
            package_name: "share",
            component_name: "ui_share",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {},
            preUrls: () => []
        },
        "Invate": {
            class: UIInvate,
            package_name: "share",
            component_name: "ui_fenxiang",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {},
            preUrls: () => []
        },
        "UIAdExchangeMoney": {
            class: UIAdExchangeMoney,
            package_name: "main",
            component_name: "ui_mianfeichaopiao",
            loadUrl: "res/fgui/",
            isShowLoad: true,
            layer: 3,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
            setExtension: {}
        },
        "comp_jinbidonghua1": {
            class: UIGlodAnimFly,
            package_name: "common",
            component_name: "comp_jinbidonghua1",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 8,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {}
        },
        "comp_jinbidonghua4": {
            class: UIGlodAnimFly,
            package_name: "common",
            component_name: "comp_jinbidonghua4",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 8,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {}
        },
        "comp_jinbidonghua2": {
            class: UIGlodAnimFly,
            package_name: "common",
            component_name: "comp_jinbidonghua2",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 8,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {}
        },
        "comp_jinbidonghua3": {
            class: UIGlodAnimFly,
            package_name: "common",
            component_name: "comp_jinbidonghua3",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 8,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {}
        },
        "UISetting": {
            class: UISetting,
            package_name: "setting",
            component_name: "ui_setting",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 3,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "Skin": {
            class: UISkin,
            package_name: "pifu",
            component_name: "ui_pifu",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {
                "comp_pifu": UISkinItem,
            }
        },
        "TrySkin": {
            class: UITrySkin,
            package_name: "shiyong",
            component_name: "ui_shiyong",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
            setExtension: {
                "comp_pifu": UISkinItem,
            }
        },
        "CompBoEffect": {
            class: UIComboEffect,
            package_name: "main",
            component_name: "comp_lianjiwenzi",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 888,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "FailEffect": {
            class: UIFailEffect,
            package_name: "main",
            component_name: "comp_bad",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 888,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "UILoad": {
            class: UILoad,
            package_name: "loading",
            component_name: "ui_loading2",
            loadUrl: "loading/",
            isShowLoad: false,
            layer: 999,
            banner_state: E_UI_Banner_Type.HIDE,
            destroy_release_package: false,
        },
        "AdShare": {
            class: UIAdShare,
            package_name: "share",
            component_name: "ui_ADshare",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {},
            preUrls: () => []
        },
        "UIRank": {
            class: UIRank,
            package_name: "paihangbang",
            component_name: "ui_ranking",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
            setExtension: {
                "comp_rank": UIRankItem,
                "comp_rank1": UIRankItem
            }
        },
        "UIXiangqing": {
            class: UIXiangqing,
            package_name: "paihangbang",
            component_name: "ui_xiangqing",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "Reward": {
            class: UIReward,
            package_name: "common",
            component_name: "ui_huode",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 4,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            preUrls: () => []
        },
        "End": {
            class: UIJiesuan,
            package_name: "jiesuan",
            component_name: "ui_jiesuan",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {
                "comp_yongyou": UIYongyou
            }
        },
        "Choujiang": {
            class: UIchoujiang,
            package_name: "choujiang",
            component_name: "ui_choujiang",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {}
        },
        "HuodeBox": {
            class: UIhuode,
            package_name: "suijishijian",
            component_name: "ui_huode",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {}
        },
        "Shengji": {
            class: UIShengji,
            package_name: "main",
            component_name: "ui_shengji",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {}
        },
        "UpgradePlayer": {
            class: UIshengjiyuangong,
            package_name: "main",
            component_name: "ui_shengjiyuangong",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {}
        },
        "Dianti": {
            class: UIdianti,
            package_name: "dianti",
            component_name: "ui_dianti",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 2,
            destroy_release_package: true,
            banner_state: E_UI_Banner_Type.HIDE,
            setExtension: {}
        },
        "UIyinsi1": {
            class: UIyinsi,
            package_name: "yinsizhengce",
            component_name: "ui_yinsi1",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "UIyinsi2": {
            class: UIyinsi2,
            package_name: "yinsizhengce",
            component_name: "ui_yinsi2",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
        "UIwendang": {
            class: UIwendang,
            package_name: "yinsizhengce",
            component_name: "ui_wendang",
            loadUrl: "res/fgui/",
            isShowLoad: false,
            layer: 5,
            banner_state: E_UI_Banner_Type.NONE,
            destroy_release_package: false,
        },
    };

    var E_UI_Parent;
    (function (E_UI_Parent) {
        E_UI_Parent[E_UI_Parent["none"] = 0] = "none";
        E_UI_Parent[E_UI_Parent["fight_ui"] = 1] = "fight_ui";
        E_UI_Parent[E_UI_Parent["fgui"] = 99] = "fgui";
        E_UI_Parent[E_UI_Parent["diamondsFly"] = 100] = "diamondsFly";
        E_UI_Parent[E_UI_Parent["tip"] = 101] = "tip";
    })(E_UI_Parent || (E_UI_Parent = {}));
    var E_UI_State;
    (function (E_UI_State) {
        E_UI_State[E_UI_State["None"] = 0] = "None";
        E_UI_State[E_UI_State["Load"] = 1] = "Load";
        E_UI_State[E_UI_State["Show"] = 2] = "Show";
        E_UI_State[E_UI_State["Hide"] = 3] = "Hide";
        E_UI_State[E_UI_State["Wait"] = 4] = "Wait";
        E_UI_State[E_UI_State["LoadError"] = 5] = "LoadError";
        E_UI_State[E_UI_State["LoadClose"] = 6] = "LoadClose";
    })(E_UI_State || (E_UI_State = {}));
    class UIMgr {
        constructor() {
            this.loadUrl = "";
            this.m_map_ui = new Maps$1();
            this.openUICount = {};
            this.isLoadCommonPackage = false;
        }
        getFguiUrl() {
            let urls = [];
            for (let key in Config$1) {
                let value = Config$1[key];
                Sets$1.add(urls, value.loadUrl);
            }
            return urls;
        }
        openUIByCompName(compName) {
            let ui_name = Maps$1.filterKey(Config$1, v => v.component_name == compName);
            this.openUI(ui_name);
        }
        openUI(ui_name, openData, openCb, closeCb) {
            console.log("openUI:", ui_name);
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("openUI: 检查配置", ui_name);
                return;
            }
            this.getUIData(ui_name).closeCb = closeCb;
            let ui = this.getUIData(ui_name).ui;
            if (ui) {
                this.openUIed(ui, openData, openCb);
                return;
            }
            this.getUIData(ui_name).state = E_UI_State.Load;
            let isShowLoad = Config$1[ui_name].isShowLoad;
            if (isShowLoad)
                this.openUI("UILoad");
            this.load(ui_name, () => {
                if (isShowLoad)
                    this.closeUI("UILoad");
                if (this.getUIData(ui_name).state == E_UI_State.None) {
                    console.log("还没加载完 就调用销毁");
                    return;
                }
                ui = this.createUI(ui_name);
                this.openUIed(ui, openData, openCb);
            });
        }
        ;
        openUINoCom(ui_name, openData, openCb, closeCb) {
            console.log("openUI:", ui_name);
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("openUI: 检查配置", ui_name);
                return;
            }
            this.getUIData(ui_name).closeCb = closeCb;
            let ui = this.getUIData(ui_name).ui;
            if (ui) {
                this.openUIed(ui, openData, openCb);
                return;
            }
            this.getUIData(ui_name).state = E_UI_State.Load;
            let isShowLoad = Config$1[ui_name].isShowLoad;
            if (isShowLoad)
                this.openUI("UILoad");
            this.loadNoCom(ui_name, () => {
                if (isShowLoad)
                    this.closeUI("UILoad");
                if (this.getUIData(ui_name).state == E_UI_State.None) {
                    console.log("还没加载完 就调用销毁");
                    return;
                }
                ui = this.createUI(ui_name);
                this.openUIed(ui, openData, openCb);
            });
        }
        ;
        closeUI(ui_name, destroy = false, arm = null) {
            let path = this.getPath(ui_name);
            if (!path) {
                console.error("closeUI: 检查配置", ui_name);
                return;
            }
            let state = this.getUIData(ui_name).state;
            switch (state) {
                case E_UI_State.None:
                    console.log("close_ui 没有找到ui name:", ui_name);
                    break;
                case E_UI_State.Show:
                    console.log("close_ui name: ", ui_name);
                    let ui = this.getUIData(ui_name).ui;
                    let closeCb = this.getUIData(ui_name).closeCb;
                    if (destroy) {
                        this.destroyUI(ui_name);
                        this.emimOpenByCloseCb(ui_name, closeCb, arm);
                    }
                    else {
                        this.getUIData(ui_name).state = E_UI_State.Hide;
                        this.setUIActive(ui, false, true);
                        this.emimOpenByCloseCb(ui_name, closeCb, arm);
                        this.checkWaitUI();
                    }
                    break;
                case E_UI_State.Load:
                    console.log("close_ui 还没加载完关闭ui name:", ui_name);
                    this.getUIData(ui_name).state = E_UI_State.LoadClose;
                    break;
                case E_UI_State.Wait:
                    console.log("close_ui 等待队列中移除ui name:", ui_name);
                    this.getUIData(ui_name).state = E_UI_State.Hide;
                    break;
                case E_UI_State.Hide:
                    console.log("close_ui ui已关闭 勿重复调用 name:", ui_name);
                    break;
            }
        }
        ;
        emimOpenByCloseCb(ui_name, cb, arm = null) {
            this.getUIData(ui_name).closeCb = null;
            if (cb) {
                cb(arm);
            }
        }
        releaseUIPackage(ui_name) {
            let config = Config$1[ui_name];
            fgui.UIPackage.removePackage(config.package_name);
            ResourcesMgr$1.instance.release(this.getPath(ui_name) + "." + fgui.UIConfig.packageFileExtension);
        }
        destroyUI(ui_name) {
            let ui = this.getUIData(ui_name).ui;
            if (!ui) {
                console.error("请配置ui:", ui_name);
                return;
            }
            this.m_map_ui.delete(ui_name);
            this.setUIActive(ui, false, true);
            ui._onDestroy();
            ui.dispose();
            this.checkWaitUI();
        }
        closeAll(destroy = false) {
            this.m_map_ui.forEach((value, key) => {
                let state = this.getUIData(key).state;
                switch (state) {
                    case E_UI_State.Show:
                        this.getUIData(key).state = E_UI_State.Hide;
                        break;
                    case E_UI_State.Load:
                        this.getUIData(key).state = E_UI_State.LoadClose;
                        break;
                    case E_UI_State.Wait:
                        this.getUIData(key).state = E_UI_State.Hide;
                        break;
                }
                let closeCb = this.getUIData(key).closeCb;
                if (destroy)
                    this.destroyUI(key);
                else
                    this.setUIActive(this.getUIData(key).ui, false, true);
                this.emimOpenByCloseCb(key, closeCb);
            });
            if (destroy)
                this.m_map_ui.clear();
            console.log(destroy ? "销毁所有节点缓存池" : "关闭所有显示节点");
        }
        getPath(ui_name) {
            if (!Config$1[ui_name])
                return "";
            return this.loadUrl + Config$1[ui_name].loadUrl + Config$1[ui_name].package_name;
        }
        getUIData(ui_name) {
            if (ui_name == null) {
                return;
            }
            let value = this.m_map_ui.get(ui_name);
            if (!value) {
                value = {
                    state: E_UI_State.None,
                    ui: null,
                    closeCb: null,
                };
                this.m_map_ui.set(ui_name, value);
            }
            return value;
        }
        ;
        setUIActive(ui, value, is_cb) {
            let state = ui.visible;
            if (value) {
                ui.visible = true;
                if (!state && is_cb)
                    ui._onOpen();
            }
            else {
                ui.visible = false;
                if (state && is_cb) {
                    ui._onClose();
                }
            }
        }
        ;
        createUI(ui_name) {
            let value = Config$1[ui_name];
            if (!value) {
                console.error("请配置ui:", ui_name);
                return null;
            }
            if (value.setExtension)
                for (let key in value.setExtension)
                    FguiBase$3.setExtension(value.package_name, key, value.setExtension[key]);
            let ui = fairygui.UIPackage.createObject(value.package_name, value.component_name, value.class);
            if (!ui) {
                console.error("创建ui失败:", ui_name, value);
                return null;
            }
            ui.UI_NAME = ui_name;
            ui.name = ui_name;
            this.getUIData(ui_name).ui = ui;
            ui.makeFullScreen();
            if (this.getUIData(ui_name).state != E_UI_State.LoadClose)
                this.getUIData(ui_name).state = E_UI_State.Hide;
            console.log("添加UI到管理中：当前：" + ui_name);
            let ui_parent = this.getParent(E_UI_Parent.fgui);
            let parent = FguiBase$3.insert_child(ui_parent, ui.layer);
            parent.addChild(ui);
            ui._onCreate();
            this.setUIActive(ui, false, false);
            return ui;
        }
        ;
        getParent(type) {
            if (!fgui.GRoot.inst.displayObject.parent) {
                Laya.stage.addChild(fgui.GRoot.inst.displayObject);
            }
            return FguiBase$3.insert_child(fgui.GRoot.inst, type);
        }
        checkWaitUI() {
            let wait_ui = this.findWaitUIMaxLevel();
            if (wait_ui) {
                console.log("close_ui 派发等待ui name:", wait_ui.UI_NAME);
                this.getUIData(wait_ui.UI_NAME).state = E_UI_State.Show;
                this.setUIActive(wait_ui, true, true);
            }
        }
        load(ui_name, cb) {
            Times.console("加载ui");
            this.loadCommonPackage(() => {
                let urls = [this.getPath(ui_name)];
                let preUrls = Config$1[ui_name].preUrls;
                if (preUrls) {
                    if (typeof preUrls == "function")
                        urls.push(...preUrls());
                    else
                        urls.push(...preUrls);
                }
                ResourcesMgr$1.instance.loadDir(urls, () => {
                    Times.consoleEnd("加载ui", ui_name);
                    if (cb)
                        cb();
                });
            });
        }
        ;
        loadNoCom(ui_name, cb) {
            Times.console("加载ui");
            let urls = [this.getPath(ui_name)];
            let preUrls = Config$1[ui_name].preUrls;
            if (preUrls) {
                if (typeof preUrls == "function")
                    urls.push(...preUrls());
                else
                    urls.push(...preUrls);
            }
            ResourcesMgr$1.instance.loadDir(urls, () => {
                Times.consoleEnd("加载ui", ui_name);
                if (cb)
                    cb();
            });
        }
        ;
        loadCommonPackage(cb) {
            if (this.isLoadCommonPackage)
                cb();
            else
                ResourcesMgr$1.instance.load(ConfigCommonPackageUrl, cb);
        }
        openUIed(ui, openData, openCb) {
            let state = this.getUIData(ui.UI_NAME).state;
            if (this.openUICount[ui.UI_NAME] == undefined)
                this.openUICount[ui.UI_NAME] = 0;
            this.openUICount[ui.UI_NAME]++;
            switch (state) {
                case E_UI_State.Wait:
                    console.log("open_ui 在等待队列中，重新显示:", ui.UI_NAME);
                    this.getUIData(ui.UI_NAME).state = E_UI_State.Hide;
                    this.openUIed(ui, openData, openCb);
                    break;
                case E_UI_State.Show:
                    if (openCb)
                        openCb(ui);
                    console.log("open_ui 当前界面已在显示，请勿重复调用 name:", ui.UI_NAME);
                    break;
                case E_UI_State.Hide:
                    let sameUI = this.find_show_and_level_ui(ui);
                    if (sameUI) {
                        console.log("open_ui 添加到等待队列: name:", sameUI);
                        this.getUIData(sameUI).state = E_UI_State.Wait;
                        this.setUIActive(this.getUIData(sameUI).ui, false, true);
                    }
                    console.log("open_ui 显示成功 name:", ui.UI_NAME);
                    this.getUIData(ui.UI_NAME).state = E_UI_State.Show;
                    ui.openData = openData;
                    this.setUIActive(ui, true, true);
                    if (openCb)
                        openCb(ui);
                    break;
                case E_UI_State.None:
                    console.log("open_ui 没有找到ui name:", ui.UI_NAME);
                    break;
                case E_UI_State.Load:
                    console.log("open_ui 正在加载中 请等待加载完调用 name:", ui.UI_NAME);
                    break;
                case E_UI_State.LoadClose:
                    this.getUIData(sameUI).state = E_UI_State.Hide;
                    console.log("open_ui 未加载完已调用CloseUI name:", ui.UI_NAME);
                    break;
                case E_UI_State.LoadError:
                    console.log("open_ui 加载失败的ui name:", ui.UI_NAME);
                    break;
            }
        }
        ;
        find_show_and_level_ui(ui) {
            let map = this.m_map_ui.maps;
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State.Show) {
                    if (ui.layer == this.getUIData(key).ui.layer)
                        return key;
                }
            }
            return null;
        }
        ;
        findWaitUIMaxLevel() {
            let map = this.m_map_ui.maps;
            let maxLayer = 0;
            let ui = null;
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State.Wait) {
                    let other_ui = this.getUIData(key).ui;
                    if (other_ui.layer >= maxLayer) {
                        maxLayer = other_ui.layer;
                        ui = other_ui;
                    }
                }
            }
            return ui;
        }
        ;
        getWaitUIs() {
            let map = this.m_map_ui.maps;
            let ui_names = [];
            for (let key in map) {
                if (this.getUIData(key).state == E_UI_State.Wait)
                    ui_names.push(key);
            }
            return ui_names;
        }
        hasOnceUIShow(ui_name) {
            let map = this.m_map_ui.maps;
            for (let key in map) {
                if (ui_name != key) {
                    if (this.getUIData(key).state == E_UI_State.Show)
                        return false;
                }
            }
            return true;
        }
        getOpenUICount(ui_name) {
            return this.openUICount[ui_name] || 0;
        }
        iconUrl(iconName) {
            return "ui://common/" + iconName;
        }
        iconUrlPack(iconName, packagename = "common") {
            return "ui://" + packagename + "/" + iconName;
        }
        getShowWinLen() {
            let count = 0;
            this.m_map_ui.forEach((v, k) => {
                if (k == ModuleType.Loading || k == ModuleType.UIGlodAnimFly)
                    return;
                if (v.state == E_UI_State.Show) {
                    count++;
                }
            });
            return count;
        }
        getUIShowing(ui) {
            let show = false;
            this.m_map_ui.forEach((v, k) => {
                if (k == ui && v.state == E_UI_State.Show) {
                    show = true;
                }
            });
            return show;
        }
    }
    UIMgr.instance = new UIMgr();

    class GameConfig {
        constructor() { }
        static init() {
            Laya.ClassUtils.regClass;
        }
    }
    GameConfig.width = 750;
    GameConfig.height = 1334;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    GameConfig.init();

    class LogicTurntable {
        constructor() {
            this.oddsTotal = 0;
            this._ticketNum = 0;
            this.rotateNum = 0;
            this.rotateLvl = 0;
            this.rewardMap = {};
        }
        static get instance() {
            if (this._instance == null) {
                this._instance = new LogicTurntable();
            }
            return this._instance;
        }
        static _randomsort(a, b) {
            return Math.random() > .5 ? -1 : 1;
        }
        init() {
            this.itemList = [];
            this.viewList = [];
            this.oddsTotal = 0;
            this.rewardIndex = 0;
            this.handlerRotateComplete = Laya.Handler.create(this, this.onRotateComplete, null, false);
        }
        getItemByIndex(index) {
            return this.itemList[index];
        }
        getItemRewardNum(item) {
            if (item)
                return this.rewardMap[item.key] | 0;
            else
                return 0;
        }
        calcRewardTimeLeft() {
            for (let i = 0; i < this.itemList.length; i++) {
                let item = this.itemList[i];
                if (item && item.rewardTime > 0 && this.getItemRewardNum(item) == 0) {
                    return item;
                }
            }
        }
        getRewardTimeLeft() {
            let item = this.calcRewardTimeLeft();
            if (item) {
                return item.rewardTime - this.rotateNum;
            }
            else {
                return -1;
            }
        }
        getItemIndex(item) {
            for (let i = 0; i < this.itemList.length; i++) {
                if (item == this.itemList[i]) {
                    return i;
                }
            }
            return 0;
        }
        getRandItemIndex() {
            let r = LogicTurntable.random(0, this.oddsTotal - 1);
            let r_range = 0;
            for (let i = 0; i < this.itemList.length; i++) {
                r_range += this.itemList[i].odds;
                if (r < r_range) {
                    return i;
                }
            }
            return 0;
        }
        addItem(item) {
            this.itemList.push(item);
            this.oddsTotal += item.odds;
        }
        addItemArray(array) {
            for (let item of array) {
                this.addItem(item);
            }
        }
        randomItem() {
            LogicTurntable.randomSort(this.itemList);
        }
        get ticketNum() {
            return this._ticketNum;
        }
        set ticketNum(v) {
            this._ticketNum = v;
        }
        initData() {
            this.ticketNum = LocalCache$1.get(LogicTurntable.KEY_LUCKWHEEL_TICKET_NUM, 1);
            this.rotateNum = LocalCache$1.get(LogicTurntable.KEY_LUCKWHEEL_ROTATE_NUM, 0);
            this.rotateLvl = LocalCache$1.get(LogicTurntable.KEY_LUCKWHEEL_ROTATE_LVL, 0);
            this.rewardMap = LocalCache$1.get(LogicTurntable.KEY_LUCKWHEEL_REWARD_MAP, {});
        }
        bindView(view) {
            this.view = view;
        }
        addItemView(obj) {
            this.viewList.push(obj);
        }
        refreshView() {
            for (let i = 0; i < this.viewList.length; i++) {
                let view = this.viewList[i];
                let item = this.itemList[i];
                if (item) {
                    this.view.renderItemView(view, this.verifyItem(item).data);
                }
            }
        }
        verifyItem(item) {
            if (this.getItemRewardNum(item) > 0 && item.nextItem) {
                return this.verifyItem(item.nextItem);
            }
            else {
                return item;
            }
        }
        getTicketNum() {
            return this.ticketNum;
        }
        getRotateNum() {
            return this.rotateNum;
        }
        getRotateLvl() {
            return this.rotateLvl;
        }
        getRewardMap() {
            return this.rewardMap;
        }
        setTicketNum(value) {
            this.ticketNum = value;
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_TICKET_NUM, this.ticketNum);
        }
        setRotateNum(value) {
            this.rotateNum = value;
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_ROTATE_NUM, this.rotateNum);
        }
        setRotateLvl(value) {
            this.rotateLvl = value;
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_ROTATE_LVL, this.rotateLvl);
        }
        setRewardMap(value) {
            this.rewardMap = value;
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_REWARD_MAP, this.rewardMap);
        }
        rotateWheelWithTicket() {
            if (this.ticketNum > 0) {
                this.ticketNum--;
                LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_TICKET_NUM, this.ticketNum);
                this.rotateWheel();
            }
        }
        rotateWheel() {
            if (this.actionTurn)
                return;
            this.rotateNum++;
            let item = this.calcRewardTimeLeft();
            if (item && item.rewardTime == this.rotateNum) {
                this.rewardIndex = this.getItemIndex(item);
                this.rotateNum = 0;
            }
            else {
                this.rewardIndex = this.getRandItemIndex();
            }
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_ROTATE_NUM, this.rotateNum);
            this.rotateToItemByIndex(this.rewardIndex);
        }
        clearAction() {
            if (this.actionTurn) {
                this.actionTurn.clear();
                this.actionTurn = null;
            }
        }
        rotateToItemByIndex(index) {
            this.clearAction();
            let r = LogicTurntable.random(2, 4);
            let degreeItem = -360 / this.itemList.length;
            let targetDegree = degreeItem * index + 360 * (1 + r);
            let luckWheel = this.view.luckWheel;
            luckWheel.rotation = luckWheel.rotation % 360;
            this.actionTurn = Laya.Tween.to(luckWheel, {
                rotation: targetDegree,
            }, 1000 * r, Laya.Ease.sineOut, this.handlerRotateComplete);
        }
        addItemRewardNum(item) {
            let rewardNum = this.rewardMap[item.key] | 0;
            this.rewardMap[item.key] = rewardNum + 1;
            LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_REWARD_MAP, this.rewardMap);
        }
        onRotateComplete() {
            this.clearAction();
            let item = this.verifyItem(this.getItemByIndex(this.rewardIndex));
            this.addItemRewardNum(item);
            if (item.rewardTime > 0 && this.calcRewardTimeLeft()) {
                this.rotateNum = 0;
                LocalCache$1.set(LogicTurntable.KEY_LUCKWHEEL_ROTATE_NUM, this.rotateNum);
            }
            this.view.onRewardItem(item.data);
        }
    }
    LogicTurntable.KEY_LUCKWHEEL_TICKET_NUM = "KEY_LUCKWHEEL_TICKET_NUM";
    LogicTurntable.KEY_LUCKWHEEL_ROTATE_NUM = "KEY_LUCKWHEEL_ROTATE_NUM";
    LogicTurntable.KEY_LUCKWHEEL_ROTATE_LVL = "KEY_LUCKWHEEL_ROTATE_LVL";
    LogicTurntable.KEY_LUCKWHEEL_REWARD_MAP = "KEY_LUCKWHEEL_REWARD_MAP";
    LogicTurntable._instance = null;
    LogicTurntable.randomSort = function (array) {
        array.sort(this._randomsort);
    };
    LogicTurntable.random = function (min, max) {
        return Math.round(Math.random() * (max - min) + min);
    };

    class LogicBaoxiang {
        constructor() {
            this.unlocks_temp = [];
            this.open_temp = [];
            this.baoxiangIds = [];
        }
        initData() {
            this.randOpenIds();
        }
        get keyCount() {
            return LocalCache$1.get("LogicBaoxiang._keyCount", 0);
        }
        get unlocks() {
            return LocalCache$1.get("LogicBaoxiang._unlocks", this.unlocks_temp);
        }
        getReward(Id) {
            var unlocks = this.unlocks;
            unlocks.push(Id);
            LocalCache$1.set("LogicBaoxiang._unlocks", unlocks);
        }
        addKeyCount(value) {
            var count = this.keyCount + value;
            count = Math.max(Math.min(count, 3), 0);
            LocalCache$1.set("LogicBaoxiang._keyCount", count);
            this.randOpenIds();
        }
        get openKeys() {
            return LocalCache$1.get("LogicBaoxiang._opens", this.open_temp);
        }
        removeOpenIds(Id) {
            var opens = this.openKeys;
            var index = opens.indexOf(Id);
            if (index >= 0) {
                opens.splice(index, 1);
            }
            LocalCache$1.set("LogicBaoxiang._opens", opens);
        }
        resetBaoxiang() {
            LocalCache$1.set("LogicBaoxiang._unlocks", []);
            LocalCache$1.set("LogicBaoxiang._opens", []);
            let baoxiang = GameData.getBaoXiang();
            var unlocks = this.unlocks;
            var opens = this.openKeys;
            let arr = [];
            for (let key in baoxiang) {
                if (unlocks.indexOf(Number(key)) < 0 && opens.indexOf(Number(key)) < 0) {
                    let bao = GameData.getBaoXiangItem(key);
                    if (bao.Type == 1) {
                        let skinId = bao.SkinId;
                        if (LogicSkin.instance.has(skinId)) ;
                        else {
                            arr.push(Number(key));
                        }
                    }
                    else {
                        arr.push(Number(key));
                    }
                }
                if (arr.length >= 9) {
                    break;
                }
            }
            this.baoxiangIds = arr;
            this.randOpenIds();
            LogicBaoxiang.isOpenForRand = true;
        }
        randOpenIds() {
            GameData.getBaoXiang();
            this.unlocks;
            var opens = this.openKeys;
            var count = this.keyCount;
            if (count > opens.length) {
                var count = count - opens.length;
                var arr = this.baoxiangIds.concat();
                for (var i = 0; i < count; i++) {
                    var index = Math.floor(Math.random() * arr.length);
                    var id = arr[index];
                    opens.push(id);
                    arr.splice(index, 1);
                }
                LocalCache$1.set("LogicBaoxiang._opens", opens);
            }
        }
    }
    LogicBaoxiang.instance = new LogicBaoxiang();
    LogicBaoxiang.isOpenForRand = false;

    var DownTimeVS$1 = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\n#include \"Lighting.glsl\";\n#include \"LayaUtile.glsl\"\n#include \"Shadow.glsl\";\nattribute vec4 a_Position;\n#ifdef GPU_INSTANCE\nuniform mat4 u_ViewProjection;\n#else\nuniform mat4 u_MvpMatrix;\n#endif\n#if defined(DIFFUSEMAP)||defined(THICKNESSMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\nattribute vec2 a_Texcoord0;varying vec2 v_Texcoord0;\n#endif\n#if defined(LIGHTMAP)&&defined(UV1)\nattribute vec2 a_Texcoord1;\n#endif\n#ifdef LIGHTMAP\nuniform vec4 u_LightmapScaleOffset;varying vec2 v_LightMapUV;\n#endif\n#ifdef COLOR\nattribute vec4 a_Color;varying vec4 v_Color;\n#endif\n#ifdef BONE\nconst int c_MaxBoneCount=24;attribute vec4 a_BoneIndices;attribute vec4 a_BoneWeights;uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\nattribute vec3 a_Normal;varying vec3 v_Normal;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nuniform vec3 u_CameraPos;varying vec3 v_ViewDir;\n#endif\n#if defined(NORMALMAP)\nattribute vec4 a_Tangent0;varying vec3 v_Tangent;varying vec3 v_Binormal;\n#endif\n#ifdef GPU_INSTANCE\nattribute mat4 a_WorldMat;\n#else\nuniform mat4 u_WorldMat;\n#endif\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\nvarying vec3 v_PositionWorld;\n#endif\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nvarying vec4 v_ShadowCoord;\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nvarying vec4 v_SpotShadowCoord;\n#endif\nuniform vec4 u_TilingOffset;void main(){vec4 position;\n#ifdef BONE\nmat4 skinTransform;\n#ifdef SIMPLEBONE\nfloat currentPixelPos;\n#ifdef GPU_INSTANCE\ncurrentPixelPos=a_SimpleTextureParams.x+a_SimpleTextureParams.y;\n#else\ncurrentPixelPos=u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\n#endif\nfloat offset=1.0/u_SimpleAnimatorTextureSize;skinTransform=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset)*a_BoneWeights.x;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset)*a_BoneWeights.y;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset)*a_BoneWeights.z;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset)*a_BoneWeights.w;\n#else\nskinTransform=u_Bones[int(a_BoneIndices.x)]*a_BoneWeights.x;skinTransform+=u_Bones[int(a_BoneIndices.y)]*a_BoneWeights.y;skinTransform+=u_Bones[int(a_BoneIndices.z)]*a_BoneWeights.z;skinTransform+=u_Bones[int(a_BoneIndices.w)]*a_BoneWeights.w;\n#endif\nposition=skinTransform*a_Position;\n#else\nposition=a_Position;\n#endif\nmat4 worldMat;\n#ifdef GPU_INSTANCE\nworldMat=a_WorldMat;\n#else\nworldMat=u_WorldMat;\n#endif\n#ifdef GPU_INSTANCE\ngl_Position=u_ViewProjection*worldMat*position;\n#else\ngl_Position=u_MvpMatrix*position;\n#endif\nmat3 worldInvMat;\n#ifdef BONE\nworldInvMat=INVERSE_MAT(mat3(worldMat*skinTransform));\n#else\nworldInvMat=INVERSE_MAT(mat3(worldMat));\n#endif\nv_Normal=normalize(a_Normal*worldInvMat);\n#if defined(NORMALMAP)\nv_Tangent=normalize(a_Tangent0.xyz*worldInvMat);v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n#endif\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\nvec3 positionWS=(worldMat*position).xyz;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nv_ViewDir=u_CameraPos-positionWS;\n#endif\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\nv_PositionWorld=positionWS;\n#endif\n#endif\n#if defined(DIFFUSEMAP)||defined(THICKNESSMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\nv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n#endif\n#ifdef LIGHTMAP\n#ifdef UV1\nv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n#else\nv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n#endif\nv_LightMapUV.y=1.0-v_LightMapUV.y;\n#endif\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nv_Color=a_Color;\n#endif\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nv_ShadowCoord=getShadowCoord(vec4(positionWS,1.0));\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nv_SpotShadowCoord=u_SpotViewProjectMatrix*vec4(positionWS,1.0);\n#endif\ngl_Position=remapGLPositionZ(gl_Position);}";

    var DownTimeFS$1 = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\n#include \"Lighting.glsl\";\n#include \"Shadow.glsl\"\nuniform vec4 u_DiffuseColor;uniform float u_AlbedoIntensity;\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nvarying vec4 v_Color;\n#endif\n#ifdef ALPHATEST\nuniform float u_AlphaTestValue;\n#endif\n#ifdef DIFFUSEMAP\nuniform sampler2D u_DiffuseTexture;\n#endif\n#if defined(DIFFUSEMAP)||defined(THICKNESSMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\nvarying vec2 v_Texcoord0;\n#endif\n#ifdef LIGHTMAP\nvarying vec2 v_LightMapUV;uniform sampler2D u_LightMap;\n#ifdef LIGHTMAP_DIRECTIONAL\nuniform sampler2D u_LightMapDirection;\n#endif\n#endif\nvarying vec3 v_Normal;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nvarying vec3 v_ViewDir;uniform vec3 u_MaterialSpecular;uniform float u_Shininess;\n#ifdef LEGACYSINGLELIGHTING\n#ifdef DIRECTIONLIGHT\nuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\nuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\nuniform SpotLight u_SpotLight;\n#endif\n#else\nuniform mat4 u_View;uniform vec4 u_ProjectionParams;uniform vec4 u_Viewport;uniform int u_DirationLightCount;uniform sampler2D u_LightBuffer;uniform sampler2D u_LightClusterBuffer;\n#endif\n#ifdef SPECULARMAP\nuniform sampler2D u_SpecularTexture;\n#endif\n#endif\n#ifdef NORMALMAP\nuniform sampler2D u_NormalTexture;varying vec3 v_Tangent;varying vec3 v_Binormal;\n#endif\n#ifdef FOG\nuniform float u_FogStart;uniform float u_FogRange;uniform vec3 u_FogColor;\n#endif\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\nvarying vec3 v_PositionWorld;\n#endif\n#include \"GlobalIllumination.glsl\";\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nvarying vec4 v_ShadowCoord;\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nvarying vec4 v_SpotShadowCoord;\n#endif\n#ifdef MASKTEXTURE\nuniform sampler2D u_MaskTexture;\n#endif\nuniform float u_ProgressValue;void main(){vec4 mainColor=u_DiffuseColor;\n#ifdef DIFFUSEMAP\nvec4 difTexColor=texture2D(u_DiffuseTexture,v_Texcoord0);mainColor=mainColor*difTexColor;\n#endif\n#ifdef MASKTEXTURE\nvec4 maskColor=texture2D(u_MaskTexture,v_Texcoord0);if(1.0-maskColor.a>u_ProgressValue){discard;}\n#endif\ngl_FragColor=mainColor;\n#ifdef FOG\nfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n}";

    class DownTimeMaterial extends Laya.BlinnPhongMaterial {
        constructor() {
            super();
            this.setShaderName("DwonTime");
            this.progressValue = 0.0;
        }
        set progressValue(value) {
            this._shaderValues.setNumber(DownTimeMaterial.u_ProgressValue, value);
        }
        get progressValue() {
            return this._shaderValues.getNumber(DownTimeMaterial.u_ProgressValue);
        }
        set maskTexture(value) {
            if (value) {
                this._shaderValues.addDefine(DownTimeMaterial.MASKTEXTURE);
            }
            else {
                this._shaderValues.removeDefine(DownTimeMaterial.MASKTEXTURE);
            }
            this._shaderValues.setTexture(DownTimeMaterial.u_MaskTexture, value);
        }
        get maskTexture() {
            return this._shaderValues.getTexture(DownTimeMaterial.u_MaskTexture);
        }
        static init() {
            var attributeMap = {
                'a_Position': Laya.VertexMesh.MESH_POSITION0,
                'a_Color': Laya.VertexMesh.MESH_COLOR0,
                'a_Normal': Laya.VertexMesh.MESH_NORMAL0,
                'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
                'a_Texcoord1': Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
                'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
                'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0,
                'a_Tangent0': Laya.VertexMesh.MESH_TANGENT0,
                'a_WorldMat': Laya.VertexMesh.MESH_WORLDMATRIX_ROW0,
                'a_SimpleTextureParams': Laya.VertexMesh.MESH_SIMPLEANIMATOR
            };
            var uniformMap = {
                'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
                'u_DiffuseTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_SpecularTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_NormalTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlphaTestValue': Laya.Shader3D.PERIOD_MATERIAL,
                'u_DiffuseColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlbedoIntensity': Laya.Shader3D.PERIOD_MATERIAL,
                'u_MaterialSpecular': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shininess': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TilingOffset': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionRate': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackDiffuse': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackScale': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThinknessTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE,
                'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightmapScaleOffset': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMap': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMapDirection': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTexture': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorParams': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTextureSize': Laya.Shader3D.PERIOD_SPRITE,
                'u_CameraPos': Laya.Shader3D.PERIOD_CAMERA,
                'u_Viewport': Laya.Shader3D.PERIOD_CAMERA,
                'u_ProjectionParams': Laya.Shader3D.PERIOD_CAMERA,
                'u_View': Laya.Shader3D.PERIOD_CAMERA,
                'u_ViewProjection': Laya.Shader3D.PERIOD_CAMERA,
                'u_ReflectTexture': Laya.Shader3D.PERIOD_SCENE,
                'u_FogStart': Laya.Shader3D.PERIOD_SCENE,
                'u_FogRange': Laya.Shader3D.PERIOD_SCENE,
                'u_FogColor': Laya.Shader3D.PERIOD_SCENE,
                'u_DirationLightCount': Laya.Shader3D.PERIOD_SCENE,
                'u_LightBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_LightClusterBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientColor': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowBias': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightDirection': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowParams': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowSplitSpheres': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMatrices': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMapSize': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotViewProjectMatrix': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightPosition': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHC': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.spot': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_MaskTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ProgressValue': Laya.Shader3D.PERIOD_MATERIAL
            };
            var stateMap = {
                's_Cull': Laya.Shader3D.RENDER_STATE_CULL,
                's_Blend': Laya.Shader3D.RENDER_STATE_BLEND,
                's_BlendSrc': Laya.Shader3D.RENDER_STATE_BLEND_SRC,
                's_BlendDst': Laya.Shader3D.RENDER_STATE_BLEND_DST,
                's_DepthTest': Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
                's_DepthWrite': Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
            };
            var shader = Laya.Shader3D.add("DwonTime", null, null, true);
            var subShader = new Laya.SubShader(attributeMap, uniformMap);
            shader.addSubShader(subShader);
            subShader.addShaderPass(DownTimeVS$1, DownTimeFS$1, stateMap, "Forward");
        }
    }
    DownTimeMaterial.u_MaskTexture = Laya.Shader3D.propertyNameToID("u_MaskTexture");
    DownTimeMaterial.u_ProgressValue = Laya.Shader3D.propertyNameToID("u_ProgressValue");
    DownTimeMaterial.MASKTEXTURE = Laya.Shader3D.getDefineByName("MASKTEXTURE");

    var DownTimeVS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\n#include \"Lighting.glsl\";\n#include \"LayaUtile.glsl\"\n#include \"Shadow.glsl\";\nattribute vec4 a_Position;\n#ifdef GPU_INSTANCE\nuniform mat4 u_ViewProjection;\n#else\nuniform mat4 u_MvpMatrix;\n#endif\nattribute vec2 a_Texcoord0;varying vec2 v_Texcoord0;varying vec2 v_ThresholdUV;attribute vec2 a_Texcoord1;varying vec2 v_Texcoord1;\n#ifdef LIGHTMAP\nuniform vec4 u_LightmapScaleOffset;varying vec2 v_LightMapUV;\n#endif\n#ifdef COLOR\nattribute vec4 a_Color;varying vec4 v_Color;\n#endif\n#ifdef BONE\nconst int c_MaxBoneCount=24;attribute vec4 a_BoneIndices;attribute vec4 a_BoneWeights;uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\nattribute vec3 a_Normal;varying vec3 v_Normal;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nuniform vec3 u_CameraPos;varying vec3 v_ViewDir;\n#endif\n#if defined(NORMALMAP)\nattribute vec4 a_Tangent0;varying vec3 v_Tangent;varying vec3 v_Binormal;\n#endif\n#ifdef GPU_INSTANCE\nattribute mat4 a_WorldMat;\n#else\nuniform mat4 u_WorldMat;\n#endif\nvarying vec3 v_PositionWorld;\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nvarying vec4 v_ShadowCoord;\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nvarying vec4 v_SpotShadowCoord;\n#endif\nuniform vec4 u_TilingOffset;uniform vec4 u_ThresholdTilingOffset;void main(){vec4 position;\n#ifdef BONE\nmat4 skinTransform;\n#ifdef SIMPLEBONE\nfloat currentPixelPos;\n#ifdef GPU_INSTANCE\ncurrentPixelPos=a_SimpleTextureParams.x+a_SimpleTextureParams.y;\n#else\ncurrentPixelPos=u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\n#endif\nfloat offset=1.0/u_SimpleAnimatorTextureSize;skinTransform=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset)*a_BoneWeights.x;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset)*a_BoneWeights.y;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset)*a_BoneWeights.z;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset)*a_BoneWeights.w;\n#else\nskinTransform=u_Bones[int(a_BoneIndices.x)]*a_BoneWeights.x;skinTransform+=u_Bones[int(a_BoneIndices.y)]*a_BoneWeights.y;skinTransform+=u_Bones[int(a_BoneIndices.z)]*a_BoneWeights.z;skinTransform+=u_Bones[int(a_BoneIndices.w)]*a_BoneWeights.w;\n#endif\nposition=skinTransform*a_Position;\n#else\nposition=a_Position;\n#endif\nmat4 worldMat;\n#ifdef GPU_INSTANCE\nworldMat=a_WorldMat;\n#else\nworldMat=u_WorldMat;\n#endif\n#ifdef GPU_INSTANCE\ngl_Position=u_ViewProjection*worldMat*position;\n#else\ngl_Position=u_MvpMatrix*position;\n#endif\nmat3 worldInvMat;\n#ifdef BONE\nworldInvMat=INVERSE_MAT(mat3(worldMat*skinTransform));\n#else\nworldInvMat=INVERSE_MAT(mat3(worldMat));\n#endif\nv_Normal=normalize(a_Normal*worldInvMat);\n#if defined(NORMALMAP)\nv_Tangent=normalize(a_Tangent0.xyz*worldInvMat);v_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n#endif\nvec3 positionWS=(worldMat*position).xyz;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||(defined(CALCULATE_SHADOWS)&&defined(SHADOW_CASCADE))||defined(CALCULATE_SPOTSHADOWS)\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nv_ViewDir=u_CameraPos-positionWS;\n#endif\n#endif\nv_PositionWorld=positionWS;v_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);v_ThresholdUV=TransformUV(a_Texcoord0,u_ThresholdTilingOffset);\n#ifdef LIGHTMAP\n#ifdef UV1\nv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n#else\nv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n#endif\nv_LightMapUV.y=1.0-v_LightMapUV.y;\n#endif\nv_Texcoord1=a_Texcoord1;\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nv_Color=a_Color;\n#endif\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nv_ShadowCoord=getShadowCoord(vec4(positionWS,1.0));\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nv_SpotShadowCoord=u_SpotViewProjectMatrix*vec4(positionWS,1.0);\n#endif\ngl_Position=remapGLPositionZ(gl_Position);}";

    var DownTimeFS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\n#include \"Lighting.glsl\";\n#include \"Shadow.glsl\"\nuniform vec4 u_DiffuseColor;uniform float u_AlbedoIntensity;\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nvarying vec4 v_Color;\n#endif\n#ifdef ALPHATEST\nuniform float u_AlphaTestValue;\n#endif\n#ifdef DIFFUSEMAP\nuniform sampler2D u_DiffuseTexture;\n#endif\nvarying vec2 v_Texcoord0;varying vec2 v_Texcoord1;\n#ifdef LIGHTMAP\nvarying vec2 v_LightMapUV;uniform sampler2D u_LightMap;\n#ifdef LIGHTMAP_DIRECTIONAL\nuniform sampler2D u_LightMapDirection;\n#endif\n#endif\nvarying vec3 v_Normal;\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nvarying vec3 v_ViewDir;uniform vec3 u_MaterialSpecular;uniform float u_Shininess;\n#ifdef LEGACYSINGLELIGHTING\n#ifdef DIRECTIONLIGHT\nuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\nuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\nuniform SpotLight u_SpotLight;\n#endif\n#else\nuniform mat4 u_View;uniform vec4 u_ProjectionParams;uniform vec4 u_Viewport;uniform int u_DirationLightCount;uniform sampler2D u_LightBuffer;uniform sampler2D u_LightClusterBuffer;\n#endif\n#ifdef SPECULARMAP\nuniform sampler2D u_SpecularTexture;\n#endif\n#endif\n#ifdef NORMALMAP\nuniform sampler2D u_NormalTexture;varying vec3 v_Tangent;varying vec3 v_Binormal;\n#endif\n#ifdef FOG\nuniform float u_FogStart;uniform float u_FogRange;uniform vec3 u_FogColor;\n#endif\nvarying vec3 v_PositionWorld;\n#include \"GlobalIllumination.glsl\";\n#if defined(CALCULATE_SHADOWS)&&!defined(SHADOW_CASCADE)\nvarying vec4 v_ShadowCoord;\n#endif\n#if defined(CALCULATE_SPOTSHADOWS)\nvarying vec4 v_SpotShadowCoord;\n#endif\n#ifdef RAMPTEXTURE\nuniform sampler2D u_RampTexture;\n#endif\nuniform float u_RampThreshold;uniform float u_RampSmooth;uniform vec4 u_HColor;uniform vec4 u_SColor;\n#ifdef THRESHOLDTEXTURE\nuniform sampler2D u_ThresholdTex;\n#endif\nvarying vec2 v_ThresholdUV;\n#ifdef ENABLEHSV\nuniform float u_Shadow_HSV_H;uniform float u_Shadow_HSV_S;uniform float u_Shadow_HSV_V;vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=0.0000000001;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}vec3 hsv2rgb(vec3 c){c.g=max(c.g,0.0);vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(c.xxx+K.xyz)*6.0-K.www);return c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);}\n#endif\n#ifdef ENABLERIMLIGHT\nuniform vec4 u_RimColor;uniform float u_RimMin;uniform float u_RimMax;\n#endif\nvoid main(){vec3 normal;\n#if defined(NORMALMAP)\nvec3 normalMapSample=texture2D(u_NormalTexture,v_Texcoord0).rgb;normal=normalize(NormalSampleToWorldSpace(normalMapSample,v_Normal,v_Tangent,v_Binormal));\n#else\nnormal=normalize(v_Normal);\n#endif\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nvec3 viewDir=normalize(v_ViewDir);\n#endif\nLayaGIInput giInput;\n#ifdef LIGHTMAP\ngiInput.lightmapUV=v_LightMapUV;\n#endif\nvec3 globalDiffuse=layaGIBase(giInput,1.0,normal);vec4 mainColor=u_DiffuseColor*u_AlbedoIntensity;\n#ifdef DIFFUSEMAP\nvec4 difTexColor=texture2D(u_DiffuseTexture,v_Texcoord0);mainColor=mainColor*difTexColor;\n#endif\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nmainColor=mainColor*v_Color;\n#endif\nvec3 diffuse=vec3(0.0);vec3 specular=vec3(0.0);vec3 transmissionDiffuse=vec3(0.0);\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\nvec3 dif,spe,transmis;float transmissionFactor;\n#ifdef SPECULARMAP\nvec3 gloss=texture2D(u_SpecularTexture,v_Texcoord0).rgb;\n#else\n#ifdef DIFFUSEMAP\nvec3 gloss=vec3(difTexColor.a);\n#else\nvec3 gloss=vec3(1.0);\n#endif\n#endif\n#ifdef THICKNESSMAP\ntransmissionFactor=texture2D(u_ThinknessTexture,v_Texcoord0).r;\n#endif\n#endif\nDirectionLight directionLight;\n#ifdef LEGACYSINGLELIGHTING\n#ifdef DIRECTIONLIGHT\ndirectionLight=u_DirectionLight;\n#endif\n#else\n#ifdef DIRECTIONLIGHT\ndirectionLight=getDirectionLight(u_LightBuffer,0);\n#endif\n#endif\n#ifdef HALFLAMERT\nfloat NdotL=max(0.0,dot(normal,directionLight.direction*-1.0)*0.5+0.5);\n#else\nfloat NdotL=max(0.0,dot(normal,directionLight.direction*-1.0));\n#endif\nvec3 ramp=vec3(0.0);\n#ifdef RAMPTEXTURE\nNdotL=max(0.01,NdotL);ramp=texture2D(u_RampTexture,vec2(NdotL,NdotL)).rgb;\n#else\n#ifdef THRESHOLDTEXTURE\nvec4 TexThresholdColor=texture2D(u_ThresholdTex,v_ThresholdUV);NdotL+=TexThresholdColor.r-0.5;\n#endif\nramp=smoothstep(vec3(u_RampThreshold-u_RampSmooth*0.5),vec3(u_RampThreshold+u_RampSmooth*0.5),vec3(NdotL));\n#endif\n#ifdef ENABLEHSV\nvec3 albedoHsv=rgb2hsv(mainColor.rgb);albedoHsv+=vec3(u_Shadow_HSV_H/360.0,u_Shadow_HSV_S,u_Shadow_HSV_V);mainColor.rgb=mix(hsv2rgb(albedoHsv),mainColor.rgb,ramp);\n#endif\nvec4 sColor=mix(u_HColor,u_SColor,u_SColor.a);ramp=mix(sColor.rgb,u_HColor.rgb,ramp);ramp+=(globalDiffuse*directionLight.color*gloss);mainColor.rgb=mainColor.rgb*ramp;vec3 h=normalize(viewDir-directionLight.direction);float nh=max(0.0,dot(h,normal));vec3 specularColor=directionLight.color*u_MaterialSpecular*pow(nh,u_Shininess*128.0)*gloss*2.0;mainColor.rgb+=specularColor;\n#ifdef ENABLERIMLIGHT\nfloat NdotV=clamp(dot(normal,viewDir),0.0,1.0);float rim=1.0-NdotV;rim=smoothstep(u_RimMin,u_RimMax,rim);NdotL=max(0.0,dot(normal,directionLight.direction*-1.0));vec3 rimColor=NdotL*directionLight.color*rim*u_RimColor.rgb*u_RimColor.a;mainColor.rgb+=rimColor;\n#endif\ngl_FragColor=mainColor;/*\n#ifdef LEGACYSINGLELIGHTING\n#ifdef DIRECTIONLIGHT\nLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,transmissionFactor,dif,spe,transmis);\n#if defined(CALCULATE_SHADOWS)\n#ifdef SHADOW_CASCADE\nvec4 shadowCoord=getShadowCoord(vec4(v_PositionWorld,1.0));\n#else\nvec4 shadowCoord=v_ShadowCoord;\n#endif\nfloat shadowAttenuation=sampleShadowmap(shadowCoord);dif*=shadowAttenuation;spe*=shadowAttenuation;transmis*=shadowAttenuation;\n#endif\ndiffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;\n#endif\n#ifdef POINTLIGHT\nLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,transmissionFactor,dif,spe,transmis);diffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;\n#endif\n#ifdef SPOTLIGHT\nLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,transmissionFactor,dif,spe,transmis);\n#if defined(CALCULATE_SPOTSHADOWS)\nvec4 spotShadowcoord=v_SpotShadowCoord;float spotShadowAttenuation=sampleSpotShadowmap(spotShadowcoord);dif*=spotShadowAttenuation;spe*=spotShadowAttenuation;transmis*=spotShadowAttenuation;\n#endif\ndiffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;\n#endif\n#else\n#ifdef DIRECTIONLIGHT\nfor(int i=0;i<MAX_LIGHT_COUNT;i++){if(i>=u_DirationLightCount)break;DirectionLight directionLight=getDirectionLight(u_LightBuffer,i);\n#if defined(CALCULATE_SHADOWS)\nif(i==0){\n#ifdef SHADOW_CASCADE\nvec4 shadowCoord=getShadowCoord(vec4(v_PositionWorld,1.0));\n#else\nvec4 shadowCoord=v_ShadowCoord;\n#endif\ndirectionLight.color*=sampleShadowmap(shadowCoord);}\n#endif\nLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,directionLight,transmissionFactor,dif,spe,transmis);diffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;}\n#endif\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)\nivec4 clusterInfo=getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport,v_PositionWorld,gl_FragCoord,u_ProjectionParams);\n#ifdef POINTLIGHT\nfor(int i=0;i<MAX_LIGHT_COUNT;i++){if(i>=clusterInfo.x)break;PointLight pointLight=getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);LayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,pointLight,transmissionFactor,dif,spe,transmis);diffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;}\n#endif\n#ifdef SPOTLIGHT\nfor(int i=0;i<MAX_LIGHT_COUNT;i++){if(i>=clusterInfo.y)break;SpotLight spotLight=getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\n#if defined(CALCULATE_SPOTSHADOWS)\nif(i==0){vec4 spotShadowcoord=v_SpotShadowCoord;spotLight.color*=sampleSpotShadowmap(spotShadowcoord);}\n#endif\nLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,spotLight,transmissionFactor,dif,spe,transmis);diffuse+=dif;specular+=spe;transmissionDiffuse+=transmis;}\n#endif\n#endif\n#endif\n*/\n#ifdef FOG\nfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n}";

    class ToonyColorMaterial extends Laya.BlinnPhongMaterial {
        constructor() {
            super();
            this.IsHalfLambert = 0;
            this.IsHSV = 0;
            this.IsRimLight = 0;
            this.setShaderName("ToonyColor");
            this._RampThreshold = 0.5;
            this._RampSmooth = 0.1;
            this._HColor = new Laya.Vector4(222 / 255, 222 / 255, 222 / 255, 1.0);
            this._SColor = new Laya.Vector4(130 / 255, 130 / 255, 130 / 255, 1.0);
        }
        set _Color(value) {
            this._shaderValues.setVector(ToonyColorMaterial.u_DiffuseColor, value);
        }
        get _Color() {
            return this._shaderValues.getVector(ToonyColorMaterial.u_DiffuseColor);
        }
        get _AlbedoIntensity() {
            return this._shaderValues.getNumber(ToonyColorMaterial.AlbedoIntensity);
        }
        set _AlbedoIntensity(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.AlbedoIntensity, value);
        }
        get _MainTex() {
            return this._shaderValues.getTexture(ToonyColorMaterial.ALBEDOTEXTURE);
        }
        set _MainTex(value) {
            if (value)
                this._shaderValues.addDefine(ToonyColorMaterial.SHADERDEFINE_DIFFUSEMAP);
            else
                this._shaderValues.removeDefine(ToonyColorMaterial.SHADERDEFINE_DIFFUSEMAP);
            this._shaderValues.setTexture(ToonyColorMaterial.ALBEDOTEXTURE, value);
        }
        get _TilingOffset() {
            return this._shaderValues.getVector(ToonyColorMaterial.TILINGOFFSET);
        }
        set _TilingOffset(value) {
            if (value) {
                this._shaderValues.setVector(ToonyColorMaterial.TILINGOFFSET, value);
            }
            else {
                this._shaderValues.getVector(ToonyColorMaterial.TILINGOFFSET).setValue(1.0, 1.0, 0.0, 0.0);
            }
        }
        set _RampTex(value) {
            if (value) {
                this._shaderValues.addDefine(ToonyColorMaterial.RAMPTEXTURE);
            }
            else {
                this._shaderValues.removeDefine(ToonyColorMaterial.RAMPTEXTURE);
            }
            this._shaderValues.setTexture(ToonyColorMaterial.u_RampTexture, value);
        }
        get _RampTex() {
            return this._shaderValues.getTexture(ToonyColorMaterial.u_RampTexture);
        }
        set _SColor(value) {
            this._shaderValues.setVector(ToonyColorMaterial.u_SColor, value);
        }
        get _SColor() {
            return this._shaderValues.getVector(ToonyColorMaterial.u_SColor);
        }
        set _HColor(value) {
            this._shaderValues.setVector(ToonyColorMaterial.u_HColor, value);
        }
        get _HColor() {
            return this._shaderValues.getVector(ToonyColorMaterial.u_HColor);
        }
        set _IsHalfLambert(value) {
            this.IsHalfLambert = value;
            if (this.IsHalfLambert == 1) {
                this._shaderValues.addDefine(ToonyColorMaterial.HALFLAMERT);
            }
            else {
                this._shaderValues.removeDefine(ToonyColorMaterial.HALFLAMERT);
            }
        }
        get _IsHalfLambert() {
            return this.IsHalfLambert;
        }
        set _RampSmooth(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_RampSmooth, value);
        }
        get _RampSmooth() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_RampSmooth);
        }
        set _RampThreshold(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_RampThreshold, value);
        }
        get _RampThreshold() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_RampThreshold);
        }
        set _IsHSV(value) {
            this.IsHSV = value;
            if (this.IsHSV == 1) {
                this._shaderValues.addDefine(ToonyColorMaterial.ENABLEHSV);
            }
            else {
                this._shaderValues.removeDefine(ToonyColorMaterial.ENABLEHSV);
            }
        }
        get _IsHSV() {
            return this.IsHSV;
        }
        set _Shadow_HSV_H(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_Shadow_HSV_H, value);
        }
        get _Shadow_HSV_H() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_Shadow_HSV_H);
        }
        set _Shadow_HSV_S(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_Shadow_HSV_S, value);
        }
        get _Shadow_HSV_S() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_Shadow_HSV_S);
        }
        set _Shadow_HSV_V(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_Shadow_HSV_V, value);
        }
        get _Shadow_HSV_V() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_Shadow_HSV_V);
        }
        get _SpecGlossMap() {
            return this._shaderValues.getTexture(ToonyColorMaterial.SPECULARTEXTURE);
        }
        set _SpecGlossMap(value) {
            if (value)
                this._shaderValues.addDefine(ToonyColorMaterial.SHADERDEFINE_SPECULARMAP);
            else
                this._shaderValues.removeDefine(ToonyColorMaterial.SHADERDEFINE_SPECULARMAP);
            this._shaderValues.setTexture(ToonyColorMaterial.SPECULARTEXTURE, value);
        }
        get _Shininess() {
            return this._shaderValues.getNumber(ToonyColorMaterial.SHININESS);
        }
        set _Shininess(value) {
            value = Math.max(0.0, Math.min(1.0, value));
            this._shaderValues.setNumber(ToonyColorMaterial.SHININESS, value);
        }
        get _SpecColor() {
            return this._shaderValues.getVector(ToonyColorMaterial.MATERIALSPECULAR);
        }
        set _SpecColor(value) {
            this._shaderValues.setVector(ToonyColorMaterial.MATERIALSPECULAR, value);
        }
        set _IsRimLight(value) {
            this.IsRimLight = value;
            if (this.IsRimLight == 1) {
                this._shaderValues.addDefine(ToonyColorMaterial.ENABLERIMLIGHT);
            }
            else {
                this._shaderValues.removeDefine(ToonyColorMaterial.ENABLERIMLIGHT);
            }
        }
        get _IsRimLight() {
            return this.IsRimLight;
        }
        set _RimColor(value) {
            this._shaderValues.setVector(ToonyColorMaterial.u_RimColor, value);
        }
        get _RimColor() {
            return this._shaderValues.getVector(ToonyColorMaterial.u_RimColor);
        }
        set _RimMin(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_RimMin, value);
        }
        get _RimMin() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_RimMin);
        }
        set _RimMax(value) {
            this._shaderValues.setNumber(ToonyColorMaterial.u_RimMax, value);
        }
        get _RimMax() {
            return this._shaderValues.getNumber(ToonyColorMaterial.u_RimMax);
        }
        set _ThresholdTex(value) {
            if (value)
                this._shaderValues.addDefine(ToonyColorMaterial.THRESHOLDTEXTURE);
            else
                this._shaderValues.removeDefine(ToonyColorMaterial.THRESHOLDTEXTURE);
            this._shaderValues.setTexture(ToonyColorMaterial.u_ThresholdTex, value);
        }
        get _ThresholdTex() {
            return this._shaderValues.getTexture(ToonyColorMaterial.u_ThresholdTex);
        }
        get _ThresholdTilingOffset() {
            return this._shaderValues.getVector(ToonyColorMaterial.u_ThresholdTilingOffset);
        }
        set _ThresholdTilingOffset(value) {
            if (value) {
                this._shaderValues.setVector(ToonyColorMaterial.u_ThresholdTilingOffset, value);
            }
            else {
                this._shaderValues.getVector(ToonyColorMaterial.u_ThresholdTilingOffset).setValue(1.0, 1.0, 0.0, 0.0);
            }
        }
        get _BumpMap() {
            return this._shaderValues.getTexture(ToonyColorMaterial.NORMALTEXTURE);
        }
        set _BumpMap(value) {
            if (value)
                this._shaderValues.addDefine(ToonyColorMaterial.SHADERDEFINE_NORMALMAP);
            else
                this._shaderValues.removeDefine(ToonyColorMaterial.SHADERDEFINE_NORMALMAP);
            this._shaderValues.setTexture(ToonyColorMaterial.NORMALTEXTURE, value);
        }
        clone() {
            let t = new ToonyColorMaterial();
            t._Color = this._Color;
            t._MainTex = this._MainTex;
            t._SColor = this._SColor;
            t._HColor = this._HColor;
            t._RampSmooth = this._RampSmooth;
            t._RampThreshold = this._RampThreshold;
            t._IsHalfLambert = this._IsHalfLambert;
            t._RampTex = this._RampTex;
            t._IsHSV = this._IsHSV;
            t._Shadow_HSV_H = this._Shadow_HSV_H;
            t._Shadow_HSV_S = this._Shadow_HSV_S;
            t._Shadow_HSV_V = this._Shadow_HSV_V;
            t._SpecGlossMap = this._SpecGlossMap;
            t._Shininess = this._Shininess;
            t._SpecColor = this._SpecColor;
            t._IsRimLight = this._IsRimLight;
            t._RimColor = this._RimColor;
            t._RimMin = this._RimMin;
            t._RimMax = this._RimMax;
            t._TilingOffset = this._TilingOffset;
            t._ThresholdTex = this._ThresholdTex;
            t._ThresholdTilingOffset = this._ThresholdTilingOffset;
            t._AlbedoIntensity = this._AlbedoIntensity;
            t._BumpMap = this._BumpMap;
            return t;
        }
        static init() {
            Laya.ClassUtils.regClass("Laya.ToonyMobile", ToonyColorMaterial);
            var attributeMap = {
                'a_Position': Laya.VertexMesh.MESH_POSITION0,
                'a_Color': Laya.VertexMesh.MESH_COLOR0,
                'a_Normal': Laya.VertexMesh.MESH_NORMAL0,
                'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
                'a_Texcoord1': Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
                'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
                'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0,
                'a_Tangent0': Laya.VertexMesh.MESH_TANGENT0,
                'a_WorldMat': Laya.VertexMesh.MESH_WORLDMATRIX_ROW0,
                'a_SimpleTextureParams': Laya.VertexMesh.MESH_SIMPLEANIMATOR
            };
            var uniformMap = {
                'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
                'u_DiffuseTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_SpecularTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_NormalTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlphaTestValue': Laya.Shader3D.PERIOD_MATERIAL,
                'u_DiffuseColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlbedoIntensity': Laya.Shader3D.PERIOD_MATERIAL,
                'u_MaterialSpecular': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shininess': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TilingOffset': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionRate': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackDiffuse': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackScale': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThinknessTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE,
                'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightmapScaleOffset': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMap': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMapDirection': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTexture': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorParams': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTextureSize': Laya.Shader3D.PERIOD_SPRITE,
                'u_CameraPos': Laya.Shader3D.PERIOD_CAMERA,
                'u_Viewport': Laya.Shader3D.PERIOD_CAMERA,
                'u_ProjectionParams': Laya.Shader3D.PERIOD_CAMERA,
                'u_View': Laya.Shader3D.PERIOD_CAMERA,
                'u_ViewProjection': Laya.Shader3D.PERIOD_CAMERA,
                'u_ReflectTexture': Laya.Shader3D.PERIOD_SCENE,
                'u_FogStart': Laya.Shader3D.PERIOD_SCENE,
                'u_FogRange': Laya.Shader3D.PERIOD_SCENE,
                'u_FogColor': Laya.Shader3D.PERIOD_SCENE,
                'u_DirationLightCount': Laya.Shader3D.PERIOD_SCENE,
                'u_LightBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_LightClusterBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientColor': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowBias': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightDirection': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowParams': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowSplitSpheres': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMatrices': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMapSize': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotViewProjectMatrix': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightPosition': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHC': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.spot': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_RampTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RampThreshold': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RampSmooth': Laya.Shader3D.PERIOD_MATERIAL,
                'u_HColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_SColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_H': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_S': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_V': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimMin': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimMax': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThresholdTex': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThresholdTilingOffset': Laya.Shader3D.PERIOD_MATERIAL
            };
            var stateMap = {
                's_Cull': Laya.Shader3D.RENDER_STATE_CULL,
                's_Blend': Laya.Shader3D.RENDER_STATE_BLEND,
                's_BlendSrc': Laya.Shader3D.RENDER_STATE_BLEND_SRC,
                's_BlendDst': Laya.Shader3D.RENDER_STATE_BLEND_DST,
                's_DepthTest': Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
                's_DepthWrite': Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
            };
            var shader = Laya.Shader3D.add("ToonyColor", null, null, true);
            var subShader = new Laya.SubShader(attributeMap, uniformMap);
            shader.addSubShader(subShader);
            subShader.addShaderPass(DownTimeVS, DownTimeFS, stateMap, "Forward");
        }
    }
    ToonyColorMaterial.u_RampTexture = Laya.Shader3D.propertyNameToID("u_RampTexture");
    ToonyColorMaterial.u_RampThreshold = Laya.Shader3D.propertyNameToID("u_RampThreshold");
    ToonyColorMaterial.u_RampSmooth = Laya.Shader3D.propertyNameToID("u_RampSmooth");
    ToonyColorMaterial.u_HColor = Laya.Shader3D.propertyNameToID("u_HColor");
    ToonyColorMaterial.u_SColor = Laya.Shader3D.propertyNameToID("u_SColor");
    ToonyColorMaterial.u_Shadow_HSV_H = Laya.Shader3D.propertyNameToID("u_Shadow_HSV_H");
    ToonyColorMaterial.u_Shadow_HSV_S = Laya.Shader3D.propertyNameToID("u_Shadow_HSV_S");
    ToonyColorMaterial.u_Shadow_HSV_V = Laya.Shader3D.propertyNameToID("u_Shadow_HSV_V");
    ToonyColorMaterial.u_RimColor = Laya.Shader3D.propertyNameToID("u_RimColor");
    ToonyColorMaterial.u_RimMin = Laya.Shader3D.propertyNameToID("u_RimMin");
    ToonyColorMaterial.u_RimMax = Laya.Shader3D.propertyNameToID("u_RimMax");
    ToonyColorMaterial.u_ThresholdTex = Laya.Shader3D.propertyNameToID("u_ThresholdTex");
    ToonyColorMaterial.u_ThresholdTilingOffset = Laya.Shader3D.propertyNameToID("u_ThresholdTilingOffset");
    ToonyColorMaterial.u_DiffuseColor = Laya.Shader3D.propertyNameToID("u_DiffuseColor");
    ToonyColorMaterial.ALBEDOTEXTURE = Laya.Shader3D.propertyNameToID("u_DiffuseTexture");
    ToonyColorMaterial.SPECULARTEXTURE = Laya.Shader3D.propertyNameToID("u_SpecularTexture");
    ToonyColorMaterial.SHININESS = Laya.Shader3D.propertyNameToID("u_Shininess");
    ToonyColorMaterial.MATERIALSPECULAR = Laya.Shader3D.propertyNameToID("u_MaterialSpecular");
    ToonyColorMaterial.TILINGOFFSET = Laya.Shader3D.propertyNameToID("u_TilingOffset");
    ToonyColorMaterial.AlbedoIntensity = Laya.Shader3D.propertyNameToID("u_AlbedoIntensity");
    ToonyColorMaterial.NORMALTEXTURE = Laya.Shader3D.propertyNameToID("u_NormalTexture");
    ToonyColorMaterial.RAMPTEXTURE = Laya.Shader3D.getDefineByName("RAMPTEXTURE");
    ToonyColorMaterial.SHADERDEFINE_DIFFUSEMAP = Laya.Shader3D.getDefineByName("DIFFUSEMAP");
    ToonyColorMaterial.HALFLAMERT = Laya.Shader3D.getDefineByName("HALFLAMERT");
    ToonyColorMaterial.ENABLEHSV = Laya.Shader3D.getDefineByName("ENABLEHSV");
    ToonyColorMaterial.SHADERDEFINE_NORMALMAP = Laya.Shader3D.getDefineByName("NORMALMAP");
    ToonyColorMaterial.SHADERDEFINE_SPECULARMAP = Laya.Shader3D.getDefineByName("SPECULARMAP");
    ToonyColorMaterial.ENABLERIMLIGHT = Laya.Shader3D.getDefineByName("ENABLERIMLIGHT");
    ToonyColorMaterial.THRESHOLDTEXTURE = Laya.Shader3D.getDefineByName("THRESHOLDTEXTURE");

    var OutlineVS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\n#include \"Lighting.glsl\";\n#include \"LayaUtile.glsl\"\n#include \"Shadow.glsl\";\nattribute vec4 a_Position;attribute vec3 a_Normal;\n#ifdef GPU_INSTANCE\nattribute mat4 a_WorldMat;\n#else\nuniform mat4 u_MvpMatrix;uniform mat4 u_WorldMat;\n#endif\nuniform mat4 u_ViewProjection;\n#ifdef BONE\nconst int c_MaxBoneCount=24;attribute vec4 a_BoneIndices;attribute vec4 a_BoneWeights;uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\nuniform float u_OutlineWidth;void main(){mat4 worldMat;mat3 worldInvMat;\n#ifdef GPU_INSTANCE\nworldMat=a_WorldMat;\n#else\nworldMat=u_WorldMat;\n#endif\n#ifdef BONE\nmat4 skinTransform;\n#ifdef SIMPLEBONE\nfloat currentPixelPos;\n#ifdef GPU_INSTANCE\ncurrentPixelPos=a_SimpleTextureParams.x+a_SimpleTextureParams.y;\n#else\ncurrentPixelPos=u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\n#endif\nfloat offset=1.0/u_SimpleAnimatorTextureSize;skinTransform=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset)*a_BoneWeights.x;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset)*a_BoneWeights.y;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset)*a_BoneWeights.z;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset)*a_BoneWeights.w;\n#else\nskinTransform=u_Bones[int(a_BoneIndices.x)]*a_BoneWeights.x;skinTransform+=u_Bones[int(a_BoneIndices.y)]*a_BoneWeights.y;skinTransform+=u_Bones[int(a_BoneIndices.z)]*a_BoneWeights.z;skinTransform+=u_Bones[int(a_BoneIndices.w)]*a_BoneWeights.w;\n#endif\nworldMat=worldMat*skinTransform;worldInvMat=INVERSE_MAT(mat3(worldMat));\n#else\nworldInvMat=INVERSE_MAT(mat3(worldMat));\n#endif\nvec4 positionWS=worldMat*a_Position;vec3 normalWS=normalize(a_Normal*worldInvMat);positionWS.xyz=positionWS.xyz+normalWS*u_OutlineWidth*0.01;gl_Position=u_ViewProjection*positionWS;gl_Position=remapGLPositionZ(gl_Position);}";

    var OutlineFS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;precision highp int;\n#else\nprecision mediump float;precision mediump int;\n#endif\nuniform vec4 u_OutlineColor;void main(){gl_FragColor=vec4(u_OutlineColor.rgb,1.0);}";

    class ToonyOutLineMaterial extends ToonyColorMaterial {
        constructor() {
            super();
            this._outLineWidth = 0;
            this.setShaderName("ToonyOutLine");
            this._RampThreshold = 0.5;
            this._RampSmooth = 0.1;
            this._HColor = new Laya.Vector4(222 / 255, 222 / 255, 222 / 255, 1.0);
            this._SColor = new Laya.Vector4(130 / 255, 130 / 255, 130 / 255, 1.0);
            this.outlineWidth = 0.0;
        }
        set _OutlineColor(value) {
            this._shaderValues.setVector(ToonyOutLineMaterial.OUTLINECOLOR, value);
        }
        get _OutlineColor() {
            return this._shaderValues.getVector(ToonyOutLineMaterial.OUTLINECOLOR);
        }
        set _Outline(value) {
            this._outLineWidth = value;
            this.outlineWidth = this._outLineWidth;
        }
        get _Outline() {
            return this._outLineWidth;
        }
        showOutLine() {
            this.outlineWidth = this._outLineWidth;
        }
        hideOutLine() {
            this.outlineWidth = 0.0;
        }
        set outlineWidth(value) {
            this._shaderValues.setNumber(ToonyOutLineMaterial.OUTLINEWIDTH, value);
        }
        get outlineWidth() {
            return this._shaderValues.getNumber(ToonyOutLineMaterial.OUTLINEWIDTH);
        }
        clone() {
            let t = new ToonyOutLineMaterial();
            t._Color = this._Color;
            t._MainTex = this._MainTex;
            t._SColor = this._SColor;
            t._HColor = this._HColor;
            t._RampSmooth = this._RampSmooth;
            t._RampThreshold = this._RampThreshold;
            t._IsHalfLambert = this._IsHalfLambert;
            t._RampTex = this._RampTex;
            t._IsHSV = this._IsHSV;
            t._Shadow_HSV_H = this._Shadow_HSV_H;
            t._Shadow_HSV_S = this._Shadow_HSV_S;
            t._Shadow_HSV_V = this._Shadow_HSV_V;
            t._SpecGlossMap = this._SpecGlossMap;
            t._Shininess = this._Shininess;
            t._SpecColor = this._SpecColor;
            t._IsRimLight = this._IsRimLight;
            t._RimColor = this._RimColor;
            t._RimMin = this._RimMin;
            t._RimMax = this._RimMax;
            t._TilingOffset = this._TilingOffset;
            t._ThresholdTex = this._ThresholdTex;
            t._ThresholdTilingOffset = this._ThresholdTilingOffset;
            t._AlbedoIntensity = this._AlbedoIntensity;
            t._BumpMap = this._BumpMap;
            t._Outline = this._Outline;
            t._OutlineColor = this._OutlineColor;
            return t;
        }
        static init() {
            Laya.ClassUtils.regClass("Laya.ToonyOutline", ToonyOutLineMaterial);
            var attributeMap = {
                'a_Position': Laya.VertexMesh.MESH_POSITION0,
                'a_Color': Laya.VertexMesh.MESH_COLOR0,
                'a_Normal': Laya.VertexMesh.MESH_NORMAL0,
                'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
                'a_Texcoord1': Laya.VertexMesh.MESH_TEXTURECOORDINATE1,
                'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
                'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0,
                'a_Tangent0': Laya.VertexMesh.MESH_TANGENT0,
                'a_WorldMat': Laya.VertexMesh.MESH_WORLDMATRIX_ROW0,
                'a_SimpleTextureParams': Laya.VertexMesh.MESH_SIMPLEANIMATOR
            };
            var uniformMap = {
                'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
                'u_DiffuseTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_SpecularTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_NormalTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlphaTestValue': Laya.Shader3D.PERIOD_MATERIAL,
                'u_DiffuseColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlbedoIntensity': Laya.Shader3D.PERIOD_MATERIAL,
                'u_MaterialSpecular': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shininess': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TilingOffset': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionRate': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackDiffuse': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BackScale': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThinknessTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TransmissionColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE,
                'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightmapScaleOffset': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMap': Laya.Shader3D.PERIOD_SPRITE,
                'u_LightMapDirection': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTexture': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorParams': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTextureSize': Laya.Shader3D.PERIOD_SPRITE,
                'u_CameraPos': Laya.Shader3D.PERIOD_CAMERA,
                'u_Viewport': Laya.Shader3D.PERIOD_CAMERA,
                'u_ProjectionParams': Laya.Shader3D.PERIOD_CAMERA,
                'u_View': Laya.Shader3D.PERIOD_CAMERA,
                'u_ViewProjection': Laya.Shader3D.PERIOD_CAMERA,
                'u_ReflectTexture': Laya.Shader3D.PERIOD_SCENE,
                'u_FogStart': Laya.Shader3D.PERIOD_SCENE,
                'u_FogRange': Laya.Shader3D.PERIOD_SCENE,
                'u_FogColor': Laya.Shader3D.PERIOD_SCENE,
                'u_DirationLightCount': Laya.Shader3D.PERIOD_SCENE,
                'u_LightBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_LightClusterBuffer': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientColor': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowBias': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightDirection': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowParams': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowSplitSpheres': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMatrices': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowMapSize': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotShadowMap': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotViewProjectMatrix': Laya.Shader3D.PERIOD_SCENE,
                'u_ShadowLightPosition': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHAb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBr': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBg': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHBb': Laya.Shader3D.PERIOD_SCENE,
                'u_AmbientSHC': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_DirectionLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_PointLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.position': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.direction': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.range': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.spot': Laya.Shader3D.PERIOD_SCENE,
                'u_SpotLight.color': Laya.Shader3D.PERIOD_SCENE,
                'u_RampTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RampThreshold': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RampSmooth': Laya.Shader3D.PERIOD_MATERIAL,
                'u_HColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_SColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_H': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_S': Laya.Shader3D.PERIOD_MATERIAL,
                'u_Shadow_HSV_V': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimMin': Laya.Shader3D.PERIOD_MATERIAL,
                'u_RimMax': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThresholdTex': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ThresholdTilingOffset': Laya.Shader3D.PERIOD_MATERIAL,
                'u_OutlineWidth': Laya.Shader3D.PERIOD_MATERIAL,
                'u_OutlineColor': Laya.Shader3D.PERIOD_MATERIAL
            };
            var stateMap = {
                's_Cull': Laya.Shader3D.RENDER_STATE_CULL,
                's_Blend': Laya.Shader3D.RENDER_STATE_BLEND,
                's_BlendSrc': Laya.Shader3D.RENDER_STATE_BLEND_SRC,
                's_BlendDst': Laya.Shader3D.RENDER_STATE_BLEND_DST,
                's_DepthTest': Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
                's_DepthWrite': Laya.Shader3D.RENDER_STATE_DEPTH_WRITE
            };
            var shader = Laya.Shader3D.add("ToonyOutLine", null, null, true);
            var subShader = new Laya.SubShader(attributeMap, uniformMap);
            shader.addSubShader(subShader);
            var pass = subShader.addShaderPass(OutlineVS, OutlineFS);
            pass.renderState.cull = Laya.RenderState.CULL_FRONT;
            subShader.addShaderPass(DownTimeVS, DownTimeFS, stateMap, "Forward");
        }
    }
    ToonyOutLineMaterial.OUTLINEWIDTH = Laya.Shader3D.propertyNameToID("u_OutlineWidth");
    ToonyOutLineMaterial.OUTLINECOLOR = Laya.Shader3D.propertyNameToID("u_OutlineColor");

    var MyUnlitVS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#include \"Lighting.glsl\";\n#include \"LayaUtile.glsl\";\nattribute vec4 a_Position;attribute vec2 a_Texcoord0;\n#ifdef GPU_INSTANCE\nuniform mat4 u_ViewProjection;attribute mat4 a_WorldMat;\n#else\nuniform mat4 u_MvpMatrix;\n#endif\nattribute vec4 a_Color;varying vec4 v_Color;varying vec2 v_Texcoord0;uniform vec4 u_TilingOffset;\n#ifdef BONE\nconst int c_MaxBoneCount=24;attribute vec4 a_BoneIndices;attribute vec4 a_BoneWeights;uniform mat4 u_Bones[c_MaxBoneCount];\n#endif\nvoid main(){vec4 position;\n#ifdef BONE\nmat4 skinTransform;\n#ifdef SIMPLEBONE\nfloat currentPixelPos;\n#ifdef GPU_INSTANCE\ncurrentPixelPos=a_SimpleTextureParams.x+a_SimpleTextureParams.y;\n#else\ncurrentPixelPos=u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\n#endif\nfloat offset=1.0/u_SimpleAnimatorTextureSize;skinTransform=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset)*a_BoneWeights.x;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset)*a_BoneWeights.y;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset)*a_BoneWeights.z;skinTransform+=loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset)*a_BoneWeights.w;\n#else\nskinTransform=u_Bones[int(a_BoneIndices.x)]*a_BoneWeights.x;skinTransform+=u_Bones[int(a_BoneIndices.y)]*a_BoneWeights.y;skinTransform+=u_Bones[int(a_BoneIndices.z)]*a_BoneWeights.z;skinTransform+=u_Bones[int(a_BoneIndices.w)]*a_BoneWeights.w;\n#endif\nposition=skinTransform*a_Position;\n#else\nposition=a_Position;\n#endif\n#ifdef GPU_INSTANCE\ngl_Position=u_ViewProjection*a_WorldMat*position;\n#else\ngl_Position=u_MvpMatrix*position;\n#endif\nv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nv_Color=a_Color;\n#endif\ngl_Position=remapGLPositionZ(gl_Position);}";

    var MyUnlitPS = "#if defined(GL_FRAGMENT_PRECISION_HIGH)\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\nvarying vec4 v_Color;\n#endif\n#ifdef ALBEDOTEXTURE\nuniform sampler2D u_AlbedoTexture;varying vec2 v_Texcoord0;\n#endif\nuniform vec4 u_AlbedoColor;\n#ifdef ALPHATEST\nuniform float u_AlphaTestValue;\n#endif\n#ifdef FOG\nuniform float u_FogStart;uniform float u_FogRange;\n#ifdef ADDTIVEFOG\n#else\nuniform vec3 u_FogColor;\n#endif\n#endif\n#ifdef MASKTEXTURE\nuniform sampler2D u_MaskTex;uniform vec4 u_BarColor;\n#endif\nuniform float u_ProgressValue;void main(){vec4 color=u_AlbedoColor;\n#ifdef ALBEDOTEXTURE\ncolor*=texture2D(u_AlbedoTexture,v_Texcoord0);\n#endif\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\ncolor*=v_Color;\n#endif\n#ifdef MASKTEXTURE\nfloat progress=u_ProgressValue/100.0;vec4 maskColor=texture2D(u_MaskTex,v_Texcoord0);if(maskColor.a<progress){color=vec4(u_BarColor.rgb,color.a);}\n#endif\n#ifdef ALPHATEST\nif(color.a<u_AlphaTestValue)discard;\n#endif\ngl_FragColor=color;\n#ifdef FOG\nfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\n#ifdef ADDTIVEFOG\ngl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(0.0),lerpFact);\n#else\ngl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n#endif\n}";

    class ProgressQuadMaterial extends Laya.UnlitMaterial {
        constructor() {
            super();
            this.setShaderName("ProgressQuad");
        }
        get _MainTex() {
            return this.albedoTexture;
        }
        set _MainTex(value) {
            this.albedoTexture = value;
        }
        set _MaskTex(value) {
            if (value) {
                this._shaderValues.addDefine(ProgressQuadMaterial.MASKTEXTURE);
            }
            else {
                this._shaderValues.removeDefine(ProgressQuadMaterial.MASKTEXTURE);
            }
            this._shaderValues.setTexture(ProgressQuadMaterial.u_MaskTex, value);
        }
        get _MaskTex() {
            return this._shaderValues.getTexture(ProgressQuadMaterial.u_MaskTex);
        }
        set _BarColor(value) {
            this._shaderValues.setVector(ProgressQuadMaterial.u_BarColor, value);
        }
        get _BarColor() {
            return this._shaderValues.getVector(ProgressQuadMaterial.u_BarColor);
        }
        set _ProgressValue(value) {
            this._shaderValues.setNumber(ProgressQuadMaterial.u_ProgressValue, value);
        }
        get _ProgressValue() {
            return this._shaderValues.getNumber(ProgressQuadMaterial.u_ProgressValue);
        }
        clone() {
            let t = new ProgressQuadMaterial();
            this.cloneTo(t);
            t._MaskTex = this._MaskTex;
            t._BarColor = this._BarColor;
            t._ProgressValue = this._ProgressValue;
            return t;
        }
        static init() {
            Laya.ClassUtils.regClass("Laya.ProgressQuad", ProgressQuadMaterial);
            let attributeMap = {
                'a_Position': Laya.VertexMesh.MESH_POSITION0,
                'a_Color': Laya.VertexMesh.MESH_COLOR0,
                'a_Texcoord0': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
                'a_BoneWeights': Laya.VertexMesh.MESH_BLENDWEIGHT0,
                'a_BoneIndices': Laya.VertexMesh.MESH_BLENDINDICES0,
                'a_WorldMat': Laya.VertexMesh.MESH_WORLDMATRIX_ROW0,
                'a_SimpleTextureParams': Laya.VertexMesh.MESH_SIMPLEANIMATOR
            };
            let uniformMap = {
                'u_Bones': Laya.Shader3D.PERIOD_CUSTOM,
                'u_AlbedoTexture': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlbedoColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_TilingOffset': Laya.Shader3D.PERIOD_MATERIAL,
                'u_AlphaTestValue': Laya.Shader3D.PERIOD_MATERIAL,
                'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE,
                'u_ViewProjection': Laya.Shader3D.PERIOD_CAMERA,
                'u_SimpleAnimatorTexture': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorParams': Laya.Shader3D.PERIOD_SPRITE,
                'u_SimpleAnimatorTextureSize': Laya.Shader3D.PERIOD_SPRITE,
                'u_FogStart': Laya.Shader3D.PERIOD_SCENE,
                'u_FogRange': Laya.Shader3D.PERIOD_SCENE,
                'u_FogColor': Laya.Shader3D.PERIOD_SCENE,
                'u_MaskTex': Laya.Shader3D.PERIOD_MATERIAL,
                'u_BarColor': Laya.Shader3D.PERIOD_MATERIAL,
                'u_ProgressValue': Laya.Shader3D.PERIOD_MATERIAL
            };
            let stateMap = {
                's_Cull': Laya.Shader3D.RENDER_STATE_CULL,
                's_Blend': Laya.Shader3D.RENDER_STATE_BLEND,
                's_BlendSrc': Laya.Shader3D.RENDER_STATE_BLEND_SRC,
                's_BlendDst': Laya.Shader3D.RENDER_STATE_BLEND_DST,
                's_DepthTest': Laya.Shader3D.RENDER_STATE_DEPTH_TEST,
                's_DepthWrite': Laya.Shader3D.RENDER_STATE_DEPTH_WRITE,
                's_StencilTest': Laya.Shader3D.RENDER_STATE_STENCIL_TEST,
                's_StencilWrite': Laya.Shader3D.RENDER_STATE_STENCIL_WRITE,
                's_StencilRef': Laya.Shader3D.RENDER_STATE_STENCIL_REF,
                's_StencilOp': Laya.Shader3D.RENDER_STATE_STENCIL_OP
            };
            let shader = Laya.Shader3D.add("ProgressQuad", null, null, true);
            let subShader = new Laya.SubShader(attributeMap, uniformMap);
            shader.addSubShader(subShader);
            subShader.addShaderPass(MyUnlitVS, MyUnlitPS, stateMap);
        }
    }
    ProgressQuadMaterial.u_MaskTex = Laya.Shader3D.propertyNameToID("u_MaskTex");
    ProgressQuadMaterial.u_BarColor = Laya.Shader3D.propertyNameToID("u_BarColor");
    ProgressQuadMaterial.u_ProgressValue = Laya.Shader3D.propertyNameToID("u_ProgressValue");
    ProgressQuadMaterial.MASKTEXTURE = Laya.Shader3D.getDefineByName("MASKTEXTURE");

    class Main {
        constructor() {
            ReportMgr.inst.forceReport("代码包初始化");
            let config3D = new Config3D();
            config3D.defaultPhysicsMemory = 128;
            config3D.octreeCulling = true;
            config3D.enableMultiLight = false;
            config3D.isAntialias = true;
            Config.useRetinalCanvas = true;
            if (window["Laya3D"])
                Laya3D.init(GameConfig.width, GameConfig.height, config3D, Laya.Handler.create(this, this.initMain));
            else {
                Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
                this.initMain();
            }
        }
        initMain() {
            Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            Laya.stage.scaleMode = GameConfig.scaleMode;
            Laya.stage.screenMode = GameConfig.screenMode;
            Laya.stage.alignV = GameConfig.alignV;
            Laya.stage.alignH = GameConfig.alignH;
            Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
            if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true")
                Laya.enableDebugPanel();
            if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"])
                Laya["PhysicsDebugDraw"].enable();
            if (GameConfig.stat)
                Laya.Stat.show();
            ComMgr.registCompent();
            Laya.alertGlobalError(true);
            GameSDK.isDebug = false;
            window["test"] = {
                UIMgr
            };
            Laya.MouseManager.multiTouchEnabled = false;
            DownTimeMaterial.init();
            ToonyColorMaterial.init();
            ToonyOutLineMaterial.init();
            ProgressQuadMaterial.init();
            UserData.init();
            FguiBase$3.clickSoundName = 2;
            fgui.UIConfig.defaultFont = "宋体";
            fgui.UIConfig.packageFileExtension = "xml";
            Laya.stage.addChild(fgui.GRoot.inst.displayObject);
            Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        }
        onConfigLoaded() {
            ResourcesMgr$1.instance.fguiUrls = UIMgr.instance.getFguiUrl();
            GameSDK.ctor(SDKData.data);
            UIMgr.instance.openUINoCom(ModuleType.Loading, null, this.onLoading.bind(this));
        }
        onLoading() {
            let count = 2;
            let countCall = () => {
                count--;
                console.log("加载计数:", count);
                if (count <= 0) {
                    UIMgr.instance.closeUI(ModuleType.Loading, false);
                    ReportMgr.inst.sendReport(ReportType.LOADING_END);
                    if(typeof hg != "undefined"){
                        hg.gameLoadResult && hg.gameLoadResult({ code : 0})
                    }
                }
            };
            SceneMgr.Int.startLoadTime();
            SubPackageMgr.enable(Laya.Handler.create(this, () => {
                SubPackageMgr.perLoadMainPack(Laya.Handler.create(this, () => {
                    GameData.init(() => {
                        countCall();
                        this.initUserData();
                        SceneMgr.Int.loadScene(countCall, null);
                    });
                }));
            }));
        }
        initUserData() {
            LogicData.instance.initData();
            LogicSkin.instance.initData();
            LogicSign.instance.initData();
            LogicProp.instance.initData();
            LogicShock.instance.initData();
            LogicTurntable.instance.initData();
            LogicBaoxiang.instance.initData();
            LogicRoom.instance.initData();
        }
    }
    new Main();

})();
//# sourceMappingURL=bundle.js.map
